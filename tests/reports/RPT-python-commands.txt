#!/usr/bin/env bats


# Make executables ./tests/../ visible to PATH
PATH="/home/aveey/tom-project/shell-scripts/tests/../:$PATH"

# Source files
shopt -s expand_aliases
source /home/aveey/tom-project/shell-scripts/tests/trace-python-commands.ipynb || true


@test "test id977598" {
	testfolder=$(echo /tmp/test-id977598-$$)
	mkdir $testfolder && cd $testfolder
	actual=$(test-id977598-actual)
	expected=$(test-id977598-expected)
	echo "========== actual =========="
	echo "$actual" 
	echo "========= expected ========="
	echo "$expected" 
	echo "============================"
	[ "$actual" == "$expected" ]
}

function test-id977598-actual () {
	\"# EX: mezcla-devel; which system.py | grep -i Mezcla-main
}

function test-id977598-expected () {
	echo -e '\\"\\"\\n",\n"# note: mezcla-devel should be stable version of mezcla-tom\\n",\n"## OLD: alias mezcla-devel=\'add-python-path $HOME/programs/python/mezcla-tom/mezcla\'\\n",\n"alias mezcla-devel=\'add-python-path $HOME/python/Mezcla/mezcla\'\\n",\n"alias mezcla-main=\'add-python-path $HOME/python/Mezcla-main/mezcla\'\\n",\n"alias mezcla-tom=\'add-python-path $HOME/python/Mezcla-tom/mezcla\'\\n",\n"# Add mezcla-devel unless another version in path\\n",\n"if [[ ! \\"$PATH\\" =~ mezcla ]]; then\\n",\n"    ## OLD: mezcla-devel\\n",\n"    ## TODO: echo \\"Warning: mezcla not in PATH\\"\\n",\n"    true\\n",\n"fi"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 9,\n   "id": "9117cb3e",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"## FUNCTIONS REQUIRED FOR SMOOTH RUNNING OF THE TESTS\\n",\n"function ps-all () { \\n",\n"    local pattern=\\"$1\\";\\n",\n"    local pager=cat;\\n",\n"    if [ \\"$pattern\\" = \\"\\" ]; then \\n",\n"        pattern=\\".\\"; \\n",\n"        pager=$PAGER\\n",\n"    fi;\\n",\n"    ps_mine.sh --all | $EGREP -i \\"((^USER)|($pattern))\\" | $pager;\\n",\n"    }\\n",\n"# Path settings\\n",\n"# TODO: define a function for removing duplicates from the PATH while\\n",\n"# preserving the order\\n",\n"function show-path-dir () { (echo \\"${1}:\\"; printenv \\"$1\\" | perl -pe \\"s/:/\\\\n/g;\\") | $PAGER; }\\n",\n"alias show-path=\'show-path-dir PATH\'\\n",\n"# append-path(path): appends PATH to environment variable unless already there\\n",\n"## TODO: function in-path { local path=$(tr \\":\\" \\"\\\\n\\" | $GREP \\"^$1$$\\"); return ($path != \\"\\"); }\\n",\n"# TODO: add force argument to ensure last (or first)\\n",\n"function append-path () { if [[ ! (($PATH =~ ^$1:) || ($PATH =~ :$1:) || ($PATH =~ :$1$)) ]]; then export PATH=\\"${PATH}:$1\\"; fi }\\n",\n"function prepend-path () { if [[ ! (($PATH =~ ^$1:) || ($PATH =~ :$1:) || ($PATH =~ :$1$)) ]]; then export PATH=\\"$1:${PATH}\\"; fi }\\n",\n"# TODO: rework append-/prepend-path and python variants via generic helper\\n",\n"function append-python-path () { export PYTHONPATH=${PYTHONPATH}:\\"$1\\"; }\\n",\n"function prepend-python-path () { export PYTHONPATH=\\"$1\\":${PYTHONPATH}; }\\n",\n" "\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 10,\n   "id": "7ec729df",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"# add-python-path $temp_dir\\n",\n"add-python-path $temp_dir"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 11,\n   "id": "d37be781",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"alias ps-python-full=\'ps-all python\'\\n",\n"# note: excludes ipython and known system-related python scripts\\n",\n"alias ps-python=\'ps-python-full | $EGREP -iv \\"(screenlet|ipython|egrep|update-manager|software-properties|networkd-dispatcher)\\"\'\\n",\n"alias show-python-path=\'show-path-dir PYTHONPATH\'"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 12,\n   "id": "000a2cc1",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"## ERROR 1 - process ID list syntax error\\n",\n"\\n",\n"# $ ps-python-full\\n",\n"# | error: process ID list syntax error\\n",\n"# | \\n",\n"# | Usage:\\n",\n"# |  ps [options]\\n",\n"# | \\n",\n"# |  Try \'ps --help <simple|list|output|threads|misc|all>\'\\n",\n"# |   or \'ps --help <s|l|o|t|m|a>\'\\n",\n"# |  for additional help text.\\n",\n"# | \\n",\n"# | For more details see ps(1)."\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 13,\n   "id": "81224e9f",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"## ERROR 2 - bash : command not found and process ID list syntax error\\n",\n"# $ ps-python\\n",\n"# | bash: -iv: command not found\\n",\n"# | error: process ID list syntax error\\n",\n"# | \\n",\n"# | Usage:\\n",\n"# |  ps [options]\\n",\n"# | \\n",\n"# |  Try \'ps --help <simple|list|output|threads|misc|all>\'\\n",\n"# |   or \'ps --help <s|l|o|t|m|a>\'\\n",\n"# |  for additional help text.\\n",\n"# | \\n",\n"# | For more details see ps(1).\\n"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 14,\n   "id": "6c5b8d28",\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "PYTHONPATH:\\n",\n  "/tmp/test-py-commands\\n",\n  "/home/aveey/python\\n",\n  "\\n"\n ]\n}\n   ],\n   "source": [\n"## show-python-path DISPLAYS ALL THE AVAILABLE PATHS OF PYTHON\\n",\n"show-python-path"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 15,\n   "id": "e09f0a5c",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"# Python-lint filtering\\n",\n"# python-lint-full(filename): complete output from pylint, with caret-based\\n",\n"# context indicators retained by substiting carriage return for newline.\\n",\n"# python-lint-work(filename): pylint with moderate filtering\\n",\n"# python-lint(filename): pylint with usual filtering\\n",\n"# TODO: specify exclusion types in pylint command line (e.g., invalid-name)\\n",\n"# example: \\"C:674, 0: Invalid constant name \\"term_freq\\" (invalid-name)\\"\\n",\n"# example: \\"run_ner.py:413:0: C0330: Wrong continued indentation (add 8 spaces).\\n",\n"#                   \'B-DATE\', \'I-DATE\', \'B-DOCTOR\', \'I-DOCTOR\', \'B-LOCATION\', \'I-LOCATION\', \'B-AGE\', \'I-AGE\',\\n",\n"#                   ^       | (bad-continuation)\\n",\n"# TODO: make Mercurial root-to-python-path hack optional\\n",\n"# TODO: add similar aliases for pep8 and pyflakes\\n",\n"# TODO: handle continutations of statements without indentation:\\n",\n"#   ner_eval/ner_detokenize.py:11:45: C0326: Exactly one space required after comma\\n",\n"#   parser.add_argument(\'--output_file\', type=str,  help=\'\')\\n",\n"#                                      ^ (bad-whitespace)\\n",\n"\\n",\n"function python-lint-full() { \\n",\n"    local root=$(hg root 2> /dev/null);\\n",\n"    ## TODO: --persistent=n (to avoid caching)\\n",\n"    PYTHONPATH=\\"$root:.:$PYTHONPATH\\" $NICE pylint \\"$@\\" | perl -00 -ne \'while (/(\\\\n\\\\S+:\\\\s*\\\\d+[^\\\\n]+)\\\\n( +)/) { s/(\\\\n\\\\S+:\\\\s*\\\\d+[^\\\\n]+)\\\\n( +)/$1\\\\r$2/mg; } print(\\"$_\\");\' 2>&1 | $PAGER;\\n",\n"}"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 16,\n   "id": "644b54ae",\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "Fatal Python error: init_sys_streams: can\'t initialize sys standard streams\\n",\n  "Python runtime state: core initialized\\n",\n  "Traceback (most recent call last):\\n",\n  "  File \\"/usr/lib/python3.10/io.py\\", line 52, in <module>\\n",\n  "  File \\"/tmp/test-py-commands/test-3443/abc.py\\", line 1, in <module>\\n",\n  "RuntimeError: lost sys.stdout\\n"\n ]\n}\n   ],\n   "source": [\n"\\n",\n"# python-lint-full (scores the code on the basis of effectiveness)\\n",\n"python-lint-full $BIN_DIR/tests/batspp.py\\n"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 17,\n   "id": "ff01fc98",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"# Notes:\\n",\n"# - filters out context in addition to warning proper, as in following:\\n",\n"#    ex: C:244, 0: Exactly one space required after assignment\\n",\n"#    SKIP_ADS =  (IS_GI_JOB_SEARCH or system.getenv_bool(\\"SKIP_ADS\\", False))\\n",\n"#             ^ (bad-whitespace)\\n",\n"# - filters out other extraneous output\\n",\n"#   ex: Your code has been rated at 7.43/10 ...\\n",\n"#   ex: No config file found ...\\n",\n"# - the following has two regex: *modify the first* to add more conditions to ignore; the second is just for the extraneous pylint output\\n",\n"function python-lint-work() { python-lint-full \\"$@\\" 2>&1 | $EGREP -v \'\\\\((bad-continuation|bad-option-value|fixme|invalid-name|locally-disabled|too-few-public-methods|too-many-\\\\S+|trailing-whitespace|star-args|unnecessary-pass)\\\\)\' | $EGREP -v \'^(([A-Z]:[0-9]+)|(Your code has been rated)|(No config file found)|(\\\\-\\\\-\\\\-\\\\-\\\\-))\' | $PAGER; }\\n",\n"# TODO: rename as python-lint-tpo for clarity (and make python-lint as alias for it)\\n",\n"function python-lint() { python-lint-work \\"$@\\" 2>&1 | $EGREP -v \'(Exactly one space required)|\\\\((bad-continuation|bad-whitespace|bad-indentation|bare-except|c-extension-no-member|consider-using-enumerate|consider-using-with|global-statement|global-variable-not-assigned|keyword-arg-before-vararg|len-as-condition|line-too-long|logging-not-lazy|misplaced-comparison-constant|missing-final-newline|redefined-variable-type|redundant-keyword-arg|superfluous-parens|too-many-arguments|too-many-instance-attributes|trailing-newlines|useless-\\\\S+|wrong-import-order|wrong-import-position)\\\\)\' | $PAGER; }\\n"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 18,\n   "id": "be24ab27",\n   "metadata": {\n"scrolled": true\n   },\n   "outputs": [],\n   "source": [\n"## ERROR GENERATED : -v COMMAND NOT FOUND\\n",\n"# $ python-lint-work $BIN_DIR/tests/batspp.py\\n",\n"# | bash: -v: command not found"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 19,\n   "id": "cab9db0c",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"## ERROR GENERATED : -v COMMAND NOT FOUND\\n",\n"# $ python-lint $BIN_DIR/tests/batspp.py\\n",\n"# | bash: -v: command not found"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 20,\n   "id": "afd7cee1",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"# run-python-lint-batched([file_spec=\\"*.py\\"]: Run python-lint in batch mode over\\n",\n"# files in FILE_SPEC, placing results in pylint/<today>.\\n",\n"#\\n",\n"function get-python-lint-dir () {\\n",\n"    local python_version_major=$(pylint --version 2>&1 | extract_matches.perl \\"Python (\\\\d)\\")\\n",\n"    local affix=\\"py${python_version_major}\\"\\n",\n"    local out_dir=\\"_pylint/$(todays-date)-$affix\\"\\n",\n"    echo \\"$out_dir\\"\\n",\n"}\\n",\n"#\\n",\n"function run-python-lint-batched () {\\n",\n"    # TODO: support files with embedded spaces\\n",\n"    local file_spec=\\"$@\\"\\n",\n"    if [ \\"$file_spec\\" = \\"\\" ]; then file_spec=\\"*.py\\"; fi\\n",\n"\\n",\n"    # Create output directory if needed\\n",\n"    local out_dir=$(get-python-lint-dir)\\n",\n"    mkdir -p \\"$out_dir\\"\\n",\n"\\n",\n"    # Run pylint and pipe top section into less\\n",\n"    (for f in $($LS $file_spec); do\\n",\n"         # HACK: uses basename of parent prefix if invoked with path\\n",\n"         local b=$(basename \\"$f\\")\\n",\n"         local pre=\\"\\"\\n",\n"\\t # Note: uses directory name as prefix if file not in current dir\\n",\n"         if [[ $f =~ / ]]; then pre=\\"$(basename $(dirname \\"$f\\"))-\\"; fi\\n",\n"         DEBUG_LEVEL=5 python-lint \\"$f\\" >| \\"$out_dir/$pre$b\\".log 2>&1\\n",\n"         head \\"$out_dir/$pre$b\\".log\\n",\n"     done) >| \\"$out_dir/summary.log\\"\\n",\n"    less -p \'^\\\\** Module\' \\"$out_dir/summary.log\\";\\n",\n"}"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 21,\n   "id": "898ff12b",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"# (REQUIRED BY run-python-lint-batched)\\n",\n"\\n",\n"function downcase-stdin { perl -pe \\"use open \':std\', \':encoding(UTF-8)\'; s/.*/\\\\L$&/;\\"; }\\n",\n"function downcase-text() { echo \\"$@\\" | downcase-stdin; }\\n",\n"# todays-date(): outputs date in format DDmmmYY (e.g., 22Apr20)\\n",\n"## OLD: function todays-date() { date \'+%d%b%y\' | perl -pe \'s/.*/\\\\L$&/;\'; }\\n",\n"## TODO: drop leading digits in day of month\\n",\n"## NOTE: keep in synch with common.perl get_file_ddmmmyy and .emacs edit-adhoc-notes-file\\n",\n"function todays-date() { date \'+%d%b%y\' | downcase-stdin; }\\n"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 22,\n   "id": "207d98f0",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"# ERROR: Pattern not found  (press RETURN)\\n",\n"# run-python-lint-batched ./print.py "\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 23,\n   "id": "3fccc7ab",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"# python-import-path(module): find path for package directory of MODULE\\n",\n"# Note: this checks output via module initialization output shown with python -v\\n",\n"# ex: /usr/local/misc/programs/anaconda3/lib/python3.8/site-packages/sklearn/__pycache__/__init__.cpython-38.pyc matches /usr/local/misc/programs/anaconda3/lib/python3.8/site-packages/sklearn/__init__.py\\n",\n"\\n",\n"function python-import-path-all() { local module=\\"$1\\"; python -u -v -c \\"import $module\\" 2>&1; }\\n",\n"function python-import-path-full() { local module=\\"$1\\"; python-import-path-all \\"$@\\" | extract_matches.perl \\"((matches (.*\\\\W$module[^/]*[/\\\\.][^/]*))|ModuleNotFoundError)\\"; }\\n",\n"function python-import-path() { python-import-path-full \\"$@\\" | head -1; }\\n"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 24,\n   "id": "61b87ac0",\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "asttokens==2.0.5\\n",\n  "Babel==2.10.1\\n",\n  "backcall==0.2.0\\n",\n  "bash_kernel @ git+https://github.com/kdm9/bash_kernel.git@a4c81c9f35926b7625b11e4c016c5e67edac522f\\n",\n  "batspp @ file:///home/aveey/tom-project/shell-scripts/batspp\\n",\n  "brotlipy==0.7.0\\n",\n  "certifi==2021.10.8\\n",\n  "cffi @ file:///opt/conda/conda-bld/cffi_1642701102775/work\\n",\n  "charset-normalizer @ file:///tmp/build/80754af9/charset-normalizer_1630003229654/work\\n",\n  "click==8.1.3\\n",\n  "colorama @ file:///tmp/build/80754af9/colorama_1607707115595/work\\n",\n  "conda==4.12.0\\n",\n  "conda-content-trust @ file:///tmp/build/80754af9/conda-content-trust_1617045594566/work\\n",\n  "conda-package-handling @ file:///tmp/build/80754af9/conda-package-handling_1649105784853/work\\n",\n  "cryptography @ file:///tmp/build/80754af9/cryptography_1639414572950/work\\n",\n  "debugpy==1.6.0\\n",\n  "decorator==5.1.1\\n",\n  "entrypoints==0.4\\n",\n  "executing==0.8.3\\n",\n  "ExifRead==3.0.0\\n",\n  "filetype==1.0.13\\n",\n  "Flask==2.0.1\\n",\n  "idna @ file:///tmp/build/80754af9/idna_1637925883363/work\\n",\n  "importlib-metadata==4.11.4\\n",\n  "inifile==0.4.1\\n",\n  "ipykernel==6.15.0\\n",\n  "ipython==8.4.0\\n",\n  "itsdangerous==2.1.2\\n",\n  "jedi==0.18.1\\n",\n  "Jinja2==3.0.3\\n",\n  "jupyter-client==7.3.4\\n",\n  "jupyter-core==4.10.0\\n",\n  "Lektor==3.3.4\\n",\n  "MarkupSafe==2.1.1\\n",\n  "matplotlib-inline==0.1.3\\n",\n  "mezcla==1.3.0\\n",\n  "mistune==0.8.4\\n",\n  "nest-asyncio==1.5.5\\n",\n  "packaging==21.3\\n",\n  "parso==0.8.3\\n",\n  "pexpect==4.8.0\\n",\n  "pickleshare==0.7.5\\n",\n  "prompt-toolkit==3.0.30\\n",\n  "psutil==5.9.1\\n",\n  "ptyprocess==0.7.0\\n",\n  "pure-eval==0.2.2\\n",\n  "pycosat==0.6.3\\n",\n  "pycparser @ file:///tmp/build/80754af9/pycparser_1636541352034/work\\n",\n  "Pygments==2.12.0\\n",\n  "pyOpenSSL @ file:///opt/conda/conda-bld/pyopenssl_1643788558760/work\\n",\n  "pyparsing==3.0.9\\n",\n  "PySocks @ file:///tmp/build/80754af9/pysocks_1605305812635/work\\n",\n  "python-dateutil==2.8.2\\n",\n  "python-slugify==6.1.2\\n",\n  "pytz==2022.1\\n",\n  "pyzmq==23.2.0\\n",\n  "requests @ file:///opt/conda/conda-bld/requests_1641824580448/work\\n",\n  "ruamel-yaml-conda @ file:///tmp/build/80754af9/ruamel_yaml_1616016711199/work\\n",\n  "six @ file:///tmp/build/80754af9/six_1644875935023/work\\n",\n  "stack-data==0.3.0\\n",\n  "text-unidecode==1.3\\n",\n  "tornado==6.1\\n",\n  "tqdm @ file:///opt/conda/conda-bld/tqdm_1647339053476/work\\n",\n  "traitlets==5.3.0\\n",\n  "urllib3 @ file:///opt/conda/conda-bld/urllib3_1643638302206/work\\n",\n  "watchdog==2.1.8\\n",\n  "wcwidth==0.2.5\\n",\n  "Werkzeug==2.1.2\\n",\n  "zipp==3.8.0\\n"\n ]\n}\n   ],\n   "source": [\n"# RETURNS A LIST OF PYTHON MODULES\\n",\n"rm -rf ./*\\n",\n"pip3 freeze"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 25,\n   "id": "47052961",\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "matches /home/aveey/miniconda3/lib/python3.9/site-packages/conda/__init__.py\\n",\n  "--------------------------------------------------------------------------------\\n",\n  "matches /home/aveey/miniconda3/lib/python3.9/site-packages/conda/__init__.py\\n",\n  "matches /home/aveey/miniconda3/lib/python3.9/site-packages/conda/common\\n",\n  "matches /home/aveey/miniconda3/lib/python3.9/site-packages/conda/common\\n",\n  "--------------------------------------------------------------------------------\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/encodings/__pycache__/__init__.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/encodings/__init__.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/encodings/__pycache__/__init__.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/codecs.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/codecs.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/codecs.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/encodings/__pycache__/aliases.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/encodings/aliases.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/encodings/__pycache__/aliases.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/encodings/__pycache__/utf_8.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/encodings/utf_8.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/encodings/__pycache__/utf_8.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/encodings/__pycache__/latin_1.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/encodings/latin_1.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/encodings/__pycache__/latin_1.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/io.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/io.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/io.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/abc.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/abc.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/abc.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/site.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/site.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/site.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/os.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/os.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/os.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/stat.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/stat.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/stat.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/_collections_abc.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/_collections_abc.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/_collections_abc.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/posixpath.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/posixpath.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/posixpath.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/genericpath.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/genericpath.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/genericpath.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/_sitebuiltins.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/_sitebuiltins.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/_sitebuiltins.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/_bootlocale.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/_bootlocale.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/_bootlocale.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/site-packages/_distutils_hack/__pycache__/__init__.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/site-packages/_distutils_hack/__init__.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/site-packages/_distutils_hack/__pycache__/__init__.cpython-39.pyc\'\\n",\n  "[GCC 7.5.0] :: Anaconda, Inc. on linux\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/site-packages/conda/__pycache__/__init__.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/site-packages/conda/__init__.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/site-packages/conda/__pycache__/__init__.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/__future__.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/__future__.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/__future__.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/json/__pycache__/__init__.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/json/__init__.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/json/__pycache__/__init__.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/json/__pycache__/decoder.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/json/decoder.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/json/__pycache__/decoder.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/re.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/re.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/re.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/enum.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/enum.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/enum.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/types.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/types.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/types.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/sre_compile.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/sre_compile.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/sre_compile.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/sre_parse.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/sre_parse.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/sre_parse.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/sre_constants.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/sre_constants.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/sre_constants.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/functools.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/functools.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/functools.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/collections/__pycache__/__init__.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/collections/__init__.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/collections/__pycache__/__init__.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/heapq.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/heapq.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/heapq.cpython-39.pyc\'\\n",\n  "# extension module \'_heapq\' loaded from \'/home/aveey/miniconda3/lib/python3.9/lib-dynload/_heapq.cpython-39-x86_64-linux-gnu.so\'\\n",\n  "# extension module \'_heapq\' executed from \'/home/aveey/miniconda3/lib/python3.9/lib-dynload/_heapq.cpython-39-x86_64-linux-gnu.so\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/keyword.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/keyword.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/keyword.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/operator.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/operator.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/operator.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/reprlib.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/reprlib.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/reprlib.cpython-39.pyc\'\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/copyreg.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/copyreg.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/copyreg.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/json/__pycache__/scanner.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/json/scanner.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/json/__pycache__/scanner.cpython-39.pyc\'\\n",\n  "# extension module \'_json\' loaded from \'/home/aveey/miniconda3/lib/python3.9/lib-dynload/_json.cpython-39-x86_64-linux-gnu.so\'\\n",\n  "# extension module \'_json\' executed from \'/home/aveey/miniconda3/lib/python3.9/lib-dynload/_json.cpython-39-x86_64-linux-gnu.so\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/json/__pycache__/encoder.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/json/encoder.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/json/__pycache__/encoder.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/site-packages/conda/common/__pycache__/__init__.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/site-packages/conda/common/__init__.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/site-packages/conda/common/__pycache__/__init__.cpython-39.pyc\'\\n",\n  "import \'conda.common\' # <_frozen_importlib_external.SourceFileLoader object at 0x7f1baf7b0c10>\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/site-packages/conda/common/__pycache__/compat.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/site-packages/conda/common/compat.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/site-packages/conda/common/__pycache__/compat.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/tempfile.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/tempfile.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/tempfile.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/warnings.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/warnings.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/warnings.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/shutil.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/shutil.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/shutil.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/fnmatch.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/fnmatch.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/fnmatch.cpython-39.pyc\'\\n",\n  "# extension module \'zlib\' loaded from \'/home/aveey/miniconda3/lib/python3.9/lib-dynload/zlib.cpython-39-x86_64-linux-gnu.so\'\\n",\n  "# extension module \'zlib\' executed from \'/home/aveey/miniconda3/lib/python3.9/lib-dynload/zlib.cpython-39-x86_64-linux-gnu.so\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/bz2.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/bz2.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/bz2.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/_compression.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/_compression.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/_compression.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/threading.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/threading.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/threading.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/_weakrefset.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/_weakrefset.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/_weakrefset.cpython-39.pyc\'\\n",\n  "# extension module \'_bz2\' loaded from \'/home/aveey/miniconda3/lib/python3.9/lib-dynload/_bz2.cpython-39-x86_64-linux-gnu.so\'\\n",\n  "# extension module \'_bz2\' executed from \'/home/aveey/miniconda3/lib/python3.9/lib-dynload/_bz2.cpython-39-x86_64-linux-gnu.so\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/lzma.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/lzma.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/lzma.cpython-39.pyc\'\\n",\n  "# extension module \'_lzma\' loaded from \'/home/aveey/miniconda3/lib/python3.9/lib-dynload/_lzma.cpython-39-x86_64-linux-gnu.so\'\\n",\n  "# extension module \'_lzma\' executed from \'/home/aveey/miniconda3/lib/python3.9/lib-dynload/_lzma.cpython-39-x86_64-linux-gnu.so\'\\n",\n  "# extension module \'grp\' loaded from \'/home/aveey/miniconda3/lib/python3.9/lib-dynload/grp.cpython-39-x86_64-linux-gnu.so\'\\n",\n  "# extension module \'grp\' executed from \'/home/aveey/miniconda3/lib/python3.9/lib-dynload/grp.cpython-39-x86_64-linux-gnu.so\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/random.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/random.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/random.cpython-39.pyc\'\\n",\n  "# extension module \'math\' loaded from \'/home/aveey/miniconda3/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so\'\\n",\n  "# extension module \'math\' executed from \'/home/aveey/miniconda3/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/bisect.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/bisect.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/bisect.cpython-39.pyc\'\\n",\n  "# extension module \'_bisect\' loaded from \'/home/aveey/miniconda3/lib/python3.9/lib-dynload/_bisect.cpython-39-x86_64-linux-gnu.so\'\\n",\n  "# extension module \'_bisect\' executed from \'/home/aveey/miniconda3/lib/python3.9/lib-dynload/_bisect.cpython-39-x86_64-linux-gnu.so\'\\n",\n  "# extension module \'_random\' loaded from \'/home/aveey/miniconda3/lib/python3.9/lib-dynload/_random.cpython-39-x86_64-linux-gnu.so\'\\n",\n  "# extension module \'_random\' executed from \'/home/aveey/miniconda3/lib/python3.9/lib-dynload/_random.cpython-39-x86_64-linux-gnu.so\'\\n",\n  "# extension module \'_sha512\' loaded from \'/home/aveey/miniconda3/lib/python3.9/lib-dynload/_sha512.cpython-39-x86_64-linux-gnu.so\'\\n",\n  "# extension module \'_sha512\' executed from \'/home/aveey/miniconda3/lib/python3.9/lib-dynload/_sha512.cpython-39-x86_64-linux-gnu.so\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/__pycache__/weakref.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/weakref.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/__pycache__/weakref.cpython-39.pyc\'\\n",\n  "# /home/aveey/miniconda3/lib/python3.9/collections/__pycache__/abc.cpython-39.pyc matches /home/aveey/miniconda3/lib/python3.9/collections/abc.py\\n",\n  "# code object from \'/home/aveey/miniconda3/lib/python3.9/collections/__pycache__/abc.cpython-39.pyc\'\\n",\n  "import \'conda.common.compat\' # <_frozen_importlib_external.SourceFileLoader object at 0x7f1baf822af0>\\n",\n  "import \'conda\' # <_frozen_importlib_external.SourceFileLoader object at 0x7f1baf812400>\\n",\n  "# cleanup[2] removing conda.common\\n",\n  "# cleanup[2] removing conda.common.compat\\n",\n  "# cleanup[2] removing conda\\n",\n  "# destroy conda\\n",\n  "# destroy conda.common\\n",\n  "# destroy conda.common.compat\\n"\n ]\n}\n   ],\n   "source": [\n"# conda MODULE IS USED FOR TEST\\n",\n"\\n",\n"python-import-path \'conda\'\\n",\n"linebr\\n",\n"python-import-path-full \'conda\'\\n",\n"linebr\\n",\n"python-import-path-all \'conda\' | grep \'conda\'"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 26,\n   "id": "88b32c36",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"# note: gotta hate python!\\n",\n"function python-module-version-full { local module=\\"$1\\"; python -c \\"import $module; print([v for v in [getattr($module, a, \'\') for a in \'__VERSION__ VERSION __version__ version\'.split()] if v][0])\\"; }\\n",\n"# TODO: check-error if no value returned\\n",\n"function python-module-version { python-module-version-full \\"$@\\" 2> /dev/null; }\\n",\n"function python-package-members() { local package=\\"$1\\"; python -c \\"import $package; print(dir($package));\\"; }\\n",\n"#\\n",\n"alias python-setup-install=\'log=setup.log;  rename-with-file-date $log;  uname -a > $log;  python setup.py install --record installed-files.list >> $log 2>&1;  ltc $log\'\\n",\n"# TODO: add -v (the xargs usage seems to block it)\\n",\n"alias python-uninstall-setup=\'cat installed-files.list | xargs /bin/rm -vi; rename_files.perl -regex ^ un installed-files.list\'\\n"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 27,\n   "id": "c3bda266",\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "1.3.0\\n",\n  "--------------------------------------------------------------------------------\\n",\n  "1.3.0\\n",\n  "--------------------------------------------------------------------------------\\n",\n  "[\'PYTHON3_PLUS\', \'TL\', \'__VERSION__\', \'__all__\', \'__builtins__\', \'__cached__\', \'__doc__\', \'__file__\', \'__loader__\', \'__name__\', \'__package__\', \'__path__\', \'__spec__\', \'__version__\', \'debug\', \'gh\', \'glue_helpers\', \'mezcla\', \'sys\', \'sys_version_info_hack\', \'system\', \'tpo_common\']\\n",\n  "--------------------------------------------------------------------------------\\n"\n ]\n}\n   ],\n   "source": [\n"# MODULE USED: mezcla\\n",\n"python-module-version-full mezcla\\n",\n"linebr\\n",\n"python-module-version mezcla\\n",\n"linebr\\n",\n"python-package-members mezcla\\n",\n"linebr"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 28,\n   "id": "f12d1371",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"## rename-with-file-date REQUIRED\\n",\n"function rename-with-file-date() {\\n",\n"    ## DEBUG: set -o xtrace\\n",\n"    local f new_f\\n",\n"    local move_command=\\"move\\"\\n",\n"    if [ \\"$1\\" = \\"--copy\\" ]; then\\n",\n"        ## TODO: move_command=\\"copy\\"\\n",\n"        move_command=\\"command cp --interactive --verbose --preserve\\"\\n",\n"        shift\\n",\n"    fi\\n",\n"    for f in \\"$@\\"; do\\n",\n"        ## DEBUG: echo \\"f=$f\\"\\n",\n"        if [ -e \\"$f\\" ]; then\\n",\n"           new_f=$(get-free-filename \\"$f\\".$(date --reference=\\"$f\\" \'+%d%b%y\') \\".\\")\\n",\n"           ## DEBUG: echo\\n",\n"           eval \\"$move_command\\" \\"$f\\" \\"$new_f\\";\\n",\n"        fi\\n",\n"    done;\\n",\n"    ## DEBUG: set - -o xtrace\\n",\n"}\\n",\n"\\n",\n"function get-free-filename() {\\n",\n"    local base=\\"$1\\"\\n",\n"    local sep=\\"$2\\"\\n",\n"    local L=1\\n",\n"    local filename=\\"$base\\"\\n",\n"    ## DEBUG: local -p\\n",\n"    while [ -e \\"$filename\\" ]; do\\n",\n"        let L++\\n",\n"        filename=\\"$base$sep$L\\"\\n",\n"    done;\\n",\n"    ## DEBUG: local -p\\n",\n"    echo \\"$filename\\"\\n",\n"}\\n",\n"\\n",\n"alias move=\'mv\'\\n",\n"export PAGER=less\\n",\n"export PAGER_CHOPPED=\\"less -S\\"\\n",\n"export PAGER_NOEXIT=\\"less -+F\\"\\n",\n"function zless () { zcat \\"$@\\" | $PAGER; }\\n",\n"# \\n",\n"# zhead(file, head-opts)\\n",\n"function zhead () {\\n",\n"    local file=\\"$1\\"\\n",\n"    shift\\n",\n"    zcat \\"$file\\" | head \\"$@\\"\\n",\n"}\\n",\n"alias less-=\'$PAGER_NOEXIT\'\\n",\n"alias less-clipped=\'$PAGER_NOEXIT -S\'\\n",\n"alias less-tail=\'$PAGER_NOEXIT +G\'\\n",\n"alias less-tail-clipped=\'$PAGER_NOEXIT +G -S\'\\n",\n"alias ltc=less-tail-clipped\\n"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 29,\n   "id": "6e4b2871",\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "--------------------------------------------------------------------------------\\n"\n ]\n}\n   ],\n   "source": [\n"## REQUIRES setup.py (TBC)\\n",\n"\\n",\n"#python-setup-install\\n",\n"linebr\\n",\n"#python-uninstall-setup"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 30,\n   "id": "f8812332",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"# ipython(): overrides ipython command to set xterm title\\n",\n"alias set-xterm-window=\'set_xterm_title.bash\'\\n",\n"\\n",\n"function ipython() { \\n",\n"    local ipython=$(which ipython)\\n",\n"    if [ \\"$ipython\\" = \\"\\" ]; then echo \\"Error: install ipython first\\"; return; fi\\n",\n"    set-xterm-window \\"ipython [$PWD]\\"\\n",\n"    $ipython \\"$@\\"\\n",\n"}\\n",\n"\\n",\n"# python-trace(script, arg, ...): Run python SCRIPT with statement tracing\\n",\n"function python-trace {\\n",\n"    local script=\\"$1\\"\\n",\n"    shift\\n",\n"    $PYTHON -m trace --trace $(which \\"$script\\") \\"$@\\"\\n",\n"    }\\n"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 31,\n   "id": "0fb4bd76",\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "/home/aveey/bin/set_xterm_title.bash: line 239: /_set_xterm_title.5195.full.list: Permission denied\\n",\n  "/home/aveey/bin/set_xterm_title.bash: line 240: /_set_xterm_title.5195.icon.list: Permission denied\\n",\n  "\\u001b]1;ipython [/tmp/test-py-commands/test-3443]\\u0007\\u001b]2;ipython [/tmp/test-py-commands/test-3443]\\u0007=========\\n",\n  " IPython\\n",\n  "=========\\n",\n  "\\n",\n  "Tools for Interactive Computing in Python\\n",\n  "=========================================\\n",\n  "\\n",\n  "    A Python shell with automatic history (input and output), dynamic object\\n",\n  "    introspection, easier configuration, command completion, access to the\\n",\n  "    system shell and more.  IPython can also be embedded in running programs.\\n",\n  "\\n",\n  "Usage\\n",\n  "\\n",\n  "    ipython [subcommand] [options] [-c cmd | -m mod | file] [--] [arg] ...\\n",\n  "\\n",\n  "    If invoked with no options, it executes the file and exits, passing the\\n",\n  "    remaining arguments to the script, just as if you had specified the same\\n",\n  "    command with python. You may need to specify `--` before args to be passed\\n",\n  "    to the script, to prevent IPython from attempting to parse them. If you\\n",\n  "    specify the option `-i` before the filename, it will enter an interactive\\n",\n  "    IPython session after running the script, rather than exiting. Files ending\\n",\n  "    in .py will be treated as normal Python, but files ending in .ipy can\\n",\n  "    contain special IPython syntax (magic commands, shell expansions, etc.).\\n",\n  "\\n",\n  "    Almost all configuration in IPython is available via the command-line. Do\\n",\n  "    `ipython --help-all` to see all available options.  For persistent\\n",\n  "    configuration, look into your `ipython_config.py` configuration file for\\n",\n  "    details.\\n",\n  "\\n",\n  "    This file is typically installed in the `IPYTHONDIR` directory, and there\\n",\n  "    is a separate configuration directory for each profile. The default profile\\n",\n  "    directory will be located in $IPYTHONDIR/profile_default. IPYTHONDIR\\n",\n  "    defaults to to `$HOME/.ipython`.  For Windows users, $HOME resolves to\\n",\n  "    C:\\\\Users\\\\YourUserName in most instances.\\n",\n  "\\n",\n  "    To initialize a profile with the default configuration file, do::\\n",\n  "\\n",\n  "      $> ipython profile create\\n",\n  "\\n",\n  "    and start editing `IPYTHONDIR/profile_default/ipython_config.py`\\n",\n  "\\n",\n  "    In IPython\'s documentation, we will refer to this directory as\\n",\n  "    `IPYTHONDIR`, you can change its default location by creating an\\n",\n  "    environment variable with this name and setting it to the desired path.\\n",\n  "\\n",\n  "    For more information, see the manual available in HTML and PDF in your\\n",\n  "    installation, or online at https://ipython.org/documentation.html.\\n",\n  "\\n",\n  "Subcommands\\n",\n  "===========\\n",\n  "Subcommands are launched as `ipython cmd [args]`. For information on using\\n",\n  "subcommand \'cmd\', do: `ipython cmd -h`.\\n",\n  "\\n",\n  "profile\\n",\n  "    Create and manage IPython profiles.\\n",\n  "kernel\\n",\n  "    Start a kernel without an attached frontend.\\n",\n  "locate\\n",\n  "    print the path to the IPython dir\\n",\n  "history\\n",\n  "    Manage the IPython history database.\\n",\n  "\\n",\n  "Options\\n",\n  "=======\\n",\n  "The options below are convenience aliases to configurable class-options,\\n",\n  "as listed in the \\"Equivalent to\\" description-line of the aliases.\\n",\n  "To see all configurable class-options for some <cmd>, use:\\n",\n  "    <cmd> --help-all\\n",\n  "\\n",\n  "--debug\\n",\n  "    set log level to logging.DEBUG (maximize logging output)\\n",\n  "    Equivalent to: [--Application.log_level=10]\\n",\n  "--show-config\\n",\n  "    Show the application\'s configuration (human-readable format)\\n",\n  "    Equivalent to: [--Application.show_config=True]\\n",\n  "--show-config-json\\n",\n  "    Show the application\'s configuration (json format)\\n",\n  "    Equivalent to: [--Application.show_config_json=True]\\n",\n  "--quiet\\n",\n  "    set log level to logging.CRITICAL (minimize logging output)\\n",\n  "    Equivalent to: [--Application.log_level=50]\\n",\n  "--init\\n",\n  "    Initialize profile with default config files.  This is equivalent\\n",\n  "                to running `ipython profile create <profile>` prior to startup.\\n",\n  "    Equivalent to: [--BaseIPythonApplication.copy_config_files=True --BaseIPythonApplication.auto_create=True]\\n",\n  "--autoindent\\n",\n  "    Turn on autoindenting.\\n",\n  "    Equivalent to: [--InteractiveShell.autoindent=True]\\n",\n  "--no-autoindent\\n",\n  "    Turn off autoindenting.\\n",\n  "    Equivalent to: [--InteractiveShell.autoindent=False]\\n",\n  "--automagic\\n",\n  "    Turn on the auto calling of magic commands. Type %%magic at the\\n",\n  "            IPython  prompt  for  more information.\\n",\n  "    Equivalent to: [--InteractiveShell.automagic=True]\\n",\n  "--no-automagic\\n",\n  "    Turn off the auto calling of magic commands.\\n",\n  "    Equivalent to: [--InteractiveShell.automagic=False]\\n",\n  "--pdb\\n",\n  "    Enable auto calling the pdb debugger after every exception.\\n",\n  "    Equivalent to: [--InteractiveShell.pdb=True]\\n",\n  "--no-pdb\\n",\n  "    Disable auto calling the pdb debugger after every exception.\\n",\n  "    Equivalent to: [--InteractiveShell.pdb=False]\\n",\n  "--pprint\\n",\n  "    Enable auto pretty printing of results.\\n",\n  "    Equivalent to: [--PlainTextFormatter.pprint=True]\\n",\n  "--no-pprint\\n",\n  "    Disable auto pretty printing of results.\\n",\n  "    Equivalent to: [--PlainTextFormatter.pprint=False]\\n",\n  "--color-info\\n",\n  "    IPython can display information about objects via a set of functions,\\n",\n  "        and optionally can use colors for this, syntax highlighting\\n",\n  "        source code and various other elements. This is on by default, but can cause\\n",\n  "        problems with some pagers. If you see such problems, you can disable the\\n",\n  "        colours.\\n",\n  "    Equivalent to: [--InteractiveShell.color_info=True]\\n",\n  "--no-color-info\\n",\n  "    Disable using colors for info related things.\\n",\n  "    Equivalent to: [--InteractiveShell.color_info=False]\\n",\n  "--ignore-cwd\\n",\n  "    Exclude the current working directory from sys.path\\n",\n  "    Equivalent to: [--InteractiveShellApp.ignore_cwd=True]\\n",\n  "--no-ignore-cwd\\n",\n  "    Include the current working directory in sys.path\\n",\n  "    Equivalent to: [--InteractiveShellApp.ignore_cwd=False]\\n",\n  "--nosep\\n",\n  "    Eliminate all spacing between prompts.\\n",\n  "    Equivalent to: [--InteractiveShell.separate_in= --InteractiveShell.separate_out= --InteractiveShell.separate_out2=]\\n",\n  "--pylab\\n",\n  "    Pre-load matplotlib and numpy for interactive use with\\n",\n  "        the default matplotlib backend.\\n",\n  "    Equivalent to: [--InteractiveShellApp.pylab=auto]\\n",\n  "--matplotlib\\n",\n  "    Configure matplotlib for interactive use with\\n",\n  "        the default matplotlib backend.\\n",\n  "    Equivalent to: [--InteractiveShellApp.matplotlib=auto]\\n",\n  "--autoedit-syntax\\n",\n  "    Turn on auto editing of files with syntax errors.\\n",\n  "    Equivalent to: [--TerminalInteractiveShell.autoedit_syntax=True]\\n",\n  "--no-autoedit-syntax\\n",\n  "    Turn off auto editing of files with syntax errors.\\n",\n  "    Equivalent to: [--TerminalInteractiveShell.autoedit_syntax=False]\\n",\n  "--simple-prompt\\n",\n  "    Force simple minimal prompt using `raw_input`\\n",\n  "    Equivalent to: [--TerminalInteractiveShell.simple_prompt=True]\\n",\n  "--no-simple-prompt\\n",\n  "    Use a rich interactive prompt with prompt_toolkit\\n",\n  "    Equivalent to: [--TerminalInteractiveShell.simple_prompt=False]\\n",\n  "--banner\\n",\n  "    Display a banner upon starting IPython.\\n",\n  "    Equivalent to: [--TerminalIPythonApp.display_banner=True]\\n",\n  "--no-banner\\n",\n  "    Don\'t display a banner upon starting IPython.\\n",\n  "    Equivalent to: [--TerminalIPythonApp.display_banner=False]\\n",\n  "--confirm-exit\\n",\n  "    Set to confirm when you try to exit IPython with an EOF (Control-D\\n",\n  "        in Unix, Control-Z/Enter in Windows). By typing \'exit\' or \'quit\',\\n",\n  "        you can force a direct exit without any confirmation.\\n",\n  "    Equivalent to: [--TerminalInteractiveShell.confirm_exit=True]\\n",\n  "--no-confirm-exit\\n",\n  "    Don\'t prompt the user when exiting.\\n",\n  "    Equivalent to: [--TerminalInteractiveShell.confirm_exit=False]\\n",\n  "--term-title\\n",\n  "    Enable auto setting the terminal title.\\n",\n  "    Equivalent to: [--TerminalInteractiveShell.term_title=True]\\n",\n  "--no-term-title\\n",\n  "    Disable auto setting the terminal title.\\n",\n  "    Equivalent to: [--TerminalInteractiveShell.term_title=False]\\n",\n  "--classic\\n",\n  "    Gives IPython a similar feel to the classic Python prompt.\\n",\n  "    Equivalent to: [--InteractiveShell.cache_size=0 --InteractiveShell.separate_in= --InteractiveShell.separate_out= --InteractiveShell.separate_out2= --InteractiveShell.colors=NoColor --InteractiveShell.xmode=Plain --PlainTextFormatter.pprint=False --TerminalInteractiveShell.prompts_class=IPython.terminal.prompts.ClassicPrompts]\\n",\n  "--quick\\n",\n  "    Enable quick startup with no config files.\\n",\n  "    Equivalent to: [--TerminalIPythonApp.quick=True]\\n",\n  "-i\\n",\n  "    If running code from the command line, become interactive afterwards.\\n",\n  "        It is often useful to follow this with `--` to treat remaining flags as\\n",\n  "        script arguments.\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "    Equivalent to: [--TerminalIPythonApp.force_interact=True]\\n",\n  "--log-level=<Enum>\\n",\n  "    Set the log level by value or name.\\n",\n  "    Choices: any of [0, 10, 20, 30, 40, 50, \'DEBUG\', \'INFO\', \'WARN\', \'ERROR\', \'CRITICAL\']\\n",\n  "    Default: 30\\n",\n  "    Equivalent to: [--Application.log_level]\\n",\n  "--profile-dir=<Unicode>\\n",\n  "    Set the profile location directly. This overrides the logic used by the\\n",\n  "            `profile` option.\\n",\n  "    Default: \'\'\\n",\n  "    Equivalent to: [--ProfileDir.location]\\n",\n  "--profile=<Unicode>\\n",\n  "    The IPython profile to use.\\n",\n  "    Default: \'default\'\\n",\n  "    Equivalent to: [--BaseIPythonApplication.profile]\\n",\n  "--ipython-dir=<Unicode>\\n",\n  "    The name of the IPython directory. This directory is used for logging\\n",\n  "    configuration (through profiles), history storage, etc. The default is\\n",\n  "    usually $HOME/.ipython. This option can also be specified through the\\n",\n  "    environment variable IPYTHONDIR.\\n",\n  "    Default: \'\'\\n",\n  "    Equivalent to: [--BaseIPythonApplication.ipython_dir]\\n",\n  "--config=<Unicode>\\n",\n  "    Path to an extra config file to load.\\n",\n  "        If specified, load this config file in addition to any other IPython\\n",\n  "    config.\\n",\n  "    Default: \'\'\\n",\n  "    Equivalent to: [--BaseIPythonApplication.extra_config_file]\\n",\n  "--autocall=<Enum>\\n",\n  "    Make IPython automatically call any callable object even if you didn\'t type\\n",\n  "    explicit parentheses. For example, \'str 43\' becomes \'str(43)\' automatically.\\n",\n  "    The value can be \'0\' to disable the feature, \'1\' for \'smart\' autocall, where\\n",\n  "    it is not applied if there are no more arguments on the line, and \'2\' for\\n",\n  "    \'full\' autocall, where all callable objects are automatically called (even\\n",\n  "    if no arguments are present).\\n",\n  "    Choices: any of [0, 1, 2]\\n",\n  "    Default: 0\\n",\n  "    Equivalent to: [--InteractiveShell.autocall]\\n",\n  "--colors=<CaselessStrEnum>\\n",\n  "    Set the color scheme (NoColor, Neutral, Linux, or LightBG).\\n",\n  "    Choices: any of [\'Neutral\', \'NoColor\', \'LightBG\', \'Linux\'] (case-insensitive)\\n",\n  "    Default: \'Neutral\'\\n",\n  "    Equivalent to: [--InteractiveShell.colors]\\n",\n  "--logfile=<Unicode>\\n",\n  "    The name of the logfile to use.\\n",\n  "    Default: \'\'\\n",\n  "    Equivalent to: [--InteractiveShell.logfile]\\n",\n  "--logappend=<Unicode>\\n",\n  "    Start logging to the given file in append mode. Use `logfile` to specify a\\n",\n  "    log file to **overwrite** logs to.\\n",\n  "    Default: \'\'\\n",\n  "    Equivalent to: [--InteractiveShell.logappend]\\n",\n  "-c=<Unicode>\\n",\n  "    Execute the given command string.\\n",\n  "    Default: \'\'\\n",\n  "    Equivalent to: [--InteractiveShellApp.code_to_run]\\n",\n  "-m=<Unicode>\\n",\n  "    Run the module as a script.\\n",\n  "    Default: \'\'\\n",\n  "    Equivalent to: [--InteractiveShellApp.module_to_run]\\n",\n  "--ext=<list-item-1>...\\n",\n  "    Dotted module name(s) of one or more IPython extensions to load.\\n",\n  "    For specifying extra extensions to load on the command-line.\\n",\n  "    .. versionadded:: 7.10\\n",\n  "    Default: []\\n",\n  "    Equivalent to: [--InteractiveShellApp.extra_extensions]\\n",\n  "--gui=<CaselessStrEnum>\\n",\n  "    Enable GUI event loop integration with any of (\'asyncio\', \'glut\', \'gtk\',\\n",\n  "    \'gtk2\', \'gtk3\', \'gtk4\', \'osx\', \'pyglet\', \'qt\', \'qt4\', \'qt5\', \'qt6\', \'tk\',\\n",\n  "    \'wx\', \'gtk2\', \'qt4\').\\n",\n  "    Choices: any of [\'asyncio\', \'glut\', \'gtk\', \'gtk2\', \'gtk3\', \'gtk4\', \'osx\', \'pyglet\', \'qt\', \'qt4\', \'qt5\', \'qt6\', \'tk\', \'wx\', \'gtk2\', \'qt4\'] (case-insensitive) or None\\n",\n  "    Default: None\\n",\n  "    Equivalent to: [--InteractiveShellApp.gui]\\n",\n  "--pylab=<CaselessStrEnum>\\n",\n  "    Pre-load matplotlib and numpy for interactive use,\\n",\n  "            selecting a particular matplotlib backend and loop integration.\\n",\n  "    Choices: any of [\'auto\', \'agg\', \'gtk\', \'gtk3\', \'gtk4\', \'inline\', \'ipympl\', \'nbagg\', \'notebook\', \'osx\', \'pdf\', \'ps\', \'qt\', \'qt4\', \'qt5\', \'qt6\', \'svg\', \'tk\', \'widget\', \'wx\'] (case-insensitive) or None\\n",\n  "    Default: None\\n",\n  "    Equivalent to: [--InteractiveShellApp.pylab]\\n",\n  "--matplotlib=<CaselessStrEnum>\\n",\n  "    Configure matplotlib for interactive use with\\n",\n  "            the default matplotlib backend.\\n",\n  "    Choices: any of [\'auto\', \'agg\', \'gtk\', \'gtk3\', \'gtk4\', \'inline\', \'ipympl\', \'nbagg\', \'notebook\', \'osx\', \'pdf\', \'ps\', \'qt\', \'qt4\', \'qt5\', \'qt6\', \'svg\', \'tk\', \'widget\', \'wx\'] (case-insensitive) or None\\n",\n  "    Default: None\\n",\n  "    Equivalent to: [--InteractiveShellApp.matplotlib]\\n",\n  "--cache-size=<Int>\\n",\n  "    Set the size of the output cache.  The default is 1000, you can change it\\n",\n  "    permanently in your config file.  Setting it to 0 completely disables the\\n",\n  "    caching system, and the minimum value accepted is 3 (if you provide a value\\n",\n  "    less than 3, it is reset to 0 and a warning is issued).  This limit is\\n",\n  "    defined because otherwise you\'ll spend more time re-flushing a too small\\n",\n  "    cache than working\\n",\n  "    Default: 1000\\n",\n  "    Equivalent to: [--InteractiveShell.cache_size]\\n",\n  "\\n",\n  "Examples\\n",\n  "--------\\n",\n  "\\n",\n  "    ipython --matplotlib       # enable matplotlib integration\\n",\n  "    ipython --matplotlib=qt    # enable matplotlib integration with qt4 backend\\n",\n  "\\n",\n  "    ipython --log-level=DEBUG  # set logging to DEBUG\\n",\n  "    ipython --profile=foo      # start with profile foo\\n",\n  "\\n",\n  "    ipython profile create foo # create profile foo w/ default config files\\n",\n  "    ipython help profile       # show the help for the profile subcmd\\n",\n  "\\n",\n  "    ipython locate             # print the path to the IPython directory\\n",\n  "    ipython locate profile foo # print the path to the directory for profile `foo`\\n",\n  "\\n",\n  "To see all available configurables, use `--help-all`.\\n",\n  "\\n"\n ]\n}\n   ],\n   "source": [\n"# ipython COMMAND SEEMS TO WORK\\n",\n"ipython -h"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 32,\n   "id": "3bd43a50",\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: template, funcname: <module>\\n",\n  "template.py(10): \\"\\"\\"TODO: what module does (brief)\\"\\"\\"\\n",\n  "template.py(13): import re\\n",\n  "template.py(20): from mezcla import debug\\n",\n  " --- modulename: _bootstrap, funcname: _find_and_load\\n",\n  "<frozen importlib._bootstrap>(1004):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(153): <frozen importlib._bootstrap>(154):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(157):  --- modulename: _bootstrap, funcname: _get_module_lock\\n",\n  "<frozen importlib._bootstrap>(172): <frozen importlib._bootstrap>(173): <frozen importlib._bootstrap>(174): <frozen importlib._bootstrap>(175): <frozen importlib._bootstrap>(176): <frozen importlib._bootstrap>(177): <frozen importlib._bootstrap>(179): <frozen importlib._bootstrap>(180): <frozen importlib._bootstrap>(183):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(59): <frozen importlib._bootstrap>(60): <frozen importlib._bootstrap>(61): <frozen importlib._bootstrap>(62): <frozen importlib._bootstrap>(63): <frozen importlib._bootstrap>(64): <frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(196): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(158):  --- modulename: _bootstrap, funcname: acquire\\n",\n  "<frozen importlib._bootstrap>(93): <frozen importlib._bootstrap>(94): <frozen importlib._bootstrap>(95): <frozen importlib._bootstrap>(97): <frozen importlib._bootstrap>(98): <frozen importlib._bootstrap>(99): <frozen importlib._bootstrap>(100): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(1005): <frozen importlib._bootstrap>(1006): <frozen importlib._bootstrap>(1007):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked\\n",\n  "<frozen importlib._bootstrap>(968): <frozen importlib._bootstrap>(969): <frozen importlib._bootstrap>(970): <frozen importlib._bootstrap>(982):  --- modulename: _bootstrap, funcname: _find_spec\\n",\n  "<frozen importlib._bootstrap>(903): <frozen importlib._bootstrap>(904): <frozen importlib._bootstrap>(909): <frozen importlib._bootstrap>(915): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: __init__, funcname: find_spec\\n",\n  "__init__.py(85):         if path is not None:\\n",\n  "__init__.py(88):         method_name = \'spec_for_{fullname}\'.format(**locals())\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  "__init__.py(90):         return method()\\n",\n  " --- modulename: __init__, funcname: <lambda>\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  " --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(738): <frozen importlib._bootstrap>(740): <frozen importlib._bootstrap>(743):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(813): <frozen importlib._bootstrap>(816):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1421): <frozen importlib._bootstrap_external>(1422): <frozen importlib._bootstrap_external>(1423):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1388): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1363): <frozen importlib._bootstrap_external>(1364):  --- modulename: _bootstrap_external, funcname: _path_hooks\\n",\n  "<frozen importlib._bootstrap_external>(1336): <frozen importlib._bootstrap_external>(1338): <frozen importlib._bootstrap_external>(1339): <frozen importlib._bootstrap_external>(1340):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1341): <frozen importlib._bootstrap_external>(1342): <frozen importlib._bootstrap_external>(1338): <frozen importlib._bootstrap_external>(1339): <frozen importlib._bootstrap_external>(1340):  --- modulename: _bootstrap_external, funcname: path_hook_for_FileFinder\\n",\n  "<frozen importlib._bootstrap_external>(1608):  --- modulename: _bootstrap_external, funcname: _path_isdir\\n",\n  "<frozen importlib._bootstrap_external>(161): <frozen importlib._bootstrap_external>(163):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(151): <frozen importlib._bootstrap_external>(1610):  --- modulename: _bootstrap_external, funcname: __init__\\n",\n  "<frozen importlib._bootstrap_external>(1479): <frozen importlib._bootstrap_external>(1480): <frozen importlib._bootstrap_external>(1481):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(1481):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(1481):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(1481):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(1481): <frozen importlib._bootstrap_external>(1480): <frozen importlib._bootstrap_external>(1481):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(1481):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(1481): <frozen importlib._bootstrap_external>(1480): <frozen importlib._bootstrap_external>(1481):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(1481):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(1481): <frozen importlib._bootstrap_external>(1480): <frozen importlib._bootstrap_external>(1482): <frozen importlib._bootstrap_external>(1484): <frozen importlib._bootstrap_external>(1485):  --- modulename: _bootstrap_external, funcname: _path_isabs\\n",\n  "<frozen importlib._bootstrap_external>(177): <frozen importlib._bootstrap_external>(1487): <frozen importlib._bootstrap_external>(1488): <frozen importlib._bootstrap_external>(1489): <frozen importlib._bootstrap_external>(1365): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1526):  --- modulename: _bootstrap_external, funcname: _fill_cache\\n",\n  "<frozen importlib._bootstrap_external>(1567): <frozen importlib._bootstrap_external>(1568): <frozen importlib._bootstrap_external>(1569): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1577): <frozen importlib._bootstrap_external>(1593): <frozen importlib._bootstrap_external>(1527): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1537):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1538): <frozen importlib._bootstrap_external>(1539): <frozen importlib._bootstrap_external>(1540):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1541):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n",\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(149): <frozen importlib._bootstrap_external>(150): <frozen importlib._bootstrap_external>(1538): <frozen importlib._bootstrap_external>(1539): <frozen importlib._bootstrap_external>(1540):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1541):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n",\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(149): <frozen importlib._bootstrap_external>(150): <frozen importlib._bootstrap_external>(1538): <frozen importlib._bootstrap_external>(1539): <frozen importlib._bootstrap_external>(1540):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1541):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n",\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(149): <frozen importlib._bootstrap_external>(150): <frozen importlib._bootstrap_external>(1538): <frozen importlib._bootstrap_external>(1539): <frozen importlib._bootstrap_external>(1540):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1541):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n",\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(151): <frozen importlib._bootstrap_external>(1542):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1510):  --- modulename: _bootstrap_external, funcname: __init__\\n",\n  "<frozen importlib._bootstrap_external>(1009): <frozen importlib._bootstrap_external>(1010): <frozen importlib._bootstrap_external>(1511): <frozen importlib._bootstrap_external>(1512): <frozen importlib._bootstrap_external>(1511):  --- modulename: _bootstrap_external, funcname: spec_from_file_location\\n",\n  "<frozen importlib._bootstrap_external>(708): <frozen importlib._bootstrap_external>(720): <frozen importlib._bootstrap_external>(728):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(353): <frozen importlib._bootstrap>(354): <frozen importlib._bootstrap>(355): <frozen importlib._bootstrap>(356): <frozen importlib._bootstrap>(357): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap_external>(729): <frozen importlib._bootstrap_external>(732): <frozen importlib._bootstrap_external>(742): <frozen importlib._bootstrap_external>(753): <frozen importlib._bootstrap_external>(754): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1400): <frozen importlib._bootstrap_external>(1401): <frozen importlib._bootstrap_external>(1424): <frozen importlib._bootstrap_external>(1426): <frozen importlib._bootstrap_external>(1437):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(928): <frozen importlib._bootstrap>(943): <frozen importlib._bootstrap>(983): <frozen importlib._bootstrap>(986):  --- modulename: _bootstrap, funcname: _load_unlocked\\n",\n  "<frozen importlib._bootstrap>(661): <frozen importlib._bootstrap>(663): <frozen importlib._bootstrap>(666):  --- modulename: _bootstrap, funcname: module_from_spec\\n",\n  "<frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(562): <frozen importlib._bootstrap>(565):  --- modulename: _bootstrap_external, funcname: create_module\\n",\n  "<frozen importlib._bootstrap_external>(842): <frozen importlib._bootstrap>(569): <frozen importlib._bootstrap>(570):  --- modulename: _bootstrap, funcname: _new_module\\n",\n  "<frozen importlib._bootstrap>(36): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap, funcname: _init_module_attrs\\n",\n  "<frozen importlib._bootstrap>(490): <frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(497): <frozen importlib._bootstrap>(498): <frozen importlib._bootstrap>(519): <frozen importlib._bootstrap>(520): <frozen importlib._bootstrap>(524): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526):  --- modulename: _bootstrap, funcname: parent\\n",\n  "<frozen importlib._bootstrap>(401): <frozen importlib._bootstrap>(404): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(535): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(537): <frozen importlib._bootstrap>(538): <frozen importlib._bootstrap>(542):  --- modulename: _bootstrap, funcname: has_location\\n",\n  "<frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(543): <frozen importlib._bootstrap>(544): <frozen importlib._bootstrap>(545): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(388): <frozen importlib._bootstrap>(389): <frozen importlib._bootstrap>(391):  --- modulename: _bootstrap_external, funcname: _get_cached\\n",\n  "<frozen importlib._bootstrap_external>(492): <frozen importlib._bootstrap_external>(493): <frozen importlib._bootstrap_external>(494):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(552):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(572): <frozen importlib._bootstrap>(671): <frozen importlib._bootstrap>(672): <frozen importlib._bootstrap>(673): <frozen importlib._bootstrap>(674): <frozen importlib._bootstrap>(675): <frozen importlib._bootstrap>(680):  --- modulename: _bootstrap_external, funcname: exec_module\\n",\n  "<frozen importlib._bootstrap_external>(846):  --- modulename: _bootstrap_external, funcname: get_code\\n",\n  "<frozen importlib._bootstrap_external>(923):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper\\n",\n  "<frozen importlib._bootstrap_external>(524): <frozen importlib._bootstrap_external>(526): <frozen importlib._bootstrap_external>(529):  --- modulename: _bootstrap_external, funcname: get_filename\\n",\n  "<frozen importlib._bootstrap_external>(1034): <frozen importlib._bootstrap_external>(924): <frozen importlib._bootstrap_external>(925): <frozen importlib._bootstrap_external>(926): <frozen importlib._bootstrap_external>(927): <frozen importlib._bootstrap_external>(928): <frozen importlib._bootstrap_external>(929): <frozen importlib._bootstrap_external>(930):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(934): <frozen importlib._bootstrap_external>(935):  --- modulename: _bootstrap_external, funcname: path_stats\\n",\n  "<frozen importlib._bootstrap_external>(1079):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1080): <frozen importlib._bootstrap_external>(939): <frozen importlib._bootstrap_external>(940): <frozen importlib._bootstrap_external>(941):  --- modulename: _bootstrap_external, funcname: get_data\\n",\n  "<frozen importlib._bootstrap_external>(1038): <frozen importlib._bootstrap_external>(1039): <frozen importlib._bootstrap_external>(1040): <frozen importlib._bootstrap_external>(946): <frozen importlib._bootstrap_external>(947): <frozen importlib._bootstrap_external>(945): <frozen importlib._bootstrap_external>(949): <frozen importlib._bootstrap_external>(950):  --- modulename: _bootstrap_external, funcname: _classify_pyc\\n",\n  "<frozen importlib._bootstrap_external>(576): <frozen importlib._bootstrap_external>(577): <frozen importlib._bootstrap_external>(581): <frozen importlib._bootstrap_external>(585):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(587): <frozen importlib._bootstrap_external>(590): <frozen importlib._bootstrap_external>(951): <frozen importlib._bootstrap_external>(952): <frozen importlib._bootstrap_external>(953): <frozen importlib._bootstrap_external>(966): <frozen importlib._bootstrap_external>(967): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969): <frozen importlib._bootstrap_external>(970): <frozen importlib._bootstrap_external>(971): <frozen importlib._bootstrap_external>(966):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc\\n",\n  "<frozen importlib._bootstrap_external>(612):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(617):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(976): <frozen importlib._bootstrap_external>(977): <frozen importlib._bootstrap_external>(976):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(978): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(978):  --- modulename: _bootstrap_external, funcname: _compile_bytecode\\n",\n  "<frozen importlib._bootstrap_external>(647): <frozen importlib._bootstrap_external>(648): <frozen importlib._bootstrap_external>(649):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(650): <frozen importlib._bootstrap_external>(651): <frozen importlib._bootstrap_external>(652): <frozen importlib._bootstrap_external>(847): <frozen importlib._bootstrap_external>(850):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228):  --- modulename: __init__, funcname: <module>\\n",\n  "__init__.py(3): \\"\\"\\"\\n",\n  "__init__.py(21): __VERSION__ = \'1.3.0\'\\n",\n  "__init__.py(22): __version__ = \'1.3.0\'\\n",\n  "__init__.py(25): import sys\\n",\n  "__init__.py(28): PYTHON3_PLUS = (sys.version_info[0] >= 3)\\n",\n  "__init__.py(29): assert PYTHON3_PLUS, \\"Python 3 or higher: ¡por favor!\\"\\n",\n  "__init__.py(49): import mezcla\\n",\n  " --- modulename: _bootstrap, funcname: _lock_unlock_module\\n",\n  "<frozen importlib._bootstrap>(209):  --- modulename: _bootstrap, funcname: _get_module_lock\\n",\n  "<frozen importlib._bootstrap>(172): <frozen importlib._bootstrap>(173): <frozen importlib._bootstrap>(174): <frozen importlib._bootstrap>(175): <frozen importlib._bootstrap>(179): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(210): <frozen importlib._bootstrap>(211):  --- modulename: _bootstrap, funcname: acquire\\n",\n  "<frozen importlib._bootstrap>(93): <frozen importlib._bootstrap>(94): <frozen importlib._bootstrap>(95): <frozen importlib._bootstrap>(97): <frozen importlib._bootstrap>(98): <frozen importlib._bootstrap>(99): <frozen importlib._bootstrap>(100): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(217):  --- modulename: _bootstrap, funcname: release\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(115): <frozen importlib._bootstrap>(117): <frozen importlib._bootstrap>(118): <frozen importlib._bootstrap>(119): __init__.py(50): from mezcla import debug\\n",\n  " --- modulename: _bootstrap, funcname: _lock_unlock_module\\n",\n  "<frozen importlib._bootstrap>(209):  --- modulename: _bootstrap, funcname: _get_module_lock\\n",\n  "<frozen importlib._bootstrap>(172): <frozen importlib._bootstrap>(173): <frozen importlib._bootstrap>(174): <frozen importlib._bootstrap>(175): <frozen importlib._bootstrap>(179): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(210): <frozen importlib._bootstrap>(211):  --- modulename: _bootstrap, funcname: acquire\\n",\n  "<frozen importlib._bootstrap>(93): <frozen importlib._bootstrap>(94): <frozen importlib._bootstrap>(95): <frozen importlib._bootstrap>(97): <frozen importlib._bootstrap>(98): <frozen importlib._bootstrap>(99): <frozen importlib._bootstrap>(100): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(217):  --- modulename: _bootstrap, funcname: release\\n",\n  "<frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(115): <frozen importlib._bootstrap>(117): <frozen importlib._bootstrap>(118): <frozen importlib._bootstrap>(119):  --- modulename: _bootstrap, funcname: _handle_fromlist\\n",\n  "<frozen importlib._bootstrap>(1043): <frozen importlib._bootstrap>(1044): <frozen importlib._bootstrap>(1051): <frozen importlib._bootstrap>(1055): <frozen importlib._bootstrap>(1056): <frozen importlib._bootstrap>(1057): <frozen importlib._bootstrap>(1058):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228):  --- modulename: _bootstrap, funcname: _find_and_load\\n",\n  "<frozen importlib._bootstrap>(1004):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(153): <frozen importlib._bootstrap>(154):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(157):  --- modulename: _bootstrap, funcname: _get_module_lock\\n",\n  "<frozen importlib._bootstrap>(172): <frozen importlib._bootstrap>(173): <frozen importlib._bootstrap>(174): <frozen importlib._bootstrap>(175): <frozen importlib._bootstrap>(176): <frozen importlib._bootstrap>(177): <frozen importlib._bootstrap>(179): <frozen importlib._bootstrap>(180): <frozen importlib._bootstrap>(183):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(59): <frozen importlib._bootstrap>(60): <frozen importlib._bootstrap>(61): <frozen importlib._bootstrap>(62): <frozen importlib._bootstrap>(63): <frozen importlib._bootstrap>(64): <frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(196): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(158):  --- modulename: _bootstrap, funcname: acquire\\n",\n  "<frozen importlib._bootstrap>(93): <frozen importlib._bootstrap>(94): <frozen importlib._bootstrap>(95): <frozen importlib._bootstrap>(97): <frozen importlib._bootstrap>(98): <frozen importlib._bootstrap>(99): <frozen importlib._bootstrap>(100): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(1005): <frozen importlib._bootstrap>(1006): <frozen importlib._bootstrap>(1007):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked\\n",\n  "<frozen importlib._bootstrap>(968): <frozen importlib._bootstrap>(969): <frozen importlib._bootstrap>(970): <frozen importlib._bootstrap>(971): <frozen importlib._bootstrap>(974): <frozen importlib._bootstrap>(976): <frozen importlib._bootstrap>(977): <frozen importlib._bootstrap>(978): <frozen importlib._bootstrap>(982):  --- modulename: _bootstrap, funcname: _find_spec\\n",\n  "<frozen importlib._bootstrap>(903): <frozen importlib._bootstrap>(904): <frozen importlib._bootstrap>(909): <frozen importlib._bootstrap>(915): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: __init__, funcname: find_spec\\n",\n  "__init__.py(85):         if path is not None:\\n",\n  "__init__.py(86):             return\\n",\n  " --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(738): <frozen importlib._bootstrap>(739):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(813): <frozen importlib._bootstrap>(816):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1421): <frozen importlib._bootstrap_external>(1423):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1388): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1363): <frozen importlib._bootstrap_external>(1364):  --- modulename: _bootstrap_external, funcname: _path_hooks\\n",\n  "<frozen importlib._bootstrap_external>(1336): <frozen importlib._bootstrap_external>(1338): <frozen importlib._bootstrap_external>(1339): <frozen importlib._bootstrap_external>(1340):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1341): <frozen importlib._bootstrap_external>(1342): <frozen importlib._bootstrap_external>(1338): <frozen importlib._bootstrap_external>(1339): <frozen importlib._bootstrap_external>(1340):  --- modulename: _bootstrap_external, funcname: path_hook_for_FileFinder\\n",\n  "<frozen importlib._bootstrap_external>(1608):  --- modulename: _bootstrap_external, funcname: _path_isdir\\n",\n  "<frozen importlib._bootstrap_external>(161): <frozen importlib._bootstrap_external>(163):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(151): <frozen importlib._bootstrap_external>(1610):  --- modulename: _bootstrap_external, funcname: __init__\\n",\n  "<frozen importlib._bootstrap_external>(1479): <frozen importlib._bootstrap_external>(1480): <frozen importlib._bootstrap_external>(1481):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(1481):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(1481):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(1481):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(1481): <frozen importlib._bootstrap_external>(1480): <frozen importlib._bootstrap_external>(1481):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(1481):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(1481): <frozen importlib._bootstrap_external>(1480): <frozen importlib._bootstrap_external>(1481):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(1481):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(1481): <frozen importlib._bootstrap_external>(1480): <frozen importlib._bootstrap_external>(1482): <frozen importlib._bootstrap_external>(1484): <frozen importlib._bootstrap_external>(1485):  --- modulename: _bootstrap_external, funcname: _path_isabs\\n",\n  "<frozen importlib._bootstrap_external>(177): <frozen importlib._bootstrap_external>(1487): <frozen importlib._bootstrap_external>(1488): <frozen importlib._bootstrap_external>(1489): <frozen importlib._bootstrap_external>(1365): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1526):  --- modulename: _bootstrap_external, funcname: _fill_cache\\n",\n  "<frozen importlib._bootstrap_external>(1567): <frozen importlib._bootstrap_external>(1568): <frozen importlib._bootstrap_external>(1569): <frozen importlib._bootstrap_external>(1576): <frozen importlib._bootstrap_external>(1577): <frozen importlib._bootstrap_external>(1593): <frozen importlib._bootstrap_external>(1527): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1555):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n",\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(151): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1557): <frozen importlib._bootstrap_external>(1556):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1510):  --- modulename: _bootstrap_external, funcname: __init__\\n",\n  "<frozen importlib._bootstrap_external>(1009): <frozen importlib._bootstrap_external>(1010): <frozen importlib._bootstrap_external>(1511): <frozen importlib._bootstrap_external>(1512): <frozen importlib._bootstrap_external>(1511):  --- modulename: _bootstrap_external, funcname: spec_from_file_location\\n",\n  "<frozen importlib._bootstrap_external>(708): <frozen importlib._bootstrap_external>(720): <frozen importlib._bootstrap_external>(728):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(353): <frozen importlib._bootstrap>(354): <frozen importlib._bootstrap>(355): <frozen importlib._bootstrap>(356): <frozen importlib._bootstrap>(357): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap_external>(729): <frozen importlib._bootstrap_external>(732): <frozen importlib._bootstrap_external>(742): <frozen importlib._bootstrap_external>(753): <frozen importlib._bootstrap_external>(754): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1400): <frozen importlib._bootstrap_external>(1401): <frozen importlib._bootstrap_external>(1424): <frozen importlib._bootstrap_external>(1426): <frozen importlib._bootstrap_external>(1437):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(928): <frozen importlib._bootstrap>(943): <frozen importlib._bootstrap>(983): <frozen importlib._bootstrap>(986):  --- modulename: _bootstrap, funcname: _load_unlocked\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(661): <frozen importlib._bootstrap>(663): <frozen importlib._bootstrap>(666):  --- modulename: _bootstrap, funcname: module_from_spec\\n",\n  "<frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(562): <frozen importlib._bootstrap>(565):  --- modulename: _bootstrap_external, funcname: create_module\\n",\n  "<frozen importlib._bootstrap_external>(842): <frozen importlib._bootstrap>(569): <frozen importlib._bootstrap>(570):  --- modulename: _bootstrap, funcname: _new_module\\n",\n  "<frozen importlib._bootstrap>(36): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap, funcname: _init_module_attrs\\n",\n  "<frozen importlib._bootstrap>(490): <frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(497): <frozen importlib._bootstrap>(498): <frozen importlib._bootstrap>(519): <frozen importlib._bootstrap>(520): <frozen importlib._bootstrap>(524): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526):  --- modulename: _bootstrap, funcname: parent\\n",\n  "<frozen importlib._bootstrap>(401): <frozen importlib._bootstrap>(402): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(535): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(542):  --- modulename: _bootstrap, funcname: has_location\\n",\n  "<frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(543): <frozen importlib._bootstrap>(544): <frozen importlib._bootstrap>(545): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(388): <frozen importlib._bootstrap>(389): <frozen importlib._bootstrap>(391):  --- modulename: _bootstrap_external, funcname: _get_cached\\n",\n  "<frozen importlib._bootstrap_external>(492): <frozen importlib._bootstrap_external>(493): <frozen importlib._bootstrap_external>(494):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(552):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(572): <frozen importlib._bootstrap>(671): <frozen importlib._bootstrap>(672): <frozen importlib._bootstrap>(673): <frozen importlib._bootstrap>(674): <frozen importlib._bootstrap>(675): <frozen importlib._bootstrap>(680):  --- modulename: _bootstrap_external, funcname: exec_module\\n",\n  "<frozen importlib._bootstrap_external>(846):  --- modulename: _bootstrap_external, funcname: get_code\\n",\n  "<frozen importlib._bootstrap_external>(923):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper\\n",\n  "<frozen importlib._bootstrap_external>(524): <frozen importlib._bootstrap_external>(526): <frozen importlib._bootstrap_external>(529):  --- modulename: _bootstrap_external, funcname: get_filename\\n",\n  "<frozen importlib._bootstrap_external>(1034): <frozen importlib._bootstrap_external>(924): <frozen importlib._bootstrap_external>(925): <frozen importlib._bootstrap_external>(926): <frozen importlib._bootstrap_external>(927): <frozen importlib._bootstrap_external>(928): <frozen importlib._bootstrap_external>(929): <frozen importlib._bootstrap_external>(930):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(934): <frozen importlib._bootstrap_external>(935):  --- modulename: _bootstrap_external, funcname: path_stats\\n",\n  "<frozen importlib._bootstrap_external>(1079):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1080): <frozen importlib._bootstrap_external>(939): <frozen importlib._bootstrap_external>(940): <frozen importlib._bootstrap_external>(941):  --- modulename: _bootstrap_external, funcname: get_data\\n",\n  "<frozen importlib._bootstrap_external>(1038): <frozen importlib._bootstrap_external>(1039): <frozen importlib._bootstrap_external>(1040): <frozen importlib._bootstrap_external>(946): <frozen importlib._bootstrap_external>(947): <frozen importlib._bootstrap_external>(945): <frozen importlib._bootstrap_external>(949): <frozen importlib._bootstrap_external>(950):  --- modulename: _bootstrap_external, funcname: _classify_pyc\\n",\n  "<frozen importlib._bootstrap_external>(576): <frozen importlib._bootstrap_external>(577): <frozen importlib._bootstrap_external>(581): <frozen importlib._bootstrap_external>(585):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(587): <frozen importlib._bootstrap_external>(590): <frozen importlib._bootstrap_external>(951): <frozen importlib._bootstrap_external>(952): <frozen importlib._bootstrap_external>(953): <frozen importlib._bootstrap_external>(966): <frozen importlib._bootstrap_external>(967): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969): <frozen importlib._bootstrap_external>(970): <frozen importlib._bootstrap_external>(971): <frozen importlib._bootstrap_external>(966):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(612):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(617):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(976): <frozen importlib._bootstrap_external>(977): <frozen importlib._bootstrap_external>(976):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(978): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(978):  --- modulename: _bootstrap_external, funcname: _compile_bytecode\\n",\n  "<frozen importlib._bootstrap_external>(647): <frozen importlib._bootstrap_external>(648): <frozen importlib._bootstrap_external>(649):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(650): <frozen importlib._bootstrap_external>(651): <frozen importlib._bootstrap_external>(652): <frozen importlib._bootstrap_external>(847): <frozen importlib._bootstrap_external>(850):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228):  --- modulename: debug, funcname: <module>\\n",\n  "debug.py(47): \\"\\"\\"Debugging functions (e.g., tracing)\\"\\"\\"\\n",\n  "debug.py(50): import atexit\\n",\n  " --- modulename: _bootstrap, funcname: _find_and_load\\n",\n  "<frozen importlib._bootstrap>(1004):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(153): <frozen importlib._bootstrap>(154):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(157):  --- modulename: _bootstrap, funcname: _get_module_lock\\n",\n  "<frozen importlib._bootstrap>(172): <frozen importlib._bootstrap>(173): <frozen importlib._bootstrap>(174): <frozen importlib._bootstrap>(175): <frozen importlib._bootstrap>(176): <frozen importlib._bootstrap>(177): <frozen importlib._bootstrap>(179): <frozen importlib._bootstrap>(180): <frozen importlib._bootstrap>(183):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(59): <frozen importlib._bootstrap>(60): <frozen importlib._bootstrap>(61): <frozen importlib._bootstrap>(62): <frozen importlib._bootstrap>(63): <frozen importlib._bootstrap>(64): <frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(196): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(158):  --- modulename: _bootstrap, funcname: acquire\\n",\n  "<frozen importlib._bootstrap>(93): <frozen importlib._bootstrap>(94): <frozen importlib._bootstrap>(95): <frozen importlib._bootstrap>(97): <frozen importlib._bootstrap>(98): <frozen importlib._bootstrap>(99): <frozen importlib._bootstrap>(100): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(1005): <frozen importlib._bootstrap>(1006): <frozen importlib._bootstrap>(1007):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked\\n",\n  "<frozen importlib._bootstrap>(968): <frozen importlib._bootstrap>(969): <frozen importlib._bootstrap>(970): <frozen importlib._bootstrap>(982):  --- modulename: _bootstrap, funcname: _find_spec\\n",\n  "<frozen importlib._bootstrap>(903): <frozen importlib._bootstrap>(904): <frozen importlib._bootstrap>(909): <frozen importlib._bootstrap>(915): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: __init__, funcname: find_spec\\n",\n  "__init__.py(85):         if path is not None:\\n",\n  "__init__.py(88):         method_name = \'spec_for_{fullname}\'.format(**locals())\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  "__init__.py(90):         return method()\\n",\n  " --- modulename: __init__, funcname: <lambda>\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  " --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(738): <frozen importlib._bootstrap>(740): <frozen importlib._bootstrap>(741):  --- modulename: _bootstrap, funcname: spec_from_loader\\n",\n  "<frozen importlib._bootstrap>(417): <frozen importlib._bootstrap>(428): <frozen importlib._bootstrap>(429): <frozen importlib._bootstrap>(430): <frozen importlib._bootstrap>(431):  --- modulename: _bootstrap, funcname: _requires_builtin_wrapper\\n",\n  "<frozen importlib._bootstrap>(242): <frozen importlib._bootstrap>(245):  --- modulename: _bootstrap, funcname: is_package\\n",\n  "<frozen importlib._bootstrap>(786): <frozen importlib._bootstrap>(438):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(353): <frozen importlib._bootstrap>(354): <frozen importlib._bootstrap>(355): <frozen importlib._bootstrap>(356): <frozen importlib._bootstrap>(357): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(928): <frozen importlib._bootstrap>(943): <frozen importlib._bootstrap>(983): <frozen importlib._bootstrap>(986):  --- modulename: _bootstrap, funcname: _load_unlocked\\n",\n  "<frozen importlib._bootstrap>(661): <frozen importlib._bootstrap>(663): <frozen importlib._bootstrap>(666):  --- modulename: _bootstrap, funcname: module_from_spec\\n",\n  "<frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(562): <frozen importlib._bootstrap>(565):  --- modulename: _bootstrap, funcname: create_module\\n",\n  "<frozen importlib._bootstrap>(760): <frozen importlib._bootstrap>(763):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228): <frozen importlib._bootstrap>(569): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap, funcname: _init_module_attrs\\n",\n  "<frozen importlib._bootstrap>(490): <frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(497): <frozen importlib._bootstrap>(498): <frozen importlib._bootstrap>(519): <frozen importlib._bootstrap>(520): <frozen importlib._bootstrap>(524): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526):  --- modulename: _bootstrap, funcname: parent\\n",\n  "<frozen importlib._bootstrap>(401): <frozen importlib._bootstrap>(402): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(535): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(542):  --- modulename: _bootstrap, funcname: has_location\\n",\n  "<frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(572): <frozen importlib._bootstrap>(671): <frozen importlib._bootstrap>(672): <frozen importlib._bootstrap>(673): <frozen importlib._bootstrap>(674): <frozen importlib._bootstrap>(675): <frozen importlib._bootstrap>(680):  --- modulename: _bootstrap, funcname: exec_module\\n",\n  "<frozen importlib._bootstrap>(768):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228): <frozen importlib._bootstrap>(691): <frozen importlib._bootstrap>(692): <frozen importlib._bootstrap>(693):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap>(695): <frozen importlib._bootstrap>(697): <frozen importlib._bootstrap>(987): <frozen importlib._bootstrap>(996):  --- modulename: _bootstrap, funcname: __exit__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(161):  --- modulename: _bootstrap, funcname: release\\n",\n  "<frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(115): <frozen importlib._bootstrap>(117): <frozen importlib._bootstrap>(118): <frozen importlib._bootstrap>(119): <frozen importlib._bootstrap>(120): <frozen importlib._bootstrap>(121):  --- modulename: _bootstrap, funcname: cb\\n",\n  "<frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(191): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(194): debug.py(51): from datetime import datetime\\n",\n  " --- modulename: _bootstrap, funcname: _find_and_load\\n",\n  "<frozen importlib._bootstrap>(1004):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(153): <frozen importlib._bootstrap>(154):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(157):  --- modulename: _bootstrap, funcname: _get_module_lock\\n",\n  "<frozen importlib._bootstrap>(172): <frozen importlib._bootstrap>(173): <frozen importlib._bootstrap>(174): <frozen importlib._bootstrap>(175): <frozen importlib._bootstrap>(176): <frozen importlib._bootstrap>(177): <frozen importlib._bootstrap>(179): <frozen importlib._bootstrap>(180): <frozen importlib._bootstrap>(183):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(59): <frozen importlib._bootstrap>(60): <frozen importlib._bootstrap>(61): <frozen importlib._bootstrap>(62): <frozen importlib._bootstrap>(63): <frozen importlib._bootstrap>(64): <frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(196): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(158):  --- modulename: _bootstrap, funcname: acquire\\n",\n  "<frozen importlib._bootstrap>(93): <frozen importlib._bootstrap>(94): <frozen importlib._bootstrap>(95): <frozen importlib._bootstrap>(97): <frozen importlib._bootstrap>(98): <frozen importlib._bootstrap>(99): <frozen importlib._bootstrap>(100): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(1005): <frozen importlib._bootstrap>(1006): <frozen importlib._bootstrap>(1007):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked\\n",\n  "<frozen importlib._bootstrap>(968): <frozen importlib._bootstrap>(969): <frozen importlib._bootstrap>(970): <frozen importlib._bootstrap>(982):  --- modulename: _bootstrap, funcname: _find_spec\\n",\n  "<frozen importlib._bootstrap>(903): <frozen importlib._bootstrap>(904): <frozen importlib._bootstrap>(909): <frozen importlib._bootstrap>(915): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: __init__, funcname: find_spec\\n",\n  "__init__.py(85):         if path is not None:\\n",\n  "__init__.py(88):         method_name = \'spec_for_{fullname}\'.format(**locals())\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  "__init__.py(90):         return method()\\n",\n  " --- modulename: __init__, funcname: <lambda>\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  " --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(738): <frozen importlib._bootstrap>(740): <frozen importlib._bootstrap>(743):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(813): <frozen importlib._bootstrap>(816):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1421): <frozen importlib._bootstrap_external>(1422): <frozen importlib._bootstrap_external>(1423):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1388): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1555):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n",\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(151): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1557): <frozen importlib._bootstrap_external>(1556):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1510):  --- modulename: _bootstrap_external, funcname: __init__\\n",\n  "<frozen importlib._bootstrap_external>(1009): <frozen importlib._bootstrap_external>(1010): <frozen importlib._bootstrap_external>(1511): <frozen importlib._bootstrap_external>(1512): <frozen importlib._bootstrap_external>(1511):  --- modulename: _bootstrap_external, funcname: spec_from_file_location\\n",\n  "<frozen importlib._bootstrap_external>(708): <frozen importlib._bootstrap_external>(720): <frozen importlib._bootstrap_external>(728):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(353): <frozen importlib._bootstrap>(354): <frozen importlib._bootstrap>(355): <frozen importlib._bootstrap>(356): <frozen importlib._bootstrap>(357): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap_external>(729): <frozen importlib._bootstrap_external>(732): <frozen importlib._bootstrap_external>(742): <frozen importlib._bootstrap_external>(753): <frozen importlib._bootstrap_external>(754): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1400): <frozen importlib._bootstrap_external>(1401): <frozen importlib._bootstrap_external>(1424): <frozen importlib._bootstrap_external>(1426): <frozen importlib._bootstrap_external>(1437):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(928): <frozen importlib._bootstrap>(943): <frozen importlib._bootstrap>(983): <frozen importlib._bootstrap>(986):  --- modulename: _bootstrap, funcname: _load_unlocked\\n",\n  "<frozen importlib._bootstrap>(661): <frozen importlib._bootstrap>(663): <frozen importlib._bootstrap>(666):  --- modulename: _bootstrap, funcname: module_from_spec\\n",\n  "<frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(562): <frozen importlib._bootstrap>(565):  --- modulename: _bootstrap_external, funcname: create_module\\n",\n  "<frozen importlib._bootstrap_external>(842): <frozen importlib._bootstrap>(569): <frozen importlib._bootstrap>(570):  --- modulename: _bootstrap, funcname: _new_module\\n",\n  "<frozen importlib._bootstrap>(36): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap, funcname: _init_module_attrs\\n",\n  "<frozen importlib._bootstrap>(490): <frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(497): <frozen importlib._bootstrap>(498): <frozen importlib._bootstrap>(519): <frozen importlib._bootstrap>(520): <frozen importlib._bootstrap>(524): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526):  --- modulename: _bootstrap, funcname: parent\\n",\n  "<frozen importlib._bootstrap>(401): <frozen importlib._bootstrap>(402): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(535): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(542):  --- modulename: _bootstrap, funcname: has_location\\n",\n  "<frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(543): <frozen importlib._bootstrap>(544): <frozen importlib._bootstrap>(545): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(388): <frozen importlib._bootstrap>(389): <frozen importlib._bootstrap>(391):  --- modulename: _bootstrap_external, funcname: _get_cached\\n",\n  "<frozen importlib._bootstrap_external>(492): <frozen importlib._bootstrap_external>(493): <frozen importlib._bootstrap_external>(494):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(552):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(572): <frozen importlib._bootstrap>(671): <frozen importlib._bootstrap>(672): <frozen importlib._bootstrap>(673): <frozen importlib._bootstrap>(674): <frozen importlib._bootstrap>(675): <frozen importlib._bootstrap>(680):  --- modulename: _bootstrap_external, funcname: exec_module\\n",\n  "<frozen importlib._bootstrap_external>(846):  --- modulename: _bootstrap_external, funcname: get_code\\n",\n  "<frozen importlib._bootstrap_external>(923):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper\\n",\n  "<frozen importlib._bootstrap_external>(524): <frozen importlib._bootstrap_external>(526): <frozen importlib._bootstrap_external>(529):  --- modulename: _bootstrap_external, funcname: get_filename\\n",\n  "<frozen importlib._bootstrap_external>(1034): <frozen importlib._bootstrap_external>(924): <frozen importlib._bootstrap_external>(925): <frozen importlib._bootstrap_external>(926): <frozen importlib._bootstrap_external>(927): <frozen importlib._bootstrap_external>(928): <frozen importlib._bootstrap_external>(929): <frozen importlib._bootstrap_external>(930):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(934): <frozen importlib._bootstrap_external>(935):  --- modulename: _bootstrap_external, funcname: path_stats\\n",\n  "<frozen importlib._bootstrap_external>(1079):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1080): <frozen importlib._bootstrap_external>(939): <frozen importlib._bootstrap_external>(940): <frozen importlib._bootstrap_external>(941):  --- modulename: _bootstrap_external, funcname: get_data\\n",\n  "<frozen importlib._bootstrap_external>(1038): <frozen importlib._bootstrap_external>(1039): <frozen importlib._bootstrap_external>(1040): <frozen importlib._bootstrap_external>(946): <frozen importlib._bootstrap_external>(947): <frozen importlib._bootstrap_external>(945): <frozen importlib._bootstrap_external>(949): <frozen importlib._bootstrap_external>(950):  --- modulename: _bootstrap_external, funcname: _classify_pyc\\n",\n  "<frozen importlib._bootstrap_external>(576): <frozen importlib._bootstrap_external>(577): <frozen importlib._bootstrap_external>(581): <frozen importlib._bootstrap_external>(585):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(587): <frozen importlib._bootstrap_external>(590): <frozen importlib._bootstrap_external>(951): <frozen importlib._bootstrap_external>(952): <frozen importlib._bootstrap_external>(953): <frozen importlib._bootstrap_external>(966): <frozen importlib._bootstrap_external>(967): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969): <frozen importlib._bootstrap_external>(970): <frozen importlib._bootstrap_external>(971): <frozen importlib._bootstrap_external>(966):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc\\n",\n  "<frozen importlib._bootstrap_external>(612):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(617):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(976): <frozen importlib._bootstrap_external>(977): <frozen importlib._bootstrap_external>(976):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(978): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(978):  --- modulename: _bootstrap_external, funcname: _compile_bytecode\\n",\n  "<frozen importlib._bootstrap_external>(647): <frozen importlib._bootstrap_external>(648): <frozen importlib._bootstrap_external>(649):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(650): <frozen importlib._bootstrap_external>(651): <frozen importlib._bootstrap_external>(652): <frozen importlib._bootstrap_external>(847): <frozen importlib._bootstrap_external>(850):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228):  --- modulename: datetime, funcname: <module>\\n",\n  "datetime.py(1): \\"\\"\\"Concrete date/time and related types.\\n",\n  "datetime.py(7): __all__ = (\\"date\\", \\"datetime\\", \\"time\\", \\"timedelta\\", \\"timezone\\", \\"tzinfo\\",\\n",\n  "datetime.py(11): import time as _time\\n",\n  "datetime.py(12): import math as _math\\n",\n  " --- modulename: _bootstrap, funcname: _find_and_load\\n",\n  "<frozen importlib._bootstrap>(1004):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(153): <frozen importlib._bootstrap>(154):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(157):  --- modulename: _bootstrap, funcname: _get_module_lock\\n",\n  "<frozen importlib._bootstrap>(172): <frozen importlib._bootstrap>(173): <frozen importlib._bootstrap>(174): <frozen importlib._bootstrap>(175): <frozen importlib._bootstrap>(176): <frozen importlib._bootstrap>(177): <frozen importlib._bootstrap>(179): <frozen importlib._bootstrap>(180): <frozen importlib._bootstrap>(183):  --- modulename: _bootstrap, funcname: __init__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(59): <frozen importlib._bootstrap>(60): <frozen importlib._bootstrap>(61): <frozen importlib._bootstrap>(62): <frozen importlib._bootstrap>(63): <frozen importlib._bootstrap>(64): <frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(196): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(158):  --- modulename: _bootstrap, funcname: acquire\\n",\n  "<frozen importlib._bootstrap>(93): <frozen importlib._bootstrap>(94): <frozen importlib._bootstrap>(95): <frozen importlib._bootstrap>(97): <frozen importlib._bootstrap>(98): <frozen importlib._bootstrap>(99): <frozen importlib._bootstrap>(100): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(1005): <frozen importlib._bootstrap>(1006): <frozen importlib._bootstrap>(1007):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked\\n",\n  "<frozen importlib._bootstrap>(968): <frozen importlib._bootstrap>(969): <frozen importlib._bootstrap>(970): <frozen importlib._bootstrap>(982):  --- modulename: _bootstrap, funcname: _find_spec\\n",\n  "<frozen importlib._bootstrap>(903): <frozen importlib._bootstrap>(904): <frozen importlib._bootstrap>(909): <frozen importlib._bootstrap>(915): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: __init__, funcname: find_spec\\n",\n  "__init__.py(85):         if path is not None:\\n",\n  "__init__.py(88):         method_name = \'spec_for_{fullname}\'.format(**locals())\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  "__init__.py(90):         return method()\\n",\n  " --- modulename: __init__, funcname: <lambda>\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  " --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(738): <frozen importlib._bootstrap>(740): <frozen importlib._bootstrap>(743):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(813): <frozen importlib._bootstrap>(816):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1421): <frozen importlib._bootstrap_external>(1422): <frozen importlib._bootstrap_external>(1423):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1388): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1555):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n",\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(151): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1557): <frozen importlib._bootstrap_external>(1556):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1510):  --- modulename: _bootstrap_external, funcname: __init__\\n",\n  "<frozen importlib._bootstrap_external>(1156): <frozen importlib._bootstrap_external>(1157):  --- modulename: _bootstrap_external, funcname: _path_isabs\\n",\n  "<frozen importlib._bootstrap_external>(177): <frozen importlib._bootstrap_external>(1162): <frozen importlib._bootstrap_external>(1511): <frozen importlib._bootstrap_external>(1512): <frozen importlib._bootstrap_external>(1511):  --- modulename: _bootstrap_external, funcname: spec_from_file_location\\n",\n  "<frozen importlib._bootstrap_external>(708): <frozen importlib._bootstrap_external>(720): <frozen importlib._bootstrap_external>(728):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(353): <frozen importlib._bootstrap>(354): <frozen importlib._bootstrap>(355): <frozen importlib._bootstrap>(356): <frozen importlib._bootstrap>(357): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap_external>(729): <frozen importlib._bootstrap_external>(732): <frozen importlib._bootstrap_external>(742): <frozen importlib._bootstrap_external>(753): <frozen importlib._bootstrap_external>(754): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1400): <frozen importlib._bootstrap_external>(1401): <frozen importlib._bootstrap_external>(1424): <frozen importlib._bootstrap_external>(1426): <frozen importlib._bootstrap_external>(1437):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(928): <frozen importlib._bootstrap>(943): <frozen importlib._bootstrap>(983): <frozen importlib._bootstrap>(986):  --- modulename: _bootstrap, funcname: _load_unlocked\\n",\n  "<frozen importlib._bootstrap>(661): <frozen importlib._bootstrap>(663): <frozen importlib._bootstrap>(666):  --- modulename: _bootstrap, funcname: module_from_spec\\n",\n  "<frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(562): <frozen importlib._bootstrap>(565):  --- modulename: _bootstrap_external, funcname: create_module\\n",\n  "<frozen importlib._bootstrap_external>(1173): <frozen importlib._bootstrap_external>(1174): <frozen importlib._bootstrap_external>(1173):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228): <frozen importlib._bootstrap_external>(1175): <frozen importlib._bootstrap_external>(1176): <frozen importlib._bootstrap_external>(1175):  --- modulename: _bootstrap, funcname: _verbose_message\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1177): <frozen importlib._bootstrap>(569): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap, funcname: _init_module_attrs\\n",\n  "<frozen importlib._bootstrap>(490): <frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(497): <frozen importlib._bootstrap>(498): <frozen importlib._bootstrap>(519): <frozen importlib._bootstrap>(520): <frozen importlib._bootstrap>(524): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526):  --- modulename: _bootstrap, funcname: parent\\n",\n  "<frozen importlib._bootstrap>(401): <frozen importlib._bootstrap>(402): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(535): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(542):  --- modulename: _bootstrap, funcname: has_location\\n",\n  "<frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(543): <frozen importlib._bootstrap>(544): <frozen importlib._bootstrap>(545): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(388): <frozen importlib._bootstrap>(389): <frozen importlib._bootstrap>(391):  --- modulename: _bootstrap_external, funcname: _get_cached\\n",\n  "<frozen importlib._bootstrap_external>(492): <frozen importlib._bootstrap_external>(497): <frozen importlib._bootstrap_external>(500): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(572): <frozen importlib._bootstrap>(671): <frozen importlib._bootstrap>(672): <frozen importlib._bootstrap>(673): <frozen importlib._bootstrap>(674): <frozen importlib._bootstrap>(675): <frozen importlib._bootstrap>(680):  --- modulename: _bootstrap_external, funcname: exec_module\\n",\n  "<frozen importlib._bootstrap_external>(1181):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228): <frozen importlib._bootstrap_external>(1182): <frozen importlib._bootstrap_external>(1183): <frozen importlib._bootstrap_external>(1182):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap>(691): <frozen importlib._bootstrap>(692): <frozen importlib._bootstrap>(693):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap>(695): <frozen importlib._bootstrap>(697): <frozen importlib._bootstrap>(987): <frozen importlib._bootstrap>(996):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(161):  --- modulename: _bootstrap, funcname: release\\n",\n  "<frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(115): <frozen importlib._bootstrap>(117): <frozen importlib._bootstrap>(118): <frozen importlib._bootstrap>(119): <frozen importlib._bootstrap>(120): <frozen importlib._bootstrap>(121):  --- modulename: _bootstrap, funcname: cb\\n",\n  "<frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(191): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(194): datetime.py(13): import sys\\n",\n  "datetime.py(15): def _cmp(x, y):\\n",\n  "datetime.py(18): MINYEAR = 1\\n",\n  "datetime.py(19): MAXYEAR = 9999\\n",\n  "datetime.py(20): _MAXORDINAL = 3652059  # date.max.toordinal()\\n",\n  "datetime.py(32): _DAYS_IN_MONTH = [-1, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\\n",\n  "datetime.py(34): _DAYS_BEFORE_MONTH = [-1]  # -1 is a placeholder for indexing purposes.\\n",\n  "datetime.py(35): dbm = 0\\n",\n  "datetime.py(36): for dim in _DAYS_IN_MONTH[1:]:\\n",\n  "datetime.py(37):     _DAYS_BEFORE_MONTH.append(dbm)\\n",\n  "datetime.py(38):     dbm += dim\\n",\n  "datetime.py(36): for dim in _DAYS_IN_MONTH[1:]:\\n",\n  "datetime.py(37):     _DAYS_BEFORE_MONTH.append(dbm)\\n",\n  "datetime.py(38):     dbm += dim\\n",\n  "datetime.py(36): for dim in _DAYS_IN_MONTH[1:]:\\n",\n  "datetime.py(37):     _DAYS_BEFORE_MONTH.append(dbm)\\n",\n  "datetime.py(38):     dbm += dim\\n",\n  "datetime.py(36): for dim in _DAYS_IN_MONTH[1:]:\\n",\n  "datetime.py(37):     _DAYS_BEFORE_MONTH.append(dbm)\\n",\n  "datetime.py(38):     dbm += dim\\n",\n  "datetime.py(36): for dim in _DAYS_IN_MONTH[1:]:\\n",\n  "datetime.py(37):     _DAYS_BEFORE_MONTH.append(dbm)\\n",\n  "datetime.py(38):     dbm += dim\\n",\n  "datetime.py(36): for dim in _DAYS_IN_MONTH[1:]:\\n",\n  "datetime.py(37):     _DAYS_BEFORE_MONTH.append(dbm)\\n",\n  "datetime.py(38):     dbm += dim\\n",\n  "datetime.py(36): for dim in _DAYS_IN_MONTH[1:]:\\n",\n  "datetime.py(37):     _DAYS_BEFORE_MONTH.append(dbm)\\n",\n  "datetime.py(38):     dbm += dim\\n",\n  "datetime.py(36): for dim in _DAYS_IN_MONTH[1:]:\\n",\n  "datetime.py(37):     _DAYS_BEFORE_MONTH.append(dbm)\\n",\n  "datetime.py(38):     dbm += dim\\n",\n  "datetime.py(36): for dim in _DAYS_IN_MONTH[1:]:\\n",\n  "datetime.py(37):     _DAYS_BEFORE_MONTH.append(dbm)\\n",\n  "datetime.py(38):     dbm += dim\\n",\n  "datetime.py(36): for dim in _DAYS_IN_MONTH[1:]:\\n",\n  "datetime.py(37):     _DAYS_BEFORE_MONTH.append(dbm)\\n",\n  "datetime.py(38):     dbm += dim\\n",\n  "datetime.py(36): for dim in _DAYS_IN_MONTH[1:]:\\n",\n  "datetime.py(37):     _DAYS_BEFORE_MONTH.append(dbm)\\n",\n  "datetime.py(38):     dbm += dim\\n",\n  "datetime.py(36): for dim in _DAYS_IN_MONTH[1:]:\\n",\n  "datetime.py(37):     _DAYS_BEFORE_MONTH.append(dbm)\\n",\n  "datetime.py(38):     dbm += dim\\n",\n  "datetime.py(36): for dim in _DAYS_IN_MONTH[1:]:\\n",\n  "datetime.py(39): del dbm, dim\\n",\n  "datetime.py(41): def _is_leap(year):\\n",\n  "datetime.py(45): def _days_before_year(year):\\n",\n  "datetime.py(50): def _days_in_month(year, month):\\n",\n  "datetime.py(57): def _days_before_month(year, month):\\n",\n  "datetime.py(62): def _ymd2ord(year, month, day):\\n",\n  "datetime.py(71): _DI400Y = _days_before_year(401)    # number of days in 400 years\\n",\n  " --- modulename: datetime, funcname: _days_before_year\\n",\n  "datetime.py(47):     y = year - 1\\n",\n  "datetime.py(48):     return y*365 + y//4 - y//100 + y//400\\n",\n  "datetime.py(72): _DI100Y = _days_before_year(101)    #    \\"    \\"   \\"   \\" 100   \\"\\n",\n  " --- modulename: datetime, funcname: _days_before_year\\n",\n  "datetime.py(47):     y = year - 1\\n",\n  "datetime.py(48):     return y*365 + y//4 - y//100 + y//400\\n",\n  "datetime.py(73): _DI4Y   = _days_before_year(5)      #    \\"    \\"   \\"   \\"   4   \\"\\n",\n  " --- modulename: datetime, funcname: _days_before_year\\n",\n  "datetime.py(47):     y = year - 1\\n",\n  "datetime.py(48):     return y*365 + y//4 - y//100 + y//400\\n",\n  "datetime.py(77): assert _DI4Y == 4 * 365 + 1\\n",\n  "datetime.py(81): assert _DI400Y == 4 * _DI100Y + 1\\n",\n  "datetime.py(85): assert _DI100Y == 25 * _DI4Y - 1\\n",\n  "datetime.py(87): def _ord2ymd(n):\\n",\n  "datetime.py(150): _MONTHNAMES = [None, \\"Jan\\", \\"Feb\\", \\"Mar\\", \\"Apr\\", \\"May\\", \\"Jun\\",\\n",\n  "datetime.py(152): _DAYNAMES = [None, \\"Mon\\", \\"Tue\\", \\"Wed\\", \\"Thu\\", \\"Fri\\", \\"Sat\\", \\"Sun\\"]\\n",\n  "datetime.py(155): def _build_struct_time(y, m, d, hh, mm, ss, dstflag):\\n",\n  "datetime.py(160): def _format_time(hh, mm, ss, us, timespec=\'auto\'):\\n",\n  "datetime.py(181): def _format_offset(off):\\n",\n  "datetime.py(200): def _wrap_strftime(object, format, timetuple):\\n",\n  "datetime.py(264): def _parse_isoformat_date(dtstr):\\n",\n  "datetime.py(280): def _parse_hh_mm_ss_ff(tstr):\\n",\n  "datetime.py(319): def _parse_isoformat_time(tstr):\\n",\n  "datetime.py(360): def _check_tzname(name):\\n",\n  "datetime.py(371): def _check_utc_offset(name, offset):\\n",\n  "datetime.py(383): def _check_int_field(value):\\n",\n  "datetime.py(415): def _check_date_fields(year, month, day):\\n",\n  "datetime.py(428): def _check_time_fields(hour, minute, second, microsecond, fold):\\n",\n  "datetime.py(445): def _check_tzinfo_arg(tz):\\n",\n  "datetime.py(449): def _cmperror(x, y):\\n",\n  "datetime.py(453): def _divide_and_round(a, b):\\n",\n  "datetime.py(473): class timedelta:\\n",\n  " --- modulename: datetime, funcname: timedelta\\n",\n  "datetime.py(473): class timedelta:\\n",\n  "datetime.py(474):     \\"\\"\\"Represent the difference between two datetime objects.\\n",\n  "datetime.py(490):     __slots__ = \'_days\', \'_seconds\', \'_microseconds\', \'_hashcode\'\\n",\n  "datetime.py(492):     def __new__(cls, days=0, seconds=0, microseconds=0,\\n",\n  "datetime.py(593):     def __repr__(self):\\n",\n  "datetime.py(607):     def __str__(self):\\n",\n  "datetime.py(619):     def total_seconds(self):\\n",\n  "datetime.py(625):     @property\\n",\n  "datetime.py(626):     def days(self):\\n",\n  "datetime.py(630):     @property\\n",\n  "datetime.py(631):     def seconds(self):\\n",\n  "datetime.py(635):     @property\\n",\n  "datetime.py(636):     def microseconds(self):\\n",\n  "datetime.py(640):     def __add__(self, other):\\n",\n  "datetime.py(649):     __radd__ = __add__\\n",\n  "datetime.py(651):     def __sub__(self, other):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "datetime.py(660):     def __rsub__(self, other):\\n",\n  "datetime.py(665):     def __neg__(self):\\n",\n  "datetime.py(672):     def __pos__(self):\\n",\n  "datetime.py(675):     def __abs__(self):\\n",\n  "datetime.py(681):     def __mul__(self, other):\\n",\n  "datetime.py(694):     __rmul__ = __mul__\\n",\n  "datetime.py(696):     def _to_microseconds(self):\\n",\n  "datetime.py(700):     def __floordiv__(self, other):\\n",\n  "datetime.py(709):     def __truediv__(self, other):\\n",\n  "datetime.py(721):     def __mod__(self, other):\\n",\n  "datetime.py(727):     def __divmod__(self, other):\\n",\n  "datetime.py(736):     def __eq__(self, other):\\n",\n  "datetime.py(742):     def __le__(self, other):\\n",\n  "datetime.py(748):     def __lt__(self, other):\\n",\n  "datetime.py(754):     def __ge__(self, other):\\n",\n  "datetime.py(760):     def __gt__(self, other):\\n",\n  "datetime.py(766):     def _cmp(self, other):\\n",\n  "datetime.py(770):     def __hash__(self):\\n",\n  "datetime.py(775):     def __bool__(self):\\n",\n  "datetime.py(782):     def _getstate(self):\\n",\n  "datetime.py(785):     def __reduce__(self):\\n",\n  "datetime.py(788): timedelta.min = timedelta(-999999999)\\n",\n  " --- modulename: datetime, funcname: __new__\\n",\n  "datetime.py(506):         d = s = us = 0\\n",\n  "datetime.py(509):         days += weeks*7\\n",\n  "datetime.py(510):         seconds += minutes*60 + hours*3600\\n",\n  "datetime.py(511):         microseconds += milliseconds*1000\\n",\n  "datetime.py(515):         if isinstance(days, float):\\n",\n  "datetime.py(523):             daysecondsfrac = 0.0\\n",\n  "datetime.py(524):             d = days\\n",\n  "datetime.py(525):         assert isinstance(daysecondsfrac, float)\\n",\n  "datetime.py(526):         assert abs(daysecondsfrac) <= 1.0\\n",\n  "datetime.py(527):         assert isinstance(d, int)\\n",\n  "datetime.py(528):         assert abs(s) <= 24 * 3600\\n",\n  "datetime.py(531):         if isinstance(seconds, float):\\n",\n  "datetime.py(538):             secondsfrac = daysecondsfrac\\n",\n  "datetime.py(540):         assert isinstance(secondsfrac, float)\\n",\n  "datetime.py(541):         assert abs(secondsfrac) <= 2.0\\n",\n  "datetime.py(543):         assert isinstance(seconds, int)\\n",\n  "datetime.py(544):         days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(545):         d += days\\n",\n  "datetime.py(546):         s += int(seconds)    # can\'t overflow\\n",\n  "datetime.py(547):         assert isinstance(s, int)\\n",\n  "datetime.py(548):         assert abs(s) <= 2 * 24 * 3600\\n",\n  "datetime.py(551):         usdouble = secondsfrac * 1e6\\n",\n  "datetime.py(552):         assert abs(usdouble) < 2.1e6    # exact value not critical\\n",\n  "datetime.py(555):         if isinstance(microseconds, float):\\n",\n  "datetime.py(562):             microseconds = int(microseconds)\\n",\n  "datetime.py(563):             seconds, microseconds = divmod(microseconds, 1000000)\\n",\n  "datetime.py(564):             days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(565):             d += days\\n",\n  "datetime.py(566):             s += seconds\\n",\n  "datetime.py(567):             microseconds = round(microseconds + usdouble)\\n",\n  "datetime.py(568):         assert isinstance(s, int)\\n",\n  "datetime.py(569):         assert isinstance(microseconds, int)\\n",\n  "datetime.py(570):         assert abs(s) <= 3 * 24 * 3600\\n",\n  "datetime.py(571):         assert abs(microseconds) < 3.1e6\\n",\n  "datetime.py(574):         seconds, us = divmod(microseconds, 1000000)\\n",\n  "datetime.py(575):         s += seconds\\n",\n  "datetime.py(576):         days, s = divmod(s, 24*3600)\\n",\n  "datetime.py(577):         d += days\\n",\n  "datetime.py(579):         assert isinstance(d, int)\\n",\n  "datetime.py(580):         assert isinstance(s, int) and 0 <= s < 24*3600\\n",\n  "datetime.py(581):         assert isinstance(us, int) and 0 <= us < 1000000\\n",\n  "datetime.py(583):         if abs(d) > 999999999:\\n",\n  "datetime.py(586):         self = object.__new__(cls)\\n",\n  "datetime.py(587):         self._days = d\\n",\n  "datetime.py(588):         self._seconds = s\\n",\n  "datetime.py(589):         self._microseconds = us\\n",\n  "datetime.py(590):         self._hashcode = -1\\n",\n  "datetime.py(591):         return self\\n",\n  "datetime.py(789): timedelta.max = timedelta(days=999999999, hours=23, minutes=59, seconds=59,\\n",\n  "datetime.py(790):                           microseconds=999999)\\n",\n  "datetime.py(789): timedelta.max = timedelta(days=999999999, hours=23, minutes=59, seconds=59,\\n",\n  " --- modulename: datetime, funcname: __new__\\n",\n  "datetime.py(506):         d = s = us = 0\\n",\n  "datetime.py(509):         days += weeks*7\\n",\n  "datetime.py(510):         seconds += minutes*60 + hours*3600\\n",\n  "datetime.py(511):         microseconds += milliseconds*1000\\n",\n  "datetime.py(515):         if isinstance(days, float):\\n",\n  "datetime.py(523):             daysecondsfrac = 0.0\\n",\n  "datetime.py(524):             d = days\\n",\n  "datetime.py(525):         assert isinstance(daysecondsfrac, float)\\n",\n  "datetime.py(526):         assert abs(daysecondsfrac) <= 1.0\\n",\n  "datetime.py(527):         assert isinstance(d, int)\\n",\n  "datetime.py(528):         assert abs(s) <= 24 * 3600\\n",\n  "datetime.py(531):         if isinstance(seconds, float):\\n",\n  "datetime.py(538):             secondsfrac = daysecondsfrac\\n",\n  "datetime.py(540):         assert isinstance(secondsfrac, float)\\n",\n  "datetime.py(541):         assert abs(secondsfrac) <= 2.0\\n",\n  "datetime.py(543):         assert isinstance(seconds, int)\\n",\n  "datetime.py(544):         days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(545):         d += days\\n",\n  "datetime.py(546):         s += int(seconds)    # can\'t overflow\\n",\n  "datetime.py(547):         assert isinstance(s, int)\\n",\n  "datetime.py(548):         assert abs(s) <= 2 * 24 * 3600\\n",\n  "datetime.py(551):         usdouble = secondsfrac * 1e6\\n",\n  "datetime.py(552):         assert abs(usdouble) < 2.1e6    # exact value not critical\\n",\n  "datetime.py(555):         if isinstance(microseconds, float):\\n",\n  "datetime.py(562):             microseconds = int(microseconds)\\n",\n  "datetime.py(563):             seconds, microseconds = divmod(microseconds, 1000000)\\n",\n  "datetime.py(564):             days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(565):             d += days\\n",\n  "datetime.py(566):             s += seconds\\n",\n  "datetime.py(567):             microseconds = round(microseconds + usdouble)\\n",\n  "datetime.py(568):         assert isinstance(s, int)\\n",\n  "datetime.py(569):         assert isinstance(microseconds, int)\\n",\n  "datetime.py(570):         assert abs(s) <= 3 * 24 * 3600\\n",\n  "datetime.py(571):         assert abs(microseconds) < 3.1e6\\n",\n  "datetime.py(574):         seconds, us = divmod(microseconds, 1000000)\\n",\n  "datetime.py(575):         s += seconds\\n",\n  "datetime.py(576):         days, s = divmod(s, 24*3600)\\n",\n  "datetime.py(577):         d += days\\n",\n  "datetime.py(579):         assert isinstance(d, int)\\n",\n  "datetime.py(580):         assert isinstance(s, int) and 0 <= s < 24*3600\\n",\n  "datetime.py(581):         assert isinstance(us, int) and 0 <= us < 1000000\\n",\n  "datetime.py(583):         if abs(d) > 999999999:\\n",\n  "datetime.py(586):         self = object.__new__(cls)\\n",\n  "datetime.py(587):         self._days = d\\n",\n  "datetime.py(588):         self._seconds = s\\n",\n  "datetime.py(589):         self._microseconds = us\\n",\n  "datetime.py(590):         self._hashcode = -1\\n",\n  "datetime.py(591):         return self\\n",\n  "datetime.py(791): timedelta.resolution = timedelta(microseconds=1)\\n",\n  " --- modulename: datetime, funcname: __new__\\n",\n  "datetime.py(506):         d = s = us = 0\\n",\n  "datetime.py(509):         days += weeks*7\\n",\n  "datetime.py(510):         seconds += minutes*60 + hours*3600\\n",\n  "datetime.py(511):         microseconds += milliseconds*1000\\n",\n  "datetime.py(515):         if isinstance(days, float):\\n",\n  "datetime.py(523):             daysecondsfrac = 0.0\\n",\n  "datetime.py(524):             d = days\\n",\n  "datetime.py(525):         assert isinstance(daysecondsfrac, float)\\n",\n  "datetime.py(526):         assert abs(daysecondsfrac) <= 1.0\\n",\n  "datetime.py(527):         assert isinstance(d, int)\\n",\n  "datetime.py(528):         assert abs(s) <= 24 * 3600\\n",\n  "datetime.py(531):         if isinstance(seconds, float):\\n",\n  "datetime.py(538):             secondsfrac = daysecondsfrac\\n",\n  "datetime.py(540):         assert isinstance(secondsfrac, float)\\n",\n  "datetime.py(541):         assert abs(secondsfrac) <= 2.0\\n",\n  "datetime.py(543):         assert isinstance(seconds, int)\\n",\n  "datetime.py(544):         days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(545):         d += days\\n",\n  "datetime.py(546):         s += int(seconds)    # can\'t overflow\\n",\n  "datetime.py(547):         assert isinstance(s, int)\\n",\n  "datetime.py(548):         assert abs(s) <= 2 * 24 * 3600\\n",\n  "datetime.py(551):         usdouble = secondsfrac * 1e6\\n",\n  "datetime.py(552):         assert abs(usdouble) < 2.1e6    # exact value not critical\\n",\n  "datetime.py(555):         if isinstance(microseconds, float):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "datetime.py(562):             microseconds = int(microseconds)\\n",\n  "datetime.py(563):             seconds, microseconds = divmod(microseconds, 1000000)\\n",\n  "datetime.py(564):             days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(565):             d += days\\n",\n  "datetime.py(566):             s += seconds\\n",\n  "datetime.py(567):             microseconds = round(microseconds + usdouble)\\n",\n  "datetime.py(568):         assert isinstance(s, int)\\n",\n  "datetime.py(569):         assert isinstance(microseconds, int)\\n",\n  "datetime.py(570):         assert abs(s) <= 3 * 24 * 3600\\n",\n  "datetime.py(571):         assert abs(microseconds) < 3.1e6\\n",\n  "datetime.py(574):         seconds, us = divmod(microseconds, 1000000)\\n",\n  "datetime.py(575):         s += seconds\\n",\n  "datetime.py(576):         days, s = divmod(s, 24*3600)\\n",\n  "datetime.py(577):         d += days\\n",\n  "datetime.py(579):         assert isinstance(d, int)\\n",\n  "datetime.py(580):         assert isinstance(s, int) and 0 <= s < 24*3600\\n",\n  "datetime.py(581):         assert isinstance(us, int) and 0 <= us < 1000000\\n",\n  "datetime.py(583):         if abs(d) > 999999999:\\n",\n  "datetime.py(586):         self = object.__new__(cls)\\n",\n  "datetime.py(587):         self._days = d\\n",\n  "datetime.py(588):         self._seconds = s\\n",\n  "datetime.py(589):         self._microseconds = us\\n",\n  "datetime.py(590):         self._hashcode = -1\\n",\n  "datetime.py(591):         return self\\n",\n  "datetime.py(793): class date:\\n",\n  " --- modulename: datetime, funcname: date\\n",\n  "datetime.py(793): class date:\\n",\n  "datetime.py(794):     \\"\\"\\"Concrete date type.\\n",\n  "datetime.py(821):     __slots__ = \'_year\', \'_month\', \'_day\', \'_hashcode\'\\n",\n  "datetime.py(823):     def __new__(cls, year, month=None, day=None):\\n",\n  "datetime.py(857):     @classmethod\\n",\n  "datetime.py(858):     def fromtimestamp(cls, t):\\n",\n  "datetime.py(863):     @classmethod\\n",\n  "datetime.py(864):     def today(cls):\\n",\n  "datetime.py(869):     @classmethod\\n",\n  "datetime.py(870):     def fromordinal(cls, n):\\n",\n  "datetime.py(879):     @classmethod\\n",\n  "datetime.py(880):     def fromisoformat(cls, date_string):\\n",\n  "datetime.py(891):     @classmethod\\n",\n  "datetime.py(892):     def fromisocalendar(cls, year, week, day):\\n",\n  "datetime.py(928):     def __repr__(self):\\n",\n  "datetime.py(950):     def ctime(self):\\n",\n  "datetime.py(958):     def strftime(self, fmt):\\n",\n  "datetime.py(962):     def __format__(self, fmt):\\n",\n  "datetime.py(969):     def isoformat(self):\\n",\n  "datetime.py(980):     __str__ = isoformat\\n",\n  "datetime.py(983):     @property\\n",\n  "datetime.py(984):     def year(self):\\n",\n  "datetime.py(988):     @property\\n",\n  "datetime.py(989):     def month(self):\\n",\n  "datetime.py(993):     @property\\n",\n  "datetime.py(994):     def day(self):\\n",\n  "datetime.py(1001):     def timetuple(self):\\n",\n  "datetime.py(1006):     def toordinal(self):\\n",\n  "datetime.py(1014):     def replace(self, year=None, month=None, day=None):\\n",\n  "datetime.py(1026):     def __eq__(self, other):\\n",\n  "datetime.py(1031):     def __le__(self, other):\\n",\n  "datetime.py(1036):     def __lt__(self, other):\\n",\n  "datetime.py(1041):     def __ge__(self, other):\\n",\n  "datetime.py(1046):     def __gt__(self, other):\\n",\n  "datetime.py(1051):     def _cmp(self, other):\\n",\n  "datetime.py(1057):     def __hash__(self):\\n",\n  "datetime.py(1065):     def __add__(self, other):\\n",\n  "datetime.py(1074):     __radd__ = __add__\\n",\n  "datetime.py(1076):     def __sub__(self, other):\\n",\n  "datetime.py(1086):     def weekday(self):\\n",\n  "datetime.py(1092):     def isoweekday(self):\\n",\n  "datetime.py(1097):     def isocalendar(self):\\n",\n  "datetime.py(1127):     def _getstate(self):\\n",\n  "datetime.py(1131):     def __setstate(self, string):\\n",\n  "datetime.py(1135):     def __reduce__(self):\\n",\n  "datetime.py(1138): _date_class = date  # so functions w/ args named \\"date\\" can get at the class\\n",\n  "datetime.py(1140): date.min = date(1, 1, 1)\\n",\n  " --- modulename: datetime, funcname: __new__\\n",\n  "datetime.py(830):         if (month is None and\\n",\n  "datetime.py(847):         year, month, day = _check_date_fields(year, month, day)\\n",\n  " --- modulename: datetime, funcname: _check_date_fields\\n",\n  "datetime.py(416):     year = _check_int_field(year)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(417):     month = _check_int_field(month)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(418):     day = _check_int_field(day)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(419):     if not MINYEAR <= year <= MAXYEAR:\\n",\n  "datetime.py(421):     if not 1 <= month <= 12:\\n",\n  "datetime.py(423):     dim = _days_in_month(year, month)\\n",\n  " --- modulename: datetime, funcname: _days_in_month\\n",\n  "datetime.py(52):     assert 1 <= month <= 12, month\\n",\n  "datetime.py(53):     if month == 2 and _is_leap(year):\\n",\n  "datetime.py(55):     return _DAYS_IN_MONTH[month]\\n",\n  "datetime.py(424):     if not 1 <= day <= dim:\\n",\n  "datetime.py(426):     return year, month, day\\n",\n  "datetime.py(848):         self = object.__new__(cls)\\n",\n  "datetime.py(849):         self._year = year\\n",\n  "datetime.py(850):         self._month = month\\n",\n  "datetime.py(851):         self._day = day\\n",\n  "datetime.py(852):         self._hashcode = -1\\n",\n  "datetime.py(853):         return self\\n",\n  "datetime.py(1141): date.max = date(9999, 12, 31)\\n",\n  " --- modulename: datetime, funcname: __new__\\n",\n  "datetime.py(830):         if (month is None and\\n",\n  "datetime.py(847):         year, month, day = _check_date_fields(year, month, day)\\n",\n  " --- modulename: datetime, funcname: _check_date_fields\\n",\n  "datetime.py(416):     year = _check_int_field(year)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(417):     month = _check_int_field(month)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(418):     day = _check_int_field(day)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(419):     if not MINYEAR <= year <= MAXYEAR:\\n",\n  "datetime.py(421):     if not 1 <= month <= 12:\\n",\n  "datetime.py(423):     dim = _days_in_month(year, month)\\n",\n  " --- modulename: datetime, funcname: _days_in_month\\n",\n  "datetime.py(52):     assert 1 <= month <= 12, month\\n",\n  "datetime.py(53):     if month == 2 and _is_leap(year):\\n",\n  "datetime.py(55):     return _DAYS_IN_MONTH[month]\\n",\n  "datetime.py(424):     if not 1 <= day <= dim:\\n",\n  "datetime.py(426):     return year, month, day\\n",\n  "datetime.py(848):         self = object.__new__(cls)\\n",\n  "datetime.py(849):         self._year = year\\n",\n  "datetime.py(850):         self._month = month\\n",\n  "datetime.py(851):         self._day = day\\n",\n  "datetime.py(852):         self._hashcode = -1\\n",\n  "datetime.py(853):         return self\\n",\n  "datetime.py(1142): date.resolution = timedelta(days=1)\\n",\n  " --- modulename: datetime, funcname: __new__\\n",\n  "datetime.py(506):         d = s = us = 0\\n",\n  "datetime.py(509):         days += weeks*7\\n",\n  "datetime.py(510):         seconds += minutes*60 + hours*3600\\n",\n  "datetime.py(511):         microseconds += milliseconds*1000\\n",\n  "datetime.py(515):         if isinstance(days, float):\\n",\n  "datetime.py(523):             daysecondsfrac = 0.0\\n",\n  "datetime.py(524):             d = days\\n",\n  "datetime.py(525):         assert isinstance(daysecondsfrac, float)\\n",\n  "datetime.py(526):         assert abs(daysecondsfrac) <= 1.0\\n",\n  "datetime.py(527):         assert isinstance(d, int)\\n",\n  "datetime.py(528):         assert abs(s) <= 24 * 3600\\n",\n  "datetime.py(531):         if isinstance(seconds, float):\\n",\n  "datetime.py(538):             secondsfrac = daysecondsfrac\\n",\n  "datetime.py(540):         assert isinstance(secondsfrac, float)\\n",\n  "datetime.py(541):         assert abs(secondsfrac) <= 2.0\\n",\n  "datetime.py(543):         assert isinstance(seconds, int)\\n",\n  "datetime.py(544):         days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(545):         d += days\\n",\n  "datetime.py(546):         s += int(seconds)    # can\'t overflow\\n",\n  "datetime.py(547):         assert isinstance(s, int)\\n",\n  "datetime.py(548):         assert abs(s) <= 2 * 24 * 3600\\n",\n  "datetime.py(551):         usdouble = secondsfrac * 1e6\\n",\n  "datetime.py(552):         assert abs(usdouble) < 2.1e6    # exact value not critical\\n",\n  "datetime.py(555):         if isinstance(microseconds, float):\\n",\n  "datetime.py(562):             microseconds = int(microseconds)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "datetime.py(563):             seconds, microseconds = divmod(microseconds, 1000000)\\n",\n  "datetime.py(564):             days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(565):             d += days\\n",\n  "datetime.py(566):             s += seconds\\n",\n  "datetime.py(567):             microseconds = round(microseconds + usdouble)\\n",\n  "datetime.py(568):         assert isinstance(s, int)\\n",\n  "datetime.py(569):         assert isinstance(microseconds, int)\\n",\n  "datetime.py(570):         assert abs(s) <= 3 * 24 * 3600\\n",\n  "datetime.py(571):         assert abs(microseconds) < 3.1e6\\n",\n  "datetime.py(574):         seconds, us = divmod(microseconds, 1000000)\\n",\n  "datetime.py(575):         s += seconds\\n",\n  "datetime.py(576):         days, s = divmod(s, 24*3600)\\n",\n  "datetime.py(577):         d += days\\n",\n  "datetime.py(579):         assert isinstance(d, int)\\n",\n  "datetime.py(580):         assert isinstance(s, int) and 0 <= s < 24*3600\\n",\n  "datetime.py(581):         assert isinstance(us, int) and 0 <= us < 1000000\\n",\n  "datetime.py(583):         if abs(d) > 999999999:\\n",\n  "datetime.py(586):         self = object.__new__(cls)\\n",\n  "datetime.py(587):         self._days = d\\n",\n  "datetime.py(588):         self._seconds = s\\n",\n  "datetime.py(589):         self._microseconds = us\\n",\n  "datetime.py(590):         self._hashcode = -1\\n",\n  "datetime.py(591):         return self\\n",\n  "datetime.py(1145): class tzinfo:\\n",\n  " --- modulename: datetime, funcname: tzinfo\\n",\n  "datetime.py(1145): class tzinfo:\\n",\n  "datetime.py(1146):     \\"\\"\\"Abstract base class for time zone info classes.\\n",\n  "datetime.py(1150):     __slots__ = ()\\n",\n  "datetime.py(1152):     def tzname(self, dt):\\n",\n  "datetime.py(1156):     def utcoffset(self, dt):\\n",\n  "datetime.py(1160):     def dst(self, dt):\\n",\n  "datetime.py(1168):     def fromutc(self, dt):\\n",\n  "datetime.py(1197):     def __reduce__(self):\\n",\n  "datetime.py(1214): class IsoCalendarDate(tuple):\\n",\n  " --- modulename: datetime, funcname: IsoCalendarDate\\n",\n  "datetime.py(1214): class IsoCalendarDate(tuple):\\n",\n  "datetime.py(1216):     def __new__(cls, year, week, weekday, /):\\n",\n  "datetime.py(1219):     @property\\n",\n  "datetime.py(1220):     def year(self):\\n",\n  "datetime.py(1223):     @property\\n",\n  "datetime.py(1224):     def week(self):\\n",\n  "datetime.py(1227):     @property\\n",\n  "datetime.py(1228):     def weekday(self):\\n",\n  "datetime.py(1231):     def __reduce__(self):\\n",\n  "datetime.py(1236):     def __repr__(self):\\n",\n  "datetime.py(1241): _IsoCalendarDate = IsoCalendarDate\\n",\n  "datetime.py(1242): del IsoCalendarDate\\n",\n  "datetime.py(1243): _tzinfo_class = tzinfo\\n",\n  "datetime.py(1245): class time:\\n",\n  " --- modulename: datetime, funcname: time\\n",\n  "datetime.py(1245): class time:\\n",\n  "datetime.py(1246):     \\"\\"\\"Time with time zone.\\n",\n  "datetime.py(1268):     __slots__ = \'_hour\', \'_minute\', \'_second\', \'_microsecond\', \'_tzinfo\', \'_hashcode\', \'_fold\'\\n",\n  "datetime.py(1270):     def __new__(cls, hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0):\\n",\n  "datetime.py(1310):     @property\\n",\n  "datetime.py(1311):     def hour(self):\\n",\n  "datetime.py(1315):     @property\\n",\n  "datetime.py(1316):     def minute(self):\\n",\n  "datetime.py(1320):     @property\\n",\n  "datetime.py(1321):     def second(self):\\n",\n  "datetime.py(1325):     @property\\n",\n  "datetime.py(1326):     def microsecond(self):\\n",\n  "datetime.py(1330):     @property\\n",\n  "datetime.py(1331):     def tzinfo(self):\\n",\n  "datetime.py(1335):     @property\\n",\n  "datetime.py(1336):     def fold(self):\\n",\n  "datetime.py(1343):     def __eq__(self, other):\\n",\n  "datetime.py(1349):     def __le__(self, other):\\n",\n  "datetime.py(1355):     def __lt__(self, other):\\n",\n  "datetime.py(1361):     def __ge__(self, other):\\n",\n  "datetime.py(1367):     def __gt__(self, other):\\n",\n  "datetime.py(1373):     def _cmp(self, other, allow_mixed=False):\\n",\n  "datetime.py(1401):     def __hash__(self):\\n",\n  "datetime.py(1424):     def _tzstr(self):\\n",\n  "datetime.py(1429):     def __repr__(self):\\n",\n  "datetime.py(1448):     def isoformat(self, timespec=\'auto\'):\\n",\n  "datetime.py(1465):     __str__ = isoformat\\n",\n  "datetime.py(1467):     @classmethod\\n",\n  "datetime.py(1468):     def fromisoformat(cls, time_string):\\n",\n  "datetime.py(1479):     def strftime(self, fmt):\\n",\n  "datetime.py(1490):     def __format__(self, fmt):\\n",\n  "datetime.py(1499):     def utcoffset(self):\\n",\n  "datetime.py(1508):     def tzname(self):\\n",\n  "datetime.py(1521):     def dst(self):\\n",\n  "datetime.py(1536):     def replace(self, hour=None, minute=None, second=None, microsecond=None,\\n",\n  "datetime.py(1537):                 tzinfo=True, *, fold=None):\\n",\n  "datetime.py(1536):     def replace(self, hour=None, minute=None, second=None, microsecond=None,\\n",\n  "datetime.py(1555):     def _getstate(self, protocol=3):\\n",\n  "datetime.py(1568):     def __setstate(self, string, tzinfo):\\n",\n  "datetime.py(1581):     def __reduce_ex__(self, protocol):\\n",\n  "datetime.py(1584):     def __reduce__(self):\\n",\n  "datetime.py(1587): _time_class = time  # so functions w/ args named \\"time\\" can get at the class\\n",\n  "datetime.py(1589): time.min = time(0, 0, 0)\\n",\n  " --- modulename: datetime, funcname: __new__\\n",\n  "datetime.py(1280):         if (isinstance(hour, (bytes, str)) and len(hour) == 6 and\\n",\n  "datetime.py(1296):         hour, minute, second, microsecond, fold = _check_time_fields(\\n",\n  "datetime.py(1297):             hour, minute, second, microsecond, fold)\\n",\n  "datetime.py(1296):         hour, minute, second, microsecond, fold = _check_time_fields(\\n",\n  " --- modulename: datetime, funcname: _check_time_fields\\n",\n  "datetime.py(429):     hour = _check_int_field(hour)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(430):     minute = _check_int_field(minute)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(431):     second = _check_int_field(second)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(432):     microsecond = _check_int_field(microsecond)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(433):     if not 0 <= hour <= 23:\\n",\n  "datetime.py(435):     if not 0 <= minute <= 59:\\n",\n  "datetime.py(437):     if not 0 <= second <= 59:\\n",\n  "datetime.py(439):     if not 0 <= microsecond <= 999999:\\n",\n  "datetime.py(441):     if fold not in (0, 1):\\n",\n  "datetime.py(443):     return hour, minute, second, microsecond, fold\\n",\n  "datetime.py(1298):         _check_tzinfo_arg(tzinfo)\\n",\n  " --- modulename: datetime, funcname: _check_tzinfo_arg\\n",\n  "datetime.py(446):     if tz is not None and not isinstance(tz, tzinfo):\\n",\n  "datetime.py(1299):         self = object.__new__(cls)\\n",\n  "datetime.py(1300):         self._hour = hour\\n",\n  "datetime.py(1301):         self._minute = minute\\n",\n  "datetime.py(1302):         self._second = second\\n",\n  "datetime.py(1303):         self._microsecond = microsecond\\n",\n  "datetime.py(1304):         self._tzinfo = tzinfo\\n",\n  "datetime.py(1305):         self._hashcode = -1\\n",\n  "datetime.py(1306):         self._fold = fold\\n",\n  "datetime.py(1307):         return self\\n",\n  "datetime.py(1590): time.max = time(23, 59, 59, 999999)\\n",\n  " --- modulename: datetime, funcname: __new__\\n",\n  "datetime.py(1280):         if (isinstance(hour, (bytes, str)) and len(hour) == 6 and\\n",\n  "datetime.py(1296):         hour, minute, second, microsecond, fold = _check_time_fields(\\n",\n  "datetime.py(1297):             hour, minute, second, microsecond, fold)\\n",\n  "datetime.py(1296):         hour, minute, second, microsecond, fold = _check_time_fields(\\n",\n  " --- modulename: datetime, funcname: _check_time_fields\\n",\n  "datetime.py(429):     hour = _check_int_field(hour)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(430):     minute = _check_int_field(minute)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(431):     second = _check_int_field(second)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(432):     microsecond = _check_int_field(microsecond)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(433):     if not 0 <= hour <= 23:\\n",\n  "datetime.py(435):     if not 0 <= minute <= 59:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "datetime.py(437):     if not 0 <= second <= 59:\\n",\n  "datetime.py(439):     if not 0 <= microsecond <= 999999:\\n",\n  "datetime.py(441):     if fold not in (0, 1):\\n",\n  "datetime.py(443):     return hour, minute, second, microsecond, fold\\n",\n  "datetime.py(1298):         _check_tzinfo_arg(tzinfo)\\n",\n  " --- modulename: datetime, funcname: _check_tzinfo_arg\\n",\n  "datetime.py(446):     if tz is not None and not isinstance(tz, tzinfo):\\n",\n  "datetime.py(1299):         self = object.__new__(cls)\\n",\n  "datetime.py(1300):         self._hour = hour\\n",\n  "datetime.py(1301):         self._minute = minute\\n",\n  "datetime.py(1302):         self._second = second\\n",\n  "datetime.py(1303):         self._microsecond = microsecond\\n",\n  "datetime.py(1304):         self._tzinfo = tzinfo\\n",\n  "datetime.py(1305):         self._hashcode = -1\\n",\n  "datetime.py(1306):         self._fold = fold\\n",\n  "datetime.py(1307):         return self\\n",\n  "datetime.py(1591): time.resolution = timedelta(microseconds=1)\\n",\n  " --- modulename: datetime, funcname: __new__\\n",\n  "datetime.py(506):         d = s = us = 0\\n",\n  "datetime.py(509):         days += weeks*7\\n",\n  "datetime.py(510):         seconds += minutes*60 + hours*3600\\n",\n  "datetime.py(511):         microseconds += milliseconds*1000\\n",\n  "datetime.py(515):         if isinstance(days, float):\\n",\n  "datetime.py(523):             daysecondsfrac = 0.0\\n",\n  "datetime.py(524):             d = days\\n",\n  "datetime.py(525):         assert isinstance(daysecondsfrac, float)\\n",\n  "datetime.py(526):         assert abs(daysecondsfrac) <= 1.0\\n",\n  "datetime.py(527):         assert isinstance(d, int)\\n",\n  "datetime.py(528):         assert abs(s) <= 24 * 3600\\n",\n  "datetime.py(531):         if isinstance(seconds, float):\\n",\n  "datetime.py(538):             secondsfrac = daysecondsfrac\\n",\n  "datetime.py(540):         assert isinstance(secondsfrac, float)\\n",\n  "datetime.py(541):         assert abs(secondsfrac) <= 2.0\\n",\n  "datetime.py(543):         assert isinstance(seconds, int)\\n",\n  "datetime.py(544):         days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(545):         d += days\\n",\n  "datetime.py(546):         s += int(seconds)    # can\'t overflow\\n",\n  "datetime.py(547):         assert isinstance(s, int)\\n",\n  "datetime.py(548):         assert abs(s) <= 2 * 24 * 3600\\n",\n  "datetime.py(551):         usdouble = secondsfrac * 1e6\\n",\n  "datetime.py(552):         assert abs(usdouble) < 2.1e6    # exact value not critical\\n",\n  "datetime.py(555):         if isinstance(microseconds, float):\\n",\n  "datetime.py(562):             microseconds = int(microseconds)\\n",\n  "datetime.py(563):             seconds, microseconds = divmod(microseconds, 1000000)\\n",\n  "datetime.py(564):             days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(565):             d += days\\n",\n  "datetime.py(566):             s += seconds\\n",\n  "datetime.py(567):             microseconds = round(microseconds + usdouble)\\n",\n  "datetime.py(568):         assert isinstance(s, int)\\n",\n  "datetime.py(569):         assert isinstance(microseconds, int)\\n",\n  "datetime.py(570):         assert abs(s) <= 3 * 24 * 3600\\n",\n  "datetime.py(571):         assert abs(microseconds) < 3.1e6\\n",\n  "datetime.py(574):         seconds, us = divmod(microseconds, 1000000)\\n",\n  "datetime.py(575):         s += seconds\\n",\n  "datetime.py(576):         days, s = divmod(s, 24*3600)\\n",\n  "datetime.py(577):         d += days\\n",\n  "datetime.py(579):         assert isinstance(d, int)\\n",\n  "datetime.py(580):         assert isinstance(s, int) and 0 <= s < 24*3600\\n",\n  "datetime.py(581):         assert isinstance(us, int) and 0 <= us < 1000000\\n",\n  "datetime.py(583):         if abs(d) > 999999999:\\n",\n  "datetime.py(586):         self = object.__new__(cls)\\n",\n  "datetime.py(587):         self._days = d\\n",\n  "datetime.py(588):         self._seconds = s\\n",\n  "datetime.py(589):         self._microseconds = us\\n",\n  "datetime.py(590):         self._hashcode = -1\\n",\n  "datetime.py(591):         return self\\n",\n  "datetime.py(1594): class datetime(date):\\n",\n  " --- modulename: datetime, funcname: datetime\\n",\n  "datetime.py(1594): class datetime(date):\\n",\n  "datetime.py(1595):     \\"\\"\\"datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\\n",\n  "datetime.py(1600):     __slots__ = date.__slots__ + time.__slots__\\n",\n  "datetime.py(1602):     def __new__(cls, year, month=None, day=None, hour=0, minute=0, second=0,\\n",\n  "datetime.py(1603):                 microsecond=0, tzinfo=None, *, fold=0):\\n",\n  "datetime.py(1602):     def __new__(cls, year, month=None, day=None, hour=0, minute=0, second=0,\\n",\n  "datetime.py(1638):     @property\\n",\n  "datetime.py(1639):     def hour(self):\\n",\n  "datetime.py(1643):     @property\\n",\n  "datetime.py(1644):     def minute(self):\\n",\n  "datetime.py(1648):     @property\\n",\n  "datetime.py(1649):     def second(self):\\n",\n  "datetime.py(1653):     @property\\n",\n  "datetime.py(1654):     def microsecond(self):\\n",\n  "datetime.py(1658):     @property\\n",\n  "datetime.py(1659):     def tzinfo(self):\\n",\n  "datetime.py(1663):     @property\\n",\n  "datetime.py(1664):     def fold(self):\\n",\n  "datetime.py(1667):     @classmethod\\n",\n  "datetime.py(1668):     def _fromtimestamp(cls, t, utc, tz):\\n",\n  "datetime.py(1711):     @classmethod\\n",\n  "datetime.py(1712):     def fromtimestamp(cls, t, tz=None):\\n",\n  "datetime.py(1721):     @classmethod\\n",\n  "datetime.py(1722):     def utcfromtimestamp(cls, t):\\n",\n  "datetime.py(1726):     @classmethod\\n",\n  "datetime.py(1727):     def now(cls, tz=None):\\n",\n  "datetime.py(1732):     @classmethod\\n",\n  "datetime.py(1733):     def utcnow(cls):\\n",\n  "datetime.py(1738):     @classmethod\\n",\n  "datetime.py(1739):     def combine(cls, date, time, tzinfo=True):\\n",\n  "datetime.py(1751):     @classmethod\\n",\n  "datetime.py(1752):     def fromisoformat(cls, date_string):\\n",\n  "datetime.py(1776):     def timetuple(self):\\n",\n  "datetime.py(1789):     def _mktime(self):\\n",\n  "datetime.py(1824):     def timestamp(self):\\n",\n  "datetime.py(1832):     def utctimetuple(self):\\n",\n  "datetime.py(1841):     def date(self):\\n",\n  "datetime.py(1845):     def time(self):\\n",\n  "datetime.py(1849):     def timetz(self):\\n",\n  "datetime.py(1854):     def replace(self, year=None, month=None, day=None, hour=None,\\n",\n  "datetime.py(1856):                 *, fold=None):\\n",\n  "datetime.py(1854):     def replace(self, year=None, month=None, day=None, hour=None,\\n",\n  "datetime.py(1879):     def _local_timezone(self):\\n",\n  "datetime.py(1891):     def astimezone(self, tz=None):\\n",\n  "datetime.py(1918):     def ctime(self):\\n",\n  "datetime.py(1928):     def isoformat(self, sep=\'T\', timespec=\'auto\'):\\n",\n  "datetime.py(1955):     def __repr__(self):\\n",\n  "datetime.py(1974):     def __str__(self):\\n",\n  "datetime.py(1978):     @classmethod\\n",\n  "datetime.py(1979):     def strptime(cls, date_string, format):\\n",\n  "datetime.py(1984):     def utcoffset(self):\\n",\n  "datetime.py(1993):     def tzname(self):\\n",\n  "datetime.py(2006):     def dst(self):\\n",\n  "datetime.py(2023):     def __eq__(self, other):\\n",\n  "datetime.py(2031):     def __le__(self, other):\\n",\n  "datetime.py(2039):     def __lt__(self, other):\\n",\n  "datetime.py(2047):     def __ge__(self, other):\\n",\n  "datetime.py(2055):     def __gt__(self, other):\\n",\n  "datetime.py(2063):     def _cmp(self, other, allow_mixed=False):\\n",\n  "datetime.py(2100):     def __add__(self, other):\\n",\n  "datetime.py(2119):     __radd__ = __add__\\n",\n  "datetime.py(2121):     def __sub__(self, other):\\n",\n  "datetime.py(2145):     def __hash__(self):\\n",\n  "datetime.py(2162):     def _getstate(self, protocol=3):\\n",\n  "datetime.py(2177):     def __setstate(self, string, tzinfo):\\n",\n  "datetime.py(2192):     def __reduce_ex__(self, protocol):\\n",\n  "datetime.py(2195):     def __reduce__(self):\\n",\n  "datetime.py(2199): datetime.min = datetime(1, 1, 1)\\n",\n  " --- modulename: datetime, funcname: __new__\\n",\n  "datetime.py(1604):         if (isinstance(year, (bytes, str)) and len(year) == 10 and\\n",\n  "datetime.py(1620):         year, month, day = _check_date_fields(year, month, day)\\n",\n  " --- modulename: datetime, funcname: _check_date_fields\\n",\n  "datetime.py(416):     year = _check_int_field(year)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(417):     month = _check_int_field(month)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(418):     day = _check_int_field(day)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(419):     if not MINYEAR <= year <= MAXYEAR:\\n",\n  "datetime.py(421):     if not 1 <= month <= 12:\\n",\n  "datetime.py(423):     dim = _days_in_month(year, month)\\n",\n  " --- modulename: datetime, funcname: _days_in_month\\n",\n  "datetime.py(52):     assert 1 <= month <= 12, month\\n",\n  "datetime.py(53):     if month == 2 and _is_leap(year):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "datetime.py(55):     return _DAYS_IN_MONTH[month]\\n",\n  "datetime.py(424):     if not 1 <= day <= dim:\\n",\n  "datetime.py(426):     return year, month, day\\n",\n  "datetime.py(1621):         hour, minute, second, microsecond, fold = _check_time_fields(\\n",\n  "datetime.py(1622):             hour, minute, second, microsecond, fold)\\n",\n  "datetime.py(1621):         hour, minute, second, microsecond, fold = _check_time_fields(\\n",\n  " --- modulename: datetime, funcname: _check_time_fields\\n",\n  "datetime.py(429):     hour = _check_int_field(hour)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(430):     minute = _check_int_field(minute)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(431):     second = _check_int_field(second)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(432):     microsecond = _check_int_field(microsecond)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(433):     if not 0 <= hour <= 23:\\n",\n  "datetime.py(435):     if not 0 <= minute <= 59:\\n",\n  "datetime.py(437):     if not 0 <= second <= 59:\\n",\n  "datetime.py(439):     if not 0 <= microsecond <= 999999:\\n",\n  "datetime.py(441):     if fold not in (0, 1):\\n",\n  "datetime.py(443):     return hour, minute, second, microsecond, fold\\n",\n  "datetime.py(1623):         _check_tzinfo_arg(tzinfo)\\n",\n  " --- modulename: datetime, funcname: _check_tzinfo_arg\\n",\n  "datetime.py(446):     if tz is not None and not isinstance(tz, tzinfo):\\n",\n  "datetime.py(1624):         self = object.__new__(cls)\\n",\n  "datetime.py(1625):         self._year = year\\n",\n  "datetime.py(1626):         self._month = month\\n",\n  "datetime.py(1627):         self._day = day\\n",\n  "datetime.py(1628):         self._hour = hour\\n",\n  "datetime.py(1629):         self._minute = minute\\n",\n  "datetime.py(1630):         self._second = second\\n",\n  "datetime.py(1631):         self._microsecond = microsecond\\n",\n  "datetime.py(1632):         self._tzinfo = tzinfo\\n",\n  "datetime.py(1633):         self._hashcode = -1\\n",\n  "datetime.py(1634):         self._fold = fold\\n",\n  "datetime.py(1635):         return self\\n",\n  "datetime.py(2200): datetime.max = datetime(9999, 12, 31, 23, 59, 59, 999999)\\n",\n  " --- modulename: datetime, funcname: __new__\\n",\n  "datetime.py(1604):         if (isinstance(year, (bytes, str)) and len(year) == 10 and\\n",\n  "datetime.py(1620):         year, month, day = _check_date_fields(year, month, day)\\n",\n  " --- modulename: datetime, funcname: _check_date_fields\\n",\n  "datetime.py(416):     year = _check_int_field(year)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(417):     month = _check_int_field(month)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(418):     day = _check_int_field(day)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(419):     if not MINYEAR <= year <= MAXYEAR:\\n",\n  "datetime.py(421):     if not 1 <= month <= 12:\\n",\n  "datetime.py(423):     dim = _days_in_month(year, month)\\n",\n  " --- modulename: datetime, funcname: _days_in_month\\n",\n  "datetime.py(52):     assert 1 <= month <= 12, month\\n",\n  "datetime.py(53):     if month == 2 and _is_leap(year):\\n",\n  "datetime.py(55):     return _DAYS_IN_MONTH[month]\\n",\n  "datetime.py(424):     if not 1 <= day <= dim:\\n",\n  "datetime.py(426):     return year, month, day\\n",\n  "datetime.py(1621):         hour, minute, second, microsecond, fold = _check_time_fields(\\n",\n  "datetime.py(1622):             hour, minute, second, microsecond, fold)\\n",\n  "datetime.py(1621):         hour, minute, second, microsecond, fold = _check_time_fields(\\n",\n  " --- modulename: datetime, funcname: _check_time_fields\\n",\n  "datetime.py(429):     hour = _check_int_field(hour)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(430):     minute = _check_int_field(minute)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(431):     second = _check_int_field(second)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(432):     microsecond = _check_int_field(microsecond)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(433):     if not 0 <= hour <= 23:\\n",\n  "datetime.py(435):     if not 0 <= minute <= 59:\\n",\n  "datetime.py(437):     if not 0 <= second <= 59:\\n",\n  "datetime.py(439):     if not 0 <= microsecond <= 999999:\\n",\n  "datetime.py(441):     if fold not in (0, 1):\\n",\n  "datetime.py(443):     return hour, minute, second, microsecond, fold\\n",\n  "datetime.py(1623):         _check_tzinfo_arg(tzinfo)\\n",\n  " --- modulename: datetime, funcname: _check_tzinfo_arg\\n",\n  "datetime.py(446):     if tz is not None and not isinstance(tz, tzinfo):\\n",\n  "datetime.py(1624):         self = object.__new__(cls)\\n",\n  "datetime.py(1625):         self._year = year\\n",\n  "datetime.py(1626):         self._month = month\\n",\n  "datetime.py(1627):         self._day = day\\n",\n  "datetime.py(1628):         self._hour = hour\\n",\n  "datetime.py(1629):         self._minute = minute\\n",\n  "datetime.py(1630):         self._second = second\\n",\n  "datetime.py(1631):         self._microsecond = microsecond\\n",\n  "datetime.py(1632):         self._tzinfo = tzinfo\\n",\n  "datetime.py(1633):         self._hashcode = -1\\n",\n  "datetime.py(1634):         self._fold = fold\\n",\n  "datetime.py(1635):         return self\\n",\n  "datetime.py(2201): datetime.resolution = timedelta(microseconds=1)\\n",\n  " --- modulename: datetime, funcname: __new__\\n",\n  "datetime.py(506):         d = s = us = 0\\n",\n  "datetime.py(509):         days += weeks*7\\n",\n  "datetime.py(510):         seconds += minutes*60 + hours*3600\\n",\n  "datetime.py(511):         microseconds += milliseconds*1000\\n",\n  "datetime.py(515):         if isinstance(days, float):\\n",\n  "datetime.py(523):             daysecondsfrac = 0.0\\n",\n  "datetime.py(524):             d = days\\n",\n  "datetime.py(525):         assert isinstance(daysecondsfrac, float)\\n",\n  "datetime.py(526):         assert abs(daysecondsfrac) <= 1.0\\n",\n  "datetime.py(527):         assert isinstance(d, int)\\n",\n  "datetime.py(528):         assert abs(s) <= 24 * 3600\\n",\n  "datetime.py(531):         if isinstance(seconds, float):\\n",\n  "datetime.py(538):             secondsfrac = daysecondsfrac\\n",\n  "datetime.py(540):         assert isinstance(secondsfrac, float)\\n",\n  "datetime.py(541):         assert abs(secondsfrac) <= 2.0\\n",\n  "datetime.py(543):         assert isinstance(seconds, int)\\n",\n  "datetime.py(544):         days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(545):         d += days\\n",\n  "datetime.py(546):         s += int(seconds)    # can\'t overflow\\n",\n  "datetime.py(547):         assert isinstance(s, int)\\n",\n  "datetime.py(548):         assert abs(s) <= 2 * 24 * 3600\\n",\n  "datetime.py(551):         usdouble = secondsfrac * 1e6\\n",\n  "datetime.py(552):         assert abs(usdouble) < 2.1e6    # exact value not critical\\n",\n  "datetime.py(555):         if isinstance(microseconds, float):\\n",\n  "datetime.py(562):             microseconds = int(microseconds)\\n",\n  "datetime.py(563):             seconds, microseconds = divmod(microseconds, 1000000)\\n",\n  "datetime.py(564):             days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(565):             d += days\\n",\n  "datetime.py(566):             s += seconds\\n",\n  "datetime.py(567):             microseconds = round(microseconds + usdouble)\\n",\n  "datetime.py(568):         assert isinstance(s, int)\\n",\n  "datetime.py(569):         assert isinstance(microseconds, int)\\n",\n  "datetime.py(570):         assert abs(s) <= 3 * 24 * 3600\\n",\n  "datetime.py(571):         assert abs(microseconds) < 3.1e6\\n",\n  "datetime.py(574):         seconds, us = divmod(microseconds, 1000000)\\n",\n  "datetime.py(575):         s += seconds\\n",\n  "datetime.py(576):         days, s = divmod(s, 24*3600)\\n",\n  "datetime.py(577):         d += days\\n",\n  "datetime.py(579):         assert isinstance(d, int)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "datetime.py(580):         assert isinstance(s, int) and 0 <= s < 24*3600\\n",\n  "datetime.py(581):         assert isinstance(us, int) and 0 <= us < 1000000\\n",\n  "datetime.py(583):         if abs(d) > 999999999:\\n",\n  "datetime.py(586):         self = object.__new__(cls)\\n",\n  "datetime.py(587):         self._days = d\\n",\n  "datetime.py(588):         self._seconds = s\\n",\n  "datetime.py(589):         self._microseconds = us\\n",\n  "datetime.py(590):         self._hashcode = -1\\n",\n  "datetime.py(591):         return self\\n",\n  "datetime.py(2204): def _isoweek1monday(year):\\n",\n  "datetime.py(2216): class timezone(tzinfo):\\n",\n  " --- modulename: datetime, funcname: timezone\\n",\n  "datetime.py(2216): class timezone(tzinfo):\\n",\n  "datetime.py(2217):     __slots__ = \'_offset\', \'_name\'\\n",\n  "datetime.py(2220):     _Omitted = object()\\n",\n  "datetime.py(2221):     def __new__(cls, offset, name=_Omitted):\\n",\n  "datetime.py(2236):     @classmethod\\n",\n  "datetime.py(2237):     def _create(cls, offset, name=None):\\n",\n  "datetime.py(2243):     def __getinitargs__(self):\\n",\n  "datetime.py(2249):     def __eq__(self, other):\\n",\n  "datetime.py(2254):     def __hash__(self):\\n",\n  "datetime.py(2257):     def __repr__(self):\\n",\n  "datetime.py(2277):     def __str__(self):\\n",\n  "datetime.py(2280):     def utcoffset(self, dt):\\n",\n  "datetime.py(2286):     def tzname(self, dt):\\n",\n  "datetime.py(2294):     def dst(self, dt):\\n",\n  "datetime.py(2300):     def fromutc(self, dt):\\n",\n  "datetime.py(2309):     _maxoffset = timedelta(hours=24, microseconds=-1)\\n",\n  " --- modulename: datetime, funcname: __new__\\n",\n  "datetime.py(506):         d = s = us = 0\\n",\n  "datetime.py(509):         days += weeks*7\\n",\n  "datetime.py(510):         seconds += minutes*60 + hours*3600\\n",\n  "datetime.py(511):         microseconds += milliseconds*1000\\n",\n  "datetime.py(515):         if isinstance(days, float):\\n",\n  "datetime.py(523):             daysecondsfrac = 0.0\\n",\n  "datetime.py(524):             d = days\\n",\n  "datetime.py(525):         assert isinstance(daysecondsfrac, float)\\n",\n  "datetime.py(526):         assert abs(daysecondsfrac) <= 1.0\\n",\n  "datetime.py(527):         assert isinstance(d, int)\\n",\n  "datetime.py(528):         assert abs(s) <= 24 * 3600\\n",\n  "datetime.py(531):         if isinstance(seconds, float):\\n",\n  "datetime.py(538):             secondsfrac = daysecondsfrac\\n",\n  "datetime.py(540):         assert isinstance(secondsfrac, float)\\n",\n  "datetime.py(541):         assert abs(secondsfrac) <= 2.0\\n",\n  "datetime.py(543):         assert isinstance(seconds, int)\\n",\n  "datetime.py(544):         days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(545):         d += days\\n",\n  "datetime.py(546):         s += int(seconds)    # can\'t overflow\\n",\n  "datetime.py(547):         assert isinstance(s, int)\\n",\n  "datetime.py(548):         assert abs(s) <= 2 * 24 * 3600\\n",\n  "datetime.py(551):         usdouble = secondsfrac * 1e6\\n",\n  "datetime.py(552):         assert abs(usdouble) < 2.1e6    # exact value not critical\\n",\n  "datetime.py(555):         if isinstance(microseconds, float):\\n",\n  "datetime.py(562):             microseconds = int(microseconds)\\n",\n  "datetime.py(563):             seconds, microseconds = divmod(microseconds, 1000000)\\n",\n  "datetime.py(564):             days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(565):             d += days\\n",\n  "datetime.py(566):             s += seconds\\n",\n  "datetime.py(567):             microseconds = round(microseconds + usdouble)\\n",\n  "datetime.py(568):         assert isinstance(s, int)\\n",\n  "datetime.py(569):         assert isinstance(microseconds, int)\\n",\n  "datetime.py(570):         assert abs(s) <= 3 * 24 * 3600\\n",\n  "datetime.py(571):         assert abs(microseconds) < 3.1e6\\n",\n  "datetime.py(574):         seconds, us = divmod(microseconds, 1000000)\\n",\n  "datetime.py(575):         s += seconds\\n",\n  "datetime.py(576):         days, s = divmod(s, 24*3600)\\n",\n  "datetime.py(577):         d += days\\n",\n  "datetime.py(579):         assert isinstance(d, int)\\n",\n  "datetime.py(580):         assert isinstance(s, int) and 0 <= s < 24*3600\\n",\n  "datetime.py(581):         assert isinstance(us, int) and 0 <= us < 1000000\\n",\n  "datetime.py(583):         if abs(d) > 999999999:\\n",\n  "datetime.py(586):         self = object.__new__(cls)\\n",\n  "datetime.py(587):         self._days = d\\n",\n  "datetime.py(588):         self._seconds = s\\n",\n  "datetime.py(589):         self._microseconds = us\\n",\n  "datetime.py(590):         self._hashcode = -1\\n",\n  "datetime.py(591):         return self\\n",\n  "datetime.py(2310):     _minoffset = -_maxoffset\\n",\n  " --- modulename: datetime, funcname: __neg__\\n",\n  "datetime.py(668):         return timedelta(-self._days,\\n",\n  "datetime.py(669):                          -self._seconds,\\n",\n  "datetime.py(670):                          -self._microseconds)\\n",\n  "datetime.py(668):         return timedelta(-self._days,\\n",\n  " --- modulename: datetime, funcname: __new__\\n",\n  "datetime.py(506):         d = s = us = 0\\n",\n  "datetime.py(509):         days += weeks*7\\n",\n  "datetime.py(510):         seconds += minutes*60 + hours*3600\\n",\n  "datetime.py(511):         microseconds += milliseconds*1000\\n",\n  "datetime.py(515):         if isinstance(days, float):\\n",\n  "datetime.py(523):             daysecondsfrac = 0.0\\n",\n  "datetime.py(524):             d = days\\n",\n  "datetime.py(525):         assert isinstance(daysecondsfrac, float)\\n",\n  "datetime.py(526):         assert abs(daysecondsfrac) <= 1.0\\n",\n  "datetime.py(527):         assert isinstance(d, int)\\n",\n  "datetime.py(528):         assert abs(s) <= 24 * 3600\\n",\n  "datetime.py(531):         if isinstance(seconds, float):\\n",\n  "datetime.py(538):             secondsfrac = daysecondsfrac\\n",\n  "datetime.py(540):         assert isinstance(secondsfrac, float)\\n",\n  "datetime.py(541):         assert abs(secondsfrac) <= 2.0\\n",\n  "datetime.py(543):         assert isinstance(seconds, int)\\n",\n  "datetime.py(544):         days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(545):         d += days\\n",\n  "datetime.py(546):         s += int(seconds)    # can\'t overflow\\n",\n  "datetime.py(547):         assert isinstance(s, int)\\n",\n  "datetime.py(548):         assert abs(s) <= 2 * 24 * 3600\\n",\n  "datetime.py(551):         usdouble = secondsfrac * 1e6\\n",\n  "datetime.py(552):         assert abs(usdouble) < 2.1e6    # exact value not critical\\n",\n  "datetime.py(555):         if isinstance(microseconds, float):\\n",\n  "datetime.py(562):             microseconds = int(microseconds)\\n",\n  "datetime.py(563):             seconds, microseconds = divmod(microseconds, 1000000)\\n",\n  "datetime.py(564):             days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(565):             d += days\\n",\n  "datetime.py(566):             s += seconds\\n",\n  "datetime.py(567):             microseconds = round(microseconds + usdouble)\\n",\n  "datetime.py(568):         assert isinstance(s, int)\\n",\n  "datetime.py(569):         assert isinstance(microseconds, int)\\n",\n  "datetime.py(570):         assert abs(s) <= 3 * 24 * 3600\\n",\n  "datetime.py(571):         assert abs(microseconds) < 3.1e6\\n",\n  "datetime.py(574):         seconds, us = divmod(microseconds, 1000000)\\n",\n  "datetime.py(575):         s += seconds\\n",\n  "datetime.py(576):         days, s = divmod(s, 24*3600)\\n",\n  "datetime.py(577):         d += days\\n",\n  "datetime.py(579):         assert isinstance(d, int)\\n",\n  "datetime.py(580):         assert isinstance(s, int) and 0 <= s < 24*3600\\n",\n  "datetime.py(581):         assert isinstance(us, int) and 0 <= us < 1000000\\n",\n  "datetime.py(583):         if abs(d) > 999999999:\\n",\n  "datetime.py(586):         self = object.__new__(cls)\\n",\n  "datetime.py(587):         self._days = d\\n",\n  "datetime.py(588):         self._seconds = s\\n",\n  "datetime.py(589):         self._microseconds = us\\n",\n  "datetime.py(590):         self._hashcode = -1\\n",\n  "datetime.py(591):         return self\\n",\n  "datetime.py(2312):     @staticmethod\\n",\n  "datetime.py(2313):     def _name_from_offset(delta):\\n",\n  "datetime.py(2332): timezone.utc = timezone._create(timedelta(0))\\n",\n  " --- modulename: datetime, funcname: __new__\\n",\n  "datetime.py(506):         d = s = us = 0\\n",\n  "datetime.py(509):         days += weeks*7\\n",\n  "datetime.py(510):         seconds += minutes*60 + hours*3600\\n",\n  "datetime.py(511):         microseconds += milliseconds*1000\\n",\n  "datetime.py(515):         if isinstance(days, float):\\n",\n  "datetime.py(523):             daysecondsfrac = 0.0\\n",\n  "datetime.py(524):             d = days\\n",\n  "datetime.py(525):         assert isinstance(daysecondsfrac, float)\\n",\n  "datetime.py(526):         assert abs(daysecondsfrac) <= 1.0\\n",\n  "datetime.py(527):         assert isinstance(d, int)\\n",\n  "datetime.py(528):         assert abs(s) <= 24 * 3600\\n",\n  "datetime.py(531):         if isinstance(seconds, float):\\n",\n  "datetime.py(538):             secondsfrac = daysecondsfrac\\n",\n  "datetime.py(540):         assert isinstance(secondsfrac, float)\\n",\n  "datetime.py(541):         assert abs(secondsfrac) <= 2.0\\n",\n  "datetime.py(543):         assert isinstance(seconds, int)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "datetime.py(544):         days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(545):         d += days\\n",\n  "datetime.py(546):         s += int(seconds)    # can\'t overflow\\n",\n  "datetime.py(547):         assert isinstance(s, int)\\n",\n  "datetime.py(548):         assert abs(s) <= 2 * 24 * 3600\\n",\n  "datetime.py(551):         usdouble = secondsfrac * 1e6\\n",\n  "datetime.py(552):         assert abs(usdouble) < 2.1e6    # exact value not critical\\n",\n  "datetime.py(555):         if isinstance(microseconds, float):\\n",\n  "datetime.py(562):             microseconds = int(microseconds)\\n",\n  "datetime.py(563):             seconds, microseconds = divmod(microseconds, 1000000)\\n",\n  "datetime.py(564):             days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(565):             d += days\\n",\n  "datetime.py(566):             s += seconds\\n",\n  "datetime.py(567):             microseconds = round(microseconds + usdouble)\\n",\n  "datetime.py(568):         assert isinstance(s, int)\\n",\n  "datetime.py(569):         assert isinstance(microseconds, int)\\n",\n  "datetime.py(570):         assert abs(s) <= 3 * 24 * 3600\\n",\n  "datetime.py(571):         assert abs(microseconds) < 3.1e6\\n",\n  "datetime.py(574):         seconds, us = divmod(microseconds, 1000000)\\n",\n  "datetime.py(575):         s += seconds\\n",\n  "datetime.py(576):         days, s = divmod(s, 24*3600)\\n",\n  "datetime.py(577):         d += days\\n",\n  "datetime.py(579):         assert isinstance(d, int)\\n",\n  "datetime.py(580):         assert isinstance(s, int) and 0 <= s < 24*3600\\n",\n  "datetime.py(581):         assert isinstance(us, int) and 0 <= us < 1000000\\n",\n  "datetime.py(583):         if abs(d) > 999999999:\\n",\n  "datetime.py(586):         self = object.__new__(cls)\\n",\n  "datetime.py(587):         self._days = d\\n",\n  "datetime.py(588):         self._seconds = s\\n",\n  "datetime.py(589):         self._microseconds = us\\n",\n  "datetime.py(590):         self._hashcode = -1\\n",\n  "datetime.py(591):         return self\\n",\n  " --- modulename: datetime, funcname: _create\\n",\n  "datetime.py(2238):         self = tzinfo.__new__(cls)\\n",\n  "datetime.py(2239):         self._offset = offset\\n",\n  "datetime.py(2240):         self._name = name\\n",\n  "datetime.py(2241):         return self\\n",\n  "datetime.py(2336): timezone.min = timezone._create(-timedelta(hours=23, minutes=59))\\n",\n  " --- modulename: datetime, funcname: __new__\\n",\n  "datetime.py(506):         d = s = us = 0\\n",\n  "datetime.py(509):         days += weeks*7\\n",\n  "datetime.py(510):         seconds += minutes*60 + hours*3600\\n",\n  "datetime.py(511):         microseconds += milliseconds*1000\\n",\n  "datetime.py(515):         if isinstance(days, float):\\n",\n  "datetime.py(523):             daysecondsfrac = 0.0\\n",\n  "datetime.py(524):             d = days\\n",\n  "datetime.py(525):         assert isinstance(daysecondsfrac, float)\\n",\n  "datetime.py(526):         assert abs(daysecondsfrac) <= 1.0\\n",\n  "datetime.py(527):         assert isinstance(d, int)\\n",\n  "datetime.py(528):         assert abs(s) <= 24 * 3600\\n",\n  "datetime.py(531):         if isinstance(seconds, float):\\n",\n  "datetime.py(538):             secondsfrac = daysecondsfrac\\n",\n  "datetime.py(540):         assert isinstance(secondsfrac, float)\\n",\n  "datetime.py(541):         assert abs(secondsfrac) <= 2.0\\n",\n  "datetime.py(543):         assert isinstance(seconds, int)\\n",\n  "datetime.py(544):         days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(545):         d += days\\n",\n  "datetime.py(546):         s += int(seconds)    # can\'t overflow\\n",\n  "datetime.py(547):         assert isinstance(s, int)\\n",\n  "datetime.py(548):         assert abs(s) <= 2 * 24 * 3600\\n",\n  "datetime.py(551):         usdouble = secondsfrac * 1e6\\n",\n  "datetime.py(552):         assert abs(usdouble) < 2.1e6    # exact value not critical\\n",\n  "datetime.py(555):         if isinstance(microseconds, float):\\n",\n  "datetime.py(562):             microseconds = int(microseconds)\\n",\n  "datetime.py(563):             seconds, microseconds = divmod(microseconds, 1000000)\\n",\n  "datetime.py(564):             days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(565):             d += days\\n",\n  "datetime.py(566):             s += seconds\\n",\n  "datetime.py(567):             microseconds = round(microseconds + usdouble)\\n",\n  "datetime.py(568):         assert isinstance(s, int)\\n",\n  "datetime.py(569):         assert isinstance(microseconds, int)\\n",\n  "datetime.py(570):         assert abs(s) <= 3 * 24 * 3600\\n",\n  "datetime.py(571):         assert abs(microseconds) < 3.1e6\\n",\n  "datetime.py(574):         seconds, us = divmod(microseconds, 1000000)\\n",\n  "datetime.py(575):         s += seconds\\n",\n  "datetime.py(576):         days, s = divmod(s, 24*3600)\\n",\n  "datetime.py(577):         d += days\\n",\n  "datetime.py(579):         assert isinstance(d, int)\\n",\n  "datetime.py(580):         assert isinstance(s, int) and 0 <= s < 24*3600\\n",\n  "datetime.py(581):         assert isinstance(us, int) and 0 <= us < 1000000\\n",\n  "datetime.py(583):         if abs(d) > 999999999:\\n",\n  "datetime.py(586):         self = object.__new__(cls)\\n",\n  "datetime.py(587):         self._days = d\\n",\n  "datetime.py(588):         self._seconds = s\\n",\n  "datetime.py(589):         self._microseconds = us\\n",\n  "datetime.py(590):         self._hashcode = -1\\n",\n  "datetime.py(591):         return self\\n",\n  " --- modulename: datetime, funcname: __neg__\\n",\n  "datetime.py(668):         return timedelta(-self._days,\\n",\n  "datetime.py(669):                          -self._seconds,\\n",\n  "datetime.py(670):                          -self._microseconds)\\n",\n  "datetime.py(668):         return timedelta(-self._days,\\n",\n  " --- modulename: datetime, funcname: __new__\\n",\n  "datetime.py(506):         d = s = us = 0\\n",\n  "datetime.py(509):         days += weeks*7\\n",\n  "datetime.py(510):         seconds += minutes*60 + hours*3600\\n",\n  "datetime.py(511):         microseconds += milliseconds*1000\\n",\n  "datetime.py(515):         if isinstance(days, float):\\n",\n  "datetime.py(523):             daysecondsfrac = 0.0\\n",\n  "datetime.py(524):             d = days\\n",\n  "datetime.py(525):         assert isinstance(daysecondsfrac, float)\\n",\n  "datetime.py(526):         assert abs(daysecondsfrac) <= 1.0\\n",\n  "datetime.py(527):         assert isinstance(d, int)\\n",\n  "datetime.py(528):         assert abs(s) <= 24 * 3600\\n",\n  "datetime.py(531):         if isinstance(seconds, float):\\n",\n  "datetime.py(538):             secondsfrac = daysecondsfrac\\n",\n  "datetime.py(540):         assert isinstance(secondsfrac, float)\\n",\n  "datetime.py(541):         assert abs(secondsfrac) <= 2.0\\n",\n  "datetime.py(543):         assert isinstance(seconds, int)\\n",\n  "datetime.py(544):         days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(545):         d += days\\n",\n  "datetime.py(546):         s += int(seconds)    # can\'t overflow\\n",\n  "datetime.py(547):         assert isinstance(s, int)\\n",\n  "datetime.py(548):         assert abs(s) <= 2 * 24 * 3600\\n",\n  "datetime.py(551):         usdouble = secondsfrac * 1e6\\n",\n  "datetime.py(552):         assert abs(usdouble) < 2.1e6    # exact value not critical\\n",\n  "datetime.py(555):         if isinstance(microseconds, float):\\n",\n  "datetime.py(562):             microseconds = int(microseconds)\\n",\n  "datetime.py(563):             seconds, microseconds = divmod(microseconds, 1000000)\\n",\n  "datetime.py(564):             days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(565):             d += days\\n",\n  "datetime.py(566):             s += seconds\\n",\n  "datetime.py(567):             microseconds = round(microseconds + usdouble)\\n",\n  "datetime.py(568):         assert isinstance(s, int)\\n",\n  "datetime.py(569):         assert isinstance(microseconds, int)\\n",\n  "datetime.py(570):         assert abs(s) <= 3 * 24 * 3600\\n",\n  "datetime.py(571):         assert abs(microseconds) < 3.1e6\\n",\n  "datetime.py(574):         seconds, us = divmod(microseconds, 1000000)\\n",\n  "datetime.py(575):         s += seconds\\n",\n  "datetime.py(576):         days, s = divmod(s, 24*3600)\\n",\n  "datetime.py(577):         d += days\\n",\n  "datetime.py(579):         assert isinstance(d, int)\\n",\n  "datetime.py(580):         assert isinstance(s, int) and 0 <= s < 24*3600\\n",\n  "datetime.py(581):         assert isinstance(us, int) and 0 <= us < 1000000\\n",\n  "datetime.py(583):         if abs(d) > 999999999:\\n",\n  "datetime.py(586):         self = object.__new__(cls)\\n",\n  "datetime.py(587):         self._days = d\\n",\n  "datetime.py(588):         self._seconds = s\\n",\n  "datetime.py(589):         self._microseconds = us\\n",\n  "datetime.py(590):         self._hashcode = -1\\n",\n  "datetime.py(591):         return self\\n",\n  " --- modulename: datetime, funcname: _create\\n",\n  "datetime.py(2238):         self = tzinfo.__new__(cls)\\n",\n  "datetime.py(2239):         self._offset = offset\\n",\n  "datetime.py(2240):         self._name = name\\n",\n  "datetime.py(2241):         return self\\n",\n  "datetime.py(2337): timezone.max = timezone._create(timedelta(hours=23, minutes=59))\\n",\n  " --- modulename: datetime, funcname: __new__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "datetime.py(506):         d = s = us = 0\\n",\n  "datetime.py(509):         days += weeks*7\\n",\n  "datetime.py(510):         seconds += minutes*60 + hours*3600\\n",\n  "datetime.py(511):         microseconds += milliseconds*1000\\n",\n  "datetime.py(515):         if isinstance(days, float):\\n",\n  "datetime.py(523):             daysecondsfrac = 0.0\\n",\n  "datetime.py(524):             d = days\\n",\n  "datetime.py(525):         assert isinstance(daysecondsfrac, float)\\n",\n  "datetime.py(526):         assert abs(daysecondsfrac) <= 1.0\\n",\n  "datetime.py(527):         assert isinstance(d, int)\\n",\n  "datetime.py(528):         assert abs(s) <= 24 * 3600\\n",\n  "datetime.py(531):         if isinstance(seconds, float):\\n",\n  "datetime.py(538):             secondsfrac = daysecondsfrac\\n",\n  "datetime.py(540):         assert isinstance(secondsfrac, float)\\n",\n  "datetime.py(541):         assert abs(secondsfrac) <= 2.0\\n",\n  "datetime.py(543):         assert isinstance(seconds, int)\\n",\n  "datetime.py(544):         days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(545):         d += days\\n",\n  "datetime.py(546):         s += int(seconds)    # can\'t overflow\\n",\n  "datetime.py(547):         assert isinstance(s, int)\\n",\n  "datetime.py(548):         assert abs(s) <= 2 * 24 * 3600\\n",\n  "datetime.py(551):         usdouble = secondsfrac * 1e6\\n",\n  "datetime.py(552):         assert abs(usdouble) < 2.1e6    # exact value not critical\\n",\n  "datetime.py(555):         if isinstance(microseconds, float):\\n",\n  "datetime.py(562):             microseconds = int(microseconds)\\n",\n  "datetime.py(563):             seconds, microseconds = divmod(microseconds, 1000000)\\n",\n  "datetime.py(564):             days, seconds = divmod(seconds, 24*3600)\\n",\n  "datetime.py(565):             d += days\\n",\n  "datetime.py(566):             s += seconds\\n",\n  "datetime.py(567):             microseconds = round(microseconds + usdouble)\\n",\n  "datetime.py(568):         assert isinstance(s, int)\\n",\n  "datetime.py(569):         assert isinstance(microseconds, int)\\n",\n  "datetime.py(570):         assert abs(s) <= 3 * 24 * 3600\\n",\n  "datetime.py(571):         assert abs(microseconds) < 3.1e6\\n",\n  "datetime.py(574):         seconds, us = divmod(microseconds, 1000000)\\n",\n  "datetime.py(575):         s += seconds\\n",\n  "datetime.py(576):         days, s = divmod(s, 24*3600)\\n",\n  "datetime.py(577):         d += days\\n",\n  "datetime.py(579):         assert isinstance(d, int)\\n",\n  "datetime.py(580):         assert isinstance(s, int) and 0 <= s < 24*3600\\n",\n  "datetime.py(581):         assert isinstance(us, int) and 0 <= us < 1000000\\n",\n  "datetime.py(583):         if abs(d) > 999999999:\\n",\n  "datetime.py(586):         self = object.__new__(cls)\\n",\n  "datetime.py(587):         self._days = d\\n",\n  "datetime.py(588):         self._seconds = s\\n",\n  "datetime.py(589):         self._microseconds = us\\n",\n  "datetime.py(590):         self._hashcode = -1\\n",\n  "datetime.py(591):         return self\\n",\n  " --- modulename: datetime, funcname: _create\\n",\n  "datetime.py(2238):         self = tzinfo.__new__(cls)\\n",\n  "datetime.py(2239):         self._offset = offset\\n",\n  "datetime.py(2240):         self._name = name\\n",\n  "datetime.py(2241):         return self\\n",\n  "datetime.py(2338): _EPOCH = datetime(1970, 1, 1, tzinfo=timezone.utc)\\n",\n  " --- modulename: datetime, funcname: __new__\\n",\n  "datetime.py(1604):         if (isinstance(year, (bytes, str)) and len(year) == 10 and\\n",\n  "datetime.py(1620):         year, month, day = _check_date_fields(year, month, day)\\n",\n  " --- modulename: datetime, funcname: _check_date_fields\\n",\n  "datetime.py(416):     year = _check_int_field(year)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(417):     month = _check_int_field(month)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(418):     day = _check_int_field(day)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(419):     if not MINYEAR <= year <= MAXYEAR:\\n",\n  "datetime.py(421):     if not 1 <= month <= 12:\\n",\n  "datetime.py(423):     dim = _days_in_month(year, month)\\n",\n  " --- modulename: datetime, funcname: _days_in_month\\n",\n  "datetime.py(52):     assert 1 <= month <= 12, month\\n",\n  "datetime.py(53):     if month == 2 and _is_leap(year):\\n",\n  "datetime.py(55):     return _DAYS_IN_MONTH[month]\\n",\n  "datetime.py(424):     if not 1 <= day <= dim:\\n",\n  "datetime.py(426):     return year, month, day\\n",\n  "datetime.py(1621):         hour, minute, second, microsecond, fold = _check_time_fields(\\n",\n  "datetime.py(1622):             hour, minute, second, microsecond, fold)\\n",\n  "datetime.py(1621):         hour, minute, second, microsecond, fold = _check_time_fields(\\n",\n  " --- modulename: datetime, funcname: _check_time_fields\\n",\n  "datetime.py(429):     hour = _check_int_field(hour)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(430):     minute = _check_int_field(minute)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(431):     second = _check_int_field(second)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(432):     microsecond = _check_int_field(microsecond)\\n",\n  " --- modulename: datetime, funcname: _check_int_field\\n",\n  "datetime.py(384):     if isinstance(value, int):\\n",\n  "datetime.py(385):         return value\\n",\n  "datetime.py(433):     if not 0 <= hour <= 23:\\n",\n  "datetime.py(435):     if not 0 <= minute <= 59:\\n",\n  "datetime.py(437):     if not 0 <= second <= 59:\\n",\n  "datetime.py(439):     if not 0 <= microsecond <= 999999:\\n",\n  "datetime.py(441):     if fold not in (0, 1):\\n",\n  "datetime.py(443):     return hour, minute, second, microsecond, fold\\n",\n  "datetime.py(1623):         _check_tzinfo_arg(tzinfo)\\n",\n  " --- modulename: datetime, funcname: _check_tzinfo_arg\\n",\n  "datetime.py(446):     if tz is not None and not isinstance(tz, tzinfo):\\n",\n  "datetime.py(1624):         self = object.__new__(cls)\\n",\n  "datetime.py(1625):         self._year = year\\n",\n  "datetime.py(1626):         self._month = month\\n",\n  "datetime.py(1627):         self._day = day\\n",\n  "datetime.py(1628):         self._hour = hour\\n",\n  "datetime.py(1629):         self._minute = minute\\n",\n  "datetime.py(1630):         self._second = second\\n",\n  "datetime.py(1631):         self._microsecond = microsecond\\n",\n  "datetime.py(1632):         self._tzinfo = tzinfo\\n",\n  "datetime.py(1633):         self._hashcode = -1\\n",\n  "datetime.py(1634):         self._fold = fold\\n",\n  "datetime.py(1635):         return self\\n",\n  "datetime.py(2536): try:\\n",\n  "datetime.py(2537):     from _datetime import *\\n",\n  " --- modulename: _bootstrap, funcname: _find_and_load\\n",\n  "<frozen importlib._bootstrap>(1004):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(153): <frozen importlib._bootstrap>(154):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(157):  --- modulename: _bootstrap, funcname: _get_module_lock\\n",\n  "<frozen importlib._bootstrap>(172): <frozen importlib._bootstrap>(173): <frozen importlib._bootstrap>(174): <frozen importlib._bootstrap>(175): <frozen importlib._bootstrap>(176): <frozen importlib._bootstrap>(177): <frozen importlib._bootstrap>(179): <frozen importlib._bootstrap>(180): <frozen importlib._bootstrap>(183):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(59): <frozen importlib._bootstrap>(60): <frozen importlib._bootstrap>(61): <frozen importlib._bootstrap>(62): <frozen importlib._bootstrap>(63): <frozen importlib._bootstrap>(64): <frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(196): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(158):  --- modulename: _bootstrap, funcname: acquire\\n",\n  "<frozen importlib._bootstrap>(93): <frozen importlib._bootstrap>(94): <frozen importlib._bootstrap>(95): <frozen importlib._bootstrap>(97): <frozen importlib._bootstrap>(98): <frozen importlib._bootstrap>(99): <frozen importlib._bootstrap>(100): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(1005): <frozen importlib._bootstrap>(1006): <frozen importlib._bootstrap>(1007):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(968): <frozen importlib._bootstrap>(969): <frozen importlib._bootstrap>(970): <frozen importlib._bootstrap>(982):  --- modulename: _bootstrap, funcname: _find_spec\\n",\n  "<frozen importlib._bootstrap>(903): <frozen importlib._bootstrap>(904): <frozen importlib._bootstrap>(909): <frozen importlib._bootstrap>(915): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: __init__, funcname: find_spec\\n",\n  "__init__.py(85):         if path is not None:\\n",\n  "__init__.py(88):         method_name = \'spec_for_{fullname}\'.format(**locals())\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  "__init__.py(90):         return method()\\n",\n  " --- modulename: __init__, funcname: <lambda>\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  " --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(738): <frozen importlib._bootstrap>(740): <frozen importlib._bootstrap>(743):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(813): <frozen importlib._bootstrap>(816):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1421): <frozen importlib._bootstrap_external>(1422): <frozen importlib._bootstrap_external>(1423):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1388): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1555):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n",\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(151): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1557): <frozen importlib._bootstrap_external>(1556):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1510):  --- modulename: _bootstrap_external, funcname: __init__\\n",\n  "<frozen importlib._bootstrap_external>(1156): <frozen importlib._bootstrap_external>(1157):  --- modulename: _bootstrap_external, funcname: _path_isabs\\n",\n  "<frozen importlib._bootstrap_external>(177): <frozen importlib._bootstrap_external>(1162): <frozen importlib._bootstrap_external>(1511): <frozen importlib._bootstrap_external>(1512): <frozen importlib._bootstrap_external>(1511):  --- modulename: _bootstrap_external, funcname: spec_from_file_location\\n",\n  "<frozen importlib._bootstrap_external>(708): <frozen importlib._bootstrap_external>(720): <frozen importlib._bootstrap_external>(728):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(353): <frozen importlib._bootstrap>(354): <frozen importlib._bootstrap>(355): <frozen importlib._bootstrap>(356): <frozen importlib._bootstrap>(357): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap_external>(729): <frozen importlib._bootstrap_external>(732): <frozen importlib._bootstrap_external>(742): <frozen importlib._bootstrap_external>(753): <frozen importlib._bootstrap_external>(754): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1400): <frozen importlib._bootstrap_external>(1401): <frozen importlib._bootstrap_external>(1424): <frozen importlib._bootstrap_external>(1426): <frozen importlib._bootstrap_external>(1437):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(928): <frozen importlib._bootstrap>(943): <frozen importlib._bootstrap>(983): <frozen importlib._bootstrap>(986):  --- modulename: _bootstrap, funcname: _load_unlocked\\n",\n  "<frozen importlib._bootstrap>(661): <frozen importlib._bootstrap>(663): <frozen importlib._bootstrap>(666):  --- modulename: _bootstrap, funcname: module_from_spec\\n",\n  "<frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(562): <frozen importlib._bootstrap>(565):  --- modulename: _bootstrap_external, funcname: create_module\\n",\n  "<frozen importlib._bootstrap_external>(1173): <frozen importlib._bootstrap_external>(1174): <frozen importlib._bootstrap_external>(1173):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228): <frozen importlib._bootstrap_external>(1175): <frozen importlib._bootstrap_external>(1176): <frozen importlib._bootstrap_external>(1175):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1177): <frozen importlib._bootstrap>(569): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap, funcname: _init_module_attrs\\n",\n  "<frozen importlib._bootstrap>(490): <frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(497): <frozen importlib._bootstrap>(498): <frozen importlib._bootstrap>(519): <frozen importlib._bootstrap>(520): <frozen importlib._bootstrap>(524): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526):  --- modulename: _bootstrap, funcname: parent\\n",\n  "<frozen importlib._bootstrap>(401): <frozen importlib._bootstrap>(402): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(535): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(542):  --- modulename: _bootstrap, funcname: has_location\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(543): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(388): <frozen importlib._bootstrap>(389): <frozen importlib._bootstrap>(391):  --- modulename: _bootstrap_external, funcname: _get_cached\\n",\n  "<frozen importlib._bootstrap_external>(492): <frozen importlib._bootstrap_external>(497): <frozen importlib._bootstrap_external>(500): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(572): <frozen importlib._bootstrap>(671): <frozen importlib._bootstrap>(672): <frozen importlib._bootstrap>(673): <frozen importlib._bootstrap>(674): <frozen importlib._bootstrap>(675): <frozen importlib._bootstrap>(680):  --- modulename: _bootstrap_external, funcname: exec_module\\n",\n  "<frozen importlib._bootstrap_external>(1181):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228): <frozen importlib._bootstrap_external>(1182): <frozen importlib._bootstrap_external>(1183): <frozen importlib._bootstrap_external>(1182):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap>(691): <frozen importlib._bootstrap>(692): <frozen importlib._bootstrap>(693):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap>(695): <frozen importlib._bootstrap>(697): <frozen importlib._bootstrap>(987): <frozen importlib._bootstrap>(996):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(161):  --- modulename: _bootstrap, funcname: release\\n",\n  "<frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(115): <frozen importlib._bootstrap>(117): <frozen importlib._bootstrap>(118): <frozen importlib._bootstrap>(119): <frozen importlib._bootstrap>(120): <frozen importlib._bootstrap>(121):  --- modulename: _bootstrap, funcname: cb\\n",\n  "<frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(191): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(194): datetime.py(2542):     del (_DAYNAMES, _DAYS_BEFORE_MONTH, _DAYS_IN_MONTH, _DI100Y, _DI400Y,\\n",\n  "datetime.py(2543):          _DI4Y, _EPOCH, _MAXORDINAL, _MONTHNAMES, _build_struct_time,\\n",\n  "datetime.py(2544):          _check_date_fields, _check_int_field, _check_time_fields,\\n",\n  "datetime.py(2545):          _check_tzinfo_arg, _check_tzname, _check_utc_offset, _cmp, _cmperror,\\n",\n  "datetime.py(2546):          _date_class, _days_before_month, _days_before_year, _days_in_month,\\n",\n  "datetime.py(2547):          _format_time, _format_offset, _is_leap, _isoweek1monday, _math,\\n",\n  "datetime.py(2548):          _ord2ymd, _time, _time_class, _tzinfo_class, _wrap_strftime, _ymd2ord,\\n",\n  "datetime.py(2549):          _divide_and_round, _parse_isoformat_date, _parse_isoformat_time,\\n",\n  "datetime.py(2550):          _parse_hh_mm_ss_ff, _IsoCalendarDate)\\n",\n  "datetime.py(2555):     from _datetime import __doc__\\n",\n  "<frozen importlib._bootstrap>(691): <frozen importlib._bootstrap>(692): <frozen importlib._bootstrap>(693):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap>(695): <frozen importlib._bootstrap>(697): <frozen importlib._bootstrap>(987): <frozen importlib._bootstrap>(996):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(161):  --- modulename: _bootstrap, funcname: release\\n",\n  "<frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(115): <frozen importlib._bootstrap>(117): <frozen importlib._bootstrap>(118): <frozen importlib._bootstrap>(119): <frozen importlib._bootstrap>(120): <frozen importlib._bootstrap>(121):  --- modulename: _bootstrap, funcname: cb\\n",\n  "<frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(191): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(194): debug.py(52): import enum\\n",\n  "debug.py(53): import inspect\\n",\n  "debug.py(54): from itertools import zip_longest\\n",\n  "debug.py(55): import logging\\n",\n  " --- modulename: _bootstrap, funcname: _find_and_load\\n",\n  "<frozen importlib._bootstrap>(1004):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(153): <frozen importlib._bootstrap>(154):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(157):  --- modulename: _bootstrap, funcname: _get_module_lock\\n",\n  "<frozen importlib._bootstrap>(172): <frozen importlib._bootstrap>(173): <frozen importlib._bootstrap>(174): <frozen importlib._bootstrap>(175): <frozen importlib._bootstrap>(176): <frozen importlib._bootstrap>(177): <frozen importlib._bootstrap>(179): <frozen importlib._bootstrap>(180): <frozen importlib._bootstrap>(183):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(59): <frozen importlib._bootstrap>(60): <frozen importlib._bootstrap>(61): <frozen importlib._bootstrap>(62): <frozen importlib._bootstrap>(63): <frozen importlib._bootstrap>(64): <frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(196): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(158):  --- modulename: _bootstrap, funcname: acquire\\n",\n  "<frozen importlib._bootstrap>(93): <frozen importlib._bootstrap>(94): <frozen importlib._bootstrap>(95): <frozen importlib._bootstrap>(97): <frozen importlib._bootstrap>(98): <frozen importlib._bootstrap>(99): <frozen importlib._bootstrap>(100): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(1005): <frozen importlib._bootstrap>(1006): <frozen importlib._bootstrap>(1007):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked\\n",\n  "<frozen importlib._bootstrap>(968): <frozen importlib._bootstrap>(969): <frozen importlib._bootstrap>(970): <frozen importlib._bootstrap>(982):  --- modulename: _bootstrap, funcname: _find_spec\\n",\n  "<frozen importlib._bootstrap>(903): <frozen importlib._bootstrap>(904): <frozen importlib._bootstrap>(909): <frozen importlib._bootstrap>(915): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: __init__, funcname: find_spec\\n",\n  "__init__.py(85):         if path is not None:\\n",\n  "__init__.py(88):         method_name = \'spec_for_{fullname}\'.format(**locals())\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  "__init__.py(90):         return method()\\n",\n  " --- modulename: __init__, funcname: <lambda>\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  " --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(738): <frozen importlib._bootstrap>(740): <frozen importlib._bootstrap>(743):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(813): <frozen importlib._bootstrap>(816):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1421): <frozen importlib._bootstrap_external>(1422): <frozen importlib._bootstrap_external>(1423):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1388): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1537):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1538): <frozen importlib._bootstrap_external>(1539): <frozen importlib._bootstrap_external>(1540):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1541):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n",\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(149): <frozen importlib._bootstrap_external>(150): <frozen importlib._bootstrap_external>(1538): <frozen importlib._bootstrap_external>(1539): <frozen importlib._bootstrap_external>(1540):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1541):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n",\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(149): <frozen importlib._bootstrap_external>(150): <frozen importlib._bootstrap_external>(1538): <frozen importlib._bootstrap_external>(1539): <frozen importlib._bootstrap_external>(1540):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1541):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n",\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(149): <frozen importlib._bootstrap_external>(150): <frozen importlib._bootstrap_external>(1538): <frozen importlib._bootstrap_external>(1539): <frozen importlib._bootstrap_external>(1540):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1541):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(151): <frozen importlib._bootstrap_external>(1542):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1510):  --- modulename: _bootstrap_external, funcname: __init__\\n",\n  "<frozen importlib._bootstrap_external>(1009): <frozen importlib._bootstrap_external>(1010): <frozen importlib._bootstrap_external>(1511): <frozen importlib._bootstrap_external>(1512): <frozen importlib._bootstrap_external>(1511):  --- modulename: _bootstrap_external, funcname: spec_from_file_location\\n",\n  "<frozen importlib._bootstrap_external>(708): <frozen importlib._bootstrap_external>(720): <frozen importlib._bootstrap_external>(728):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(353): <frozen importlib._bootstrap>(354): <frozen importlib._bootstrap>(355): <frozen importlib._bootstrap>(356): <frozen importlib._bootstrap>(357): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap_external>(729): <frozen importlib._bootstrap_external>(732): <frozen importlib._bootstrap_external>(742): <frozen importlib._bootstrap_external>(753): <frozen importlib._bootstrap_external>(754): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1400): <frozen importlib._bootstrap_external>(1401): <frozen importlib._bootstrap_external>(1424): <frozen importlib._bootstrap_external>(1426): <frozen importlib._bootstrap_external>(1437):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(928): <frozen importlib._bootstrap>(943): <frozen importlib._bootstrap>(983): <frozen importlib._bootstrap>(986):  --- modulename: _bootstrap, funcname: _load_unlocked\\n",\n  "<frozen importlib._bootstrap>(661): <frozen importlib._bootstrap>(663): <frozen importlib._bootstrap>(666):  --- modulename: _bootstrap, funcname: module_from_spec\\n",\n  "<frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(562): <frozen importlib._bootstrap>(565):  --- modulename: _bootstrap_external, funcname: create_module\\n",\n  "<frozen importlib._bootstrap_external>(842): <frozen importlib._bootstrap>(569): <frozen importlib._bootstrap>(570):  --- modulename: _bootstrap, funcname: _new_module\\n",\n  "<frozen importlib._bootstrap>(36): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap, funcname: _init_module_attrs\\n",\n  "<frozen importlib._bootstrap>(490): <frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(497): <frozen importlib._bootstrap>(498): <frozen importlib._bootstrap>(519): <frozen importlib._bootstrap>(520): <frozen importlib._bootstrap>(524): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526):  --- modulename: _bootstrap, funcname: parent\\n",\n  "<frozen importlib._bootstrap>(401): <frozen importlib._bootstrap>(404): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(535): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(537): <frozen importlib._bootstrap>(538): <frozen importlib._bootstrap>(542):  --- modulename: _bootstrap, funcname: has_location\\n",\n  "<frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(543): <frozen importlib._bootstrap>(544): <frozen importlib._bootstrap>(545): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(388): <frozen importlib._bootstrap>(389): <frozen importlib._bootstrap>(391):  --- modulename: _bootstrap_external, funcname: _get_cached\\n",\n  "<frozen importlib._bootstrap_external>(492): <frozen importlib._bootstrap_external>(493): <frozen importlib._bootstrap_external>(494):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(552):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(572): <frozen importlib._bootstrap>(671): <frozen importlib._bootstrap>(672): <frozen importlib._bootstrap>(673): <frozen importlib._bootstrap>(674): <frozen importlib._bootstrap>(675): <frozen importlib._bootstrap>(680):  --- modulename: _bootstrap_external, funcname: exec_module\\n",\n  "<frozen importlib._bootstrap_external>(846):  --- modulename: _bootstrap_external, funcname: get_code\\n",\n  "<frozen importlib._bootstrap_external>(923):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper\\n",\n  "<frozen importlib._bootstrap_external>(524): <frozen importlib._bootstrap_external>(526): <frozen importlib._bootstrap_external>(529):  --- modulename: _bootstrap_external, funcname: get_filename\\n",\n  "<frozen importlib._bootstrap_external>(1034): <frozen importlib._bootstrap_external>(924): <frozen importlib._bootstrap_external>(925): <frozen importlib._bootstrap_external>(926): <frozen importlib._bootstrap_external>(927): <frozen importlib._bootstrap_external>(928): <frozen importlib._bootstrap_external>(929): <frozen importlib._bootstrap_external>(930):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(934): <frozen importlib._bootstrap_external>(935):  --- modulename: _bootstrap_external, funcname: path_stats\\n",\n  "<frozen importlib._bootstrap_external>(1079):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1080): <frozen importlib._bootstrap_external>(939): <frozen importlib._bootstrap_external>(940): <frozen importlib._bootstrap_external>(941):  --- modulename: _bootstrap_external, funcname: get_data\\n",\n  "<frozen importlib._bootstrap_external>(1038): <frozen importlib._bootstrap_external>(1039): <frozen importlib._bootstrap_external>(1040): <frozen importlib._bootstrap_external>(946): <frozen importlib._bootstrap_external>(947): <frozen importlib._bootstrap_external>(945): <frozen importlib._bootstrap_external>(949): <frozen importlib._bootstrap_external>(950):  --- modulename: _bootstrap_external, funcname: _classify_pyc\\n",\n  "<frozen importlib._bootstrap_external>(576): <frozen importlib._bootstrap_external>(577): <frozen importlib._bootstrap_external>(581): <frozen importlib._bootstrap_external>(585):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(587): <frozen importlib._bootstrap_external>(590): <frozen importlib._bootstrap_external>(951): <frozen importlib._bootstrap_external>(952): <frozen importlib._bootstrap_external>(953): <frozen importlib._bootstrap_external>(966): <frozen importlib._bootstrap_external>(967): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969): <frozen importlib._bootstrap_external>(970): <frozen importlib._bootstrap_external>(971): <frozen importlib._bootstrap_external>(966):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc\\n",\n  "<frozen importlib._bootstrap_external>(612):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(617):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(976): <frozen importlib._bootstrap_external>(977): <frozen importlib._bootstrap_external>(976):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(978): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(978):  --- modulename: _bootstrap_external, funcname: _compile_bytecode\\n",\n  "<frozen importlib._bootstrap_external>(647): <frozen importlib._bootstrap_external>(648): <frozen importlib._bootstrap_external>(649):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(650): <frozen importlib._bootstrap_external>(651): <frozen importlib._bootstrap_external>(652): <frozen importlib._bootstrap_external>(847): <frozen importlib._bootstrap_external>(850):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228):  --- modulename: __init__, funcname: <module>\\n",\n  "__init__.py(17): \\"\\"\\"\\n",\n  "__init__.py(26): import sys, os, time, io, re, traceback, warnings, weakref, collections.abc\\n",\n  " --- modulename: _bootstrap, funcname: _find_and_load\\n",\n  "<frozen importlib._bootstrap>(1004):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(153): <frozen importlib._bootstrap>(154):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(157):  --- modulename: _bootstrap, funcname: _get_module_lock\\n",\n  "<frozen importlib._bootstrap>(172): <frozen importlib._bootstrap>(173): <frozen importlib._bootstrap>(174): <frozen importlib._bootstrap>(175): <frozen importlib._bootstrap>(176): <frozen importlib._bootstrap>(177): <frozen importlib._bootstrap>(179): <frozen importlib._bootstrap>(180): <frozen importlib._bootstrap>(183):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(59): <frozen importlib._bootstrap>(60): <frozen importlib._bootstrap>(61): <frozen importlib._bootstrap>(62): <frozen importlib._bootstrap>(63): <frozen importlib._bootstrap>(64): <frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(196): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(158):  --- modulename: _bootstrap, funcname: acquire\\n",\n  "<frozen importlib._bootstrap>(93): <frozen importlib._bootstrap>(94): <frozen importlib._bootstrap>(95): <frozen importlib._bootstrap>(97): <frozen importlib._bootstrap>(98): <frozen importlib._bootstrap>(99): <frozen importlib._bootstrap>(100): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(1005): <frozen importlib._bootstrap>(1006): <frozen importlib._bootstrap>(1007):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked\\n",\n  "<frozen importlib._bootstrap>(968): <frozen importlib._bootstrap>(969): <frozen importlib._bootstrap>(970): <frozen importlib._bootstrap>(982):  --- modulename: _bootstrap, funcname: _find_spec\\n",\n  "<frozen importlib._bootstrap>(903): <frozen importlib._bootstrap>(904): <frozen importlib._bootstrap>(909): <frozen importlib._bootstrap>(915): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: __init__, funcname: find_spec\\n",\n  "__init__.py(85):         if path is not None:\\n",\n  "__init__.py(88):         method_name = \'spec_for_{fullname}\'.format(**locals())\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  "__init__.py(90):         return method()\\n",\n  " --- modulename: __init__, funcname: <lambda>\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  " --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(738): <frozen importlib._bootstrap>(740): <frozen importlib._bootstrap>(743):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(813): <frozen importlib._bootstrap>(816):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1421): <frozen importlib._bootstrap_external>(1422): <frozen importlib._bootstrap_external>(1423):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1388): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1555):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n",\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(151): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1557): <frozen importlib._bootstrap_external>(1556):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1510):  --- modulename: _bootstrap_external, funcname: __init__\\n",\n  "<frozen importlib._bootstrap_external>(1009): <frozen importlib._bootstrap_external>(1010): <frozen importlib._bootstrap_external>(1511): <frozen importlib._bootstrap_external>(1512): <frozen importlib._bootstrap_external>(1511):  --- modulename: _bootstrap_external, funcname: spec_from_file_location\\n",\n  "<frozen importlib._bootstrap_external>(708): <frozen importlib._bootstrap_external>(720): <frozen importlib._bootstrap_external>(728):  --- modulename: _bootstrap, funcname: __init__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(353): <frozen importlib._bootstrap>(354): <frozen importlib._bootstrap>(355): <frozen importlib._bootstrap>(356): <frozen importlib._bootstrap>(357): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap_external>(729): <frozen importlib._bootstrap_external>(732): <frozen importlib._bootstrap_external>(742): <frozen importlib._bootstrap_external>(753): <frozen importlib._bootstrap_external>(754): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1400): <frozen importlib._bootstrap_external>(1401): <frozen importlib._bootstrap_external>(1424): <frozen importlib._bootstrap_external>(1426): <frozen importlib._bootstrap_external>(1437):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(928): <frozen importlib._bootstrap>(943): <frozen importlib._bootstrap>(983): <frozen importlib._bootstrap>(986):  --- modulename: _bootstrap, funcname: _load_unlocked\\n",\n  "<frozen importlib._bootstrap>(661): <frozen importlib._bootstrap>(663): <frozen importlib._bootstrap>(666):  --- modulename: _bootstrap, funcname: module_from_spec\\n",\n  "<frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(562): <frozen importlib._bootstrap>(565):  --- modulename: _bootstrap_external, funcname: create_module\\n",\n  "<frozen importlib._bootstrap_external>(842): <frozen importlib._bootstrap>(569): <frozen importlib._bootstrap>(570):  --- modulename: _bootstrap, funcname: _new_module\\n",\n  "<frozen importlib._bootstrap>(36): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap, funcname: _init_module_attrs\\n",\n  "<frozen importlib._bootstrap>(490): <frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(497): <frozen importlib._bootstrap>(498): <frozen importlib._bootstrap>(519): <frozen importlib._bootstrap>(520): <frozen importlib._bootstrap>(524): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526):  --- modulename: _bootstrap, funcname: parent\\n",\n  "<frozen importlib._bootstrap>(401): <frozen importlib._bootstrap>(402): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(535): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(542):  --- modulename: _bootstrap, funcname: has_location\\n",\n  "<frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(543): <frozen importlib._bootstrap>(544): <frozen importlib._bootstrap>(545): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(388): <frozen importlib._bootstrap>(389): <frozen importlib._bootstrap>(391):  --- modulename: _bootstrap_external, funcname: _get_cached\\n",\n  "<frozen importlib._bootstrap_external>(492): <frozen importlib._bootstrap_external>(493): <frozen importlib._bootstrap_external>(494):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(552):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(572): <frozen importlib._bootstrap>(671): <frozen importlib._bootstrap>(672): <frozen importlib._bootstrap>(673): <frozen importlib._bootstrap>(674): <frozen importlib._bootstrap>(675): <frozen importlib._bootstrap>(680):  --- modulename: _bootstrap_external, funcname: exec_module\\n",\n  "<frozen importlib._bootstrap_external>(846):  --- modulename: _bootstrap_external, funcname: get_code\\n",\n  "<frozen importlib._bootstrap_external>(923):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper\\n",\n  "<frozen importlib._bootstrap_external>(524): <frozen importlib._bootstrap_external>(526): <frozen importlib._bootstrap_external>(529):  --- modulename: _bootstrap_external, funcname: get_filename\\n",\n  "<frozen importlib._bootstrap_external>(1034): <frozen importlib._bootstrap_external>(924): <frozen importlib._bootstrap_external>(925): <frozen importlib._bootstrap_external>(926): <frozen importlib._bootstrap_external>(927): <frozen importlib._bootstrap_external>(928): <frozen importlib._bootstrap_external>(929): <frozen importlib._bootstrap_external>(930):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(934): <frozen importlib._bootstrap_external>(935):  --- modulename: _bootstrap_external, funcname: path_stats\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(1079):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1080): <frozen importlib._bootstrap_external>(939): <frozen importlib._bootstrap_external>(940): <frozen importlib._bootstrap_external>(941):  --- modulename: _bootstrap_external, funcname: get_data\\n",\n  "<frozen importlib._bootstrap_external>(1038): <frozen importlib._bootstrap_external>(1039): <frozen importlib._bootstrap_external>(1040): <frozen importlib._bootstrap_external>(946): <frozen importlib._bootstrap_external>(947): <frozen importlib._bootstrap_external>(945): <frozen importlib._bootstrap_external>(949): <frozen importlib._bootstrap_external>(950):  --- modulename: _bootstrap_external, funcname: _classify_pyc\\n",\n  "<frozen importlib._bootstrap_external>(576): <frozen importlib._bootstrap_external>(577): <frozen importlib._bootstrap_external>(581): <frozen importlib._bootstrap_external>(585):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(587): <frozen importlib._bootstrap_external>(590): <frozen importlib._bootstrap_external>(951): <frozen importlib._bootstrap_external>(952): <frozen importlib._bootstrap_external>(953): <frozen importlib._bootstrap_external>(966): <frozen importlib._bootstrap_external>(967): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969): <frozen importlib._bootstrap_external>(970): <frozen importlib._bootstrap_external>(971): <frozen importlib._bootstrap_external>(966):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc\\n",\n  "<frozen importlib._bootstrap_external>(612):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(617):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(976): <frozen importlib._bootstrap_external>(977): <frozen importlib._bootstrap_external>(976):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(978): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(978):  --- modulename: _bootstrap_external, funcname: _compile_bytecode\\n",\n  "<frozen importlib._bootstrap_external>(647): <frozen importlib._bootstrap_external>(648): <frozen importlib._bootstrap_external>(649):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(650): <frozen importlib._bootstrap_external>(651): <frozen importlib._bootstrap_external>(652): <frozen importlib._bootstrap_external>(847): <frozen importlib._bootstrap_external>(850):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228):  --- modulename: traceback, funcname: <module>\\n",\n  "traceback.py(1): \\"\\"\\"Extract, format and print information about Python stack traces.\\"\\"\\"\\n",\n  "traceback.py(3): import collections\\n",\n  "traceback.py(4): import itertools\\n",\n  "traceback.py(5): import linecache\\n",\n  "traceback.py(6): import sys\\n",\n  "traceback.py(8): __all__ = [\'extract_stack\', \'extract_tb\', \'format_exception\',\\n",\n  "traceback.py(19): def print_list(extracted_list, file=None):\\n",\n  "traceback.py(27): def format_list(extracted_list):\\n",\n  "traceback.py(45): def print_tb(tb, limit=None, file=None):\\n",\n  "traceback.py(55): def format_tb(tb, limit=None):\\n",\n  "traceback.py(59): def extract_tb(tb, limit=None):\\n",\n  "traceback.py(79):     \\"\\\\nThe above exception was the direct cause \\"\\n",\n  "traceback.py(78): _cause_message = (\\n",\n  "traceback.py(83):     \\"\\\\nDuring handling of the above exception, \\"\\n",\n  "traceback.py(82): _context_message = (\\n",\n  "traceback.py(87): def print_exception(etype, value, tb, limit=None, file=None, chain=True):\\n",\n  "traceback.py(108): def format_exception(etype, value, tb, limit=None, chain=True):\\n",\n  "traceback.py(124): def format_exception_only(etype, value):\\n",\n  "traceback.py(145): def _format_final_exc_line(etype, value):\\n",\n  "traceback.py(153): def _some_str(value):\\n",\n  "traceback.py(161): def print_exc(limit=None, file=None, chain=True):\\n",\n  "traceback.py(165): def format_exc(limit=None, chain=True):\\n",\n  "traceback.py(169): def print_last(limit=None, file=None, chain=True):\\n",\n  "traceback.py(181): def print_stack(f=None, limit=None, file=None):\\n",\n  "traceback.py(193): def format_stack(f=None, limit=None):\\n",\n  "traceback.py(200): def extract_stack(f=None, limit=None):\\n",\n  "traceback.py(216): def clear_frames(tb):\\n",\n  "traceback.py(227): class FrameSummary:\\n",\n  " --- modulename: traceback, funcname: FrameSummary\\n",\n  "traceback.py(227): class FrameSummary:\\n",\n  "traceback.py(228):     \\"\\"\\"A single frame from a traceback.\\n",\n  "traceback.py(241):     __slots__ = (\'filename\', \'lineno\', \'name\', \'_line\', \'locals\')\\n",\n  "traceback.py(243):     def __init__(self, filename, lineno, name, *, lookup_line=True,\\n",\n  "traceback.py(244):             locals=None, line=None):\\n",\n  "traceback.py(243):     def __init__(self, filename, lineno, name, *, lookup_line=True,\\n",\n  "traceback.py(262):     def __eq__(self, other):\\n",\n  "traceback.py(272):     def __getitem__(self, pos):\\n",\n  "traceback.py(275):     def __iter__(self):\\n",\n  "traceback.py(278):     def __repr__(self):\\n",\n  "traceback.py(282):     def __len__(self):\\n",\n  "traceback.py(285):     @property\\n",\n  "traceback.py(286):     def line(self):\\n",\n  "traceback.py(292): def walk_stack(f):\\n",\n  "traceback.py(305): def walk_tb(tb):\\n",\n  "traceback.py(316): _RECURSIVE_CUTOFF = 3 # Also hardcoded in traceback.c.\\n",\n  "traceback.py(318): class StackSummary(list):\\n",\n  " --- modulename: traceback, funcname: StackSummary\\n",\n  "traceback.py(318): class StackSummary(list):\\n",\n  "traceback.py(319):     \\"\\"\\"A stack of frames.\\"\\"\\"\\n",\n  "traceback.py(321):     @classmethod\\n",\n  "traceback.py(322):     def extract(klass, frame_gen, *, limit=None, lookup_lines=True,\\n",\n  "traceback.py(323):             capture_locals=False):\\n",\n  "traceback.py(322):     def extract(klass, frame_gen, *, limit=None, lookup_lines=True,\\n",\n  "traceback.py(369):     @classmethod\\n",\n  "traceback.py(370):     def from_list(klass, a_list):\\n",\n  "traceback.py(388):     def format(self):\\n",\n  "traceback.py(440): class TracebackException:\\n",\n  " --- modulename: traceback, funcname: TracebackException\\n",\n  "traceback.py(440): class TracebackException:\\n",\n  "traceback.py(441):     \\"\\"\\"An exception ready for rendering.\\n",\n  "traceback.py(468):     def __init__(self, exc_type, exc_value, exc_traceback, *, limit=None,\\n",\n  "traceback.py(469):             lookup_lines=True, capture_locals=False, _seen=None):\\n",\n  "traceback.py(468):     def __init__(self, exc_type, exc_value, exc_traceback, *, limit=None,\\n",\n  "traceback.py(535):     @classmethod\\n",\n  "traceback.py(536):     def from_exception(cls, exc, *args, **kwargs):\\n",\n  "traceback.py(540):     def _load_lines(self):\\n",\n  "traceback.py(549):     def __eq__(self, other):\\n",\n  "traceback.py(554):     def __str__(self):\\n",\n  "traceback.py(557):     def format_exception_only(self):\\n",\n  "traceback.py(586):     def _format_syntax_error(self, stype):\\n",\n  "traceback.py(614):     def format(self, *, chain=True):\\n",\n  "<frozen importlib._bootstrap>(691): <frozen importlib._bootstrap>(692): <frozen importlib._bootstrap>(693):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap>(695): <frozen importlib._bootstrap>(697): <frozen importlib._bootstrap>(987): <frozen importlib._bootstrap>(996):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(161):  --- modulename: _bootstrap, funcname: release\\n",\n  "<frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(115): <frozen importlib._bootstrap>(117): <frozen importlib._bootstrap>(118): <frozen importlib._bootstrap>(119): <frozen importlib._bootstrap>(120): <frozen importlib._bootstrap>(121):  --- modulename: _bootstrap, funcname: cb\\n",\n  "<frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(191): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(194): __init__.py(28): from string import Template\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: _bootstrap, funcname: _find_and_load\\n",\n  "<frozen importlib._bootstrap>(1004):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(153): <frozen importlib._bootstrap>(154):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(157):  --- modulename: _bootstrap, funcname: _get_module_lock\\n",\n  "<frozen importlib._bootstrap>(172): <frozen importlib._bootstrap>(173): <frozen importlib._bootstrap>(174): <frozen importlib._bootstrap>(175): <frozen importlib._bootstrap>(176): <frozen importlib._bootstrap>(177): <frozen importlib._bootstrap>(179): <frozen importlib._bootstrap>(180): <frozen importlib._bootstrap>(183):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(59): <frozen importlib._bootstrap>(60): <frozen importlib._bootstrap>(61): <frozen importlib._bootstrap>(62): <frozen importlib._bootstrap>(63): <frozen importlib._bootstrap>(64): <frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(196): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(158):  --- modulename: _bootstrap, funcname: acquire\\n",\n  "<frozen importlib._bootstrap>(93): <frozen importlib._bootstrap>(94): <frozen importlib._bootstrap>(95): <frozen importlib._bootstrap>(97): <frozen importlib._bootstrap>(98): <frozen importlib._bootstrap>(99): <frozen importlib._bootstrap>(100): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(1005): <frozen importlib._bootstrap>(1006): <frozen importlib._bootstrap>(1007):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked\\n",\n  "<frozen importlib._bootstrap>(968): <frozen importlib._bootstrap>(969): <frozen importlib._bootstrap>(970): <frozen importlib._bootstrap>(982):  --- modulename: _bootstrap, funcname: _find_spec\\n",\n  "<frozen importlib._bootstrap>(903): <frozen importlib._bootstrap>(904): <frozen importlib._bootstrap>(909): <frozen importlib._bootstrap>(915): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: __init__, funcname: find_spec\\n",\n  "__init__.py(85):         if path is not None:\\n",\n  "__init__.py(88):         method_name = \'spec_for_{fullname}\'.format(**locals())\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  "__init__.py(90):         return method()\\n",\n  " --- modulename: __init__, funcname: <lambda>\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  " --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(738): <frozen importlib._bootstrap>(740): <frozen importlib._bootstrap>(743):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(813): <frozen importlib._bootstrap>(816):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1421): <frozen importlib._bootstrap_external>(1422): <frozen importlib._bootstrap_external>(1423):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1388): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1555):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n",\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(151): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1557): <frozen importlib._bootstrap_external>(1556):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1510):  --- modulename: _bootstrap_external, funcname: __init__\\n",\n  "<frozen importlib._bootstrap_external>(1009): <frozen importlib._bootstrap_external>(1010): <frozen importlib._bootstrap_external>(1511): <frozen importlib._bootstrap_external>(1512): <frozen importlib._bootstrap_external>(1511):  --- modulename: _bootstrap_external, funcname: spec_from_file_location\\n",\n  "<frozen importlib._bootstrap_external>(708): <frozen importlib._bootstrap_external>(720): <frozen importlib._bootstrap_external>(728):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(353): <frozen importlib._bootstrap>(354): <frozen importlib._bootstrap>(355): <frozen importlib._bootstrap>(356): <frozen importlib._bootstrap>(357): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap_external>(729): <frozen importlib._bootstrap_external>(732): <frozen importlib._bootstrap_external>(742): <frozen importlib._bootstrap_external>(753): <frozen importlib._bootstrap_external>(754): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1400): <frozen importlib._bootstrap_external>(1401): <frozen importlib._bootstrap_external>(1424): <frozen importlib._bootstrap_external>(1426): <frozen importlib._bootstrap_external>(1437):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(928): <frozen importlib._bootstrap>(943): <frozen importlib._bootstrap>(983): <frozen importlib._bootstrap>(986):  --- modulename: _bootstrap, funcname: _load_unlocked\\n",\n  "<frozen importlib._bootstrap>(661): <frozen importlib._bootstrap>(663): <frozen importlib._bootstrap>(666):  --- modulename: _bootstrap, funcname: module_from_spec\\n",\n  "<frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(562): <frozen importlib._bootstrap>(565):  --- modulename: _bootstrap_external, funcname: create_module\\n",\n  "<frozen importlib._bootstrap_external>(842): <frozen importlib._bootstrap>(569): <frozen importlib._bootstrap>(570):  --- modulename: _bootstrap, funcname: _new_module\\n",\n  "<frozen importlib._bootstrap>(36): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap, funcname: _init_module_attrs\\n",\n  "<frozen importlib._bootstrap>(490): <frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(497): <frozen importlib._bootstrap>(498): <frozen importlib._bootstrap>(519): <frozen importlib._bootstrap>(520): <frozen importlib._bootstrap>(524): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526):  --- modulename: _bootstrap, funcname: parent\\n",\n  "<frozen importlib._bootstrap>(401): <frozen importlib._bootstrap>(402): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(535): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(542):  --- modulename: _bootstrap, funcname: has_location\\n",\n  "<frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(543): <frozen importlib._bootstrap>(544): <frozen importlib._bootstrap>(545): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(388): <frozen importlib._bootstrap>(389): <frozen importlib._bootstrap>(391):  --- modulename: _bootstrap_external, funcname: _get_cached\\n",\n  "<frozen importlib._bootstrap_external>(492): <frozen importlib._bootstrap_external>(493): <frozen importlib._bootstrap_external>(494):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(552):  --- modulename: _bootstrap, funcname: cached\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(572): <frozen importlib._bootstrap>(671): <frozen importlib._bootstrap>(672): <frozen importlib._bootstrap>(673): <frozen importlib._bootstrap>(674): <frozen importlib._bootstrap>(675): <frozen importlib._bootstrap>(680):  --- modulename: _bootstrap_external, funcname: exec_module\\n",\n  "<frozen importlib._bootstrap_external>(846):  --- modulename: _bootstrap_external, funcname: get_code\\n",\n  "<frozen importlib._bootstrap_external>(923):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper\\n",\n  "<frozen importlib._bootstrap_external>(524): <frozen importlib._bootstrap_external>(526): <frozen importlib._bootstrap_external>(529):  --- modulename: _bootstrap_external, funcname: get_filename\\n",\n  "<frozen importlib._bootstrap_external>(1034): <frozen importlib._bootstrap_external>(924): <frozen importlib._bootstrap_external>(925): <frozen importlib._bootstrap_external>(926): <frozen importlib._bootstrap_external>(927): <frozen importlib._bootstrap_external>(928): <frozen importlib._bootstrap_external>(929): <frozen importlib._bootstrap_external>(930):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(934): <frozen importlib._bootstrap_external>(935):  --- modulename: _bootstrap_external, funcname: path_stats\\n",\n  "<frozen importlib._bootstrap_external>(1079):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1080): <frozen importlib._bootstrap_external>(939): <frozen importlib._bootstrap_external>(940): <frozen importlib._bootstrap_external>(941):  --- modulename: _bootstrap_external, funcname: get_data\\n",\n  "<frozen importlib._bootstrap_external>(1038): <frozen importlib._bootstrap_external>(1039): <frozen importlib._bootstrap_external>(1040): <frozen importlib._bootstrap_external>(946): <frozen importlib._bootstrap_external>(947): <frozen importlib._bootstrap_external>(945): <frozen importlib._bootstrap_external>(949): <frozen importlib._bootstrap_external>(950):  --- modulename: _bootstrap_external, funcname: _classify_pyc\\n",\n  "<frozen importlib._bootstrap_external>(576): <frozen importlib._bootstrap_external>(577): <frozen importlib._bootstrap_external>(581): <frozen importlib._bootstrap_external>(585):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(587): <frozen importlib._bootstrap_external>(590): <frozen importlib._bootstrap_external>(951): <frozen importlib._bootstrap_external>(952): <frozen importlib._bootstrap_external>(953): <frozen importlib._bootstrap_external>(966): <frozen importlib._bootstrap_external>(967): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969): <frozen importlib._bootstrap_external>(970): <frozen importlib._bootstrap_external>(971): <frozen importlib._bootstrap_external>(966):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc\\n",\n  "<frozen importlib._bootstrap_external>(612):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(617):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(976): <frozen importlib._bootstrap_external>(977): <frozen importlib._bootstrap_external>(976):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(978): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(978):  --- modulename: _bootstrap_external, funcname: _compile_bytecode\\n",\n  "<frozen importlib._bootstrap_external>(647): <frozen importlib._bootstrap_external>(648): <frozen importlib._bootstrap_external>(649):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(650): <frozen importlib._bootstrap_external>(651): <frozen importlib._bootstrap_external>(652): <frozen importlib._bootstrap_external>(847): <frozen importlib._bootstrap_external>(850):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228):  --- modulename: string, funcname: <module>\\n",\n  "string.py(1): \\"\\"\\"A collection of string constants.\\n",\n  "string.py(17): __all__ = [\\"ascii_letters\\", \\"ascii_lowercase\\", \\"ascii_uppercase\\", \\"capwords\\",\\n",\n  "string.py(21): import _string\\n",\n  " --- modulename: _bootstrap, funcname: _find_and_load\\n",\n  "<frozen importlib._bootstrap>(1004):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(153): <frozen importlib._bootstrap>(154):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(157):  --- modulename: _bootstrap, funcname: _get_module_lock\\n",\n  "<frozen importlib._bootstrap>(172): <frozen importlib._bootstrap>(173): <frozen importlib._bootstrap>(174): <frozen importlib._bootstrap>(175): <frozen importlib._bootstrap>(176): <frozen importlib._bootstrap>(177): <frozen importlib._bootstrap>(179): <frozen importlib._bootstrap>(180): <frozen importlib._bootstrap>(183):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(59): <frozen importlib._bootstrap>(60): <frozen importlib._bootstrap>(61): <frozen importlib._bootstrap>(62): <frozen importlib._bootstrap>(63): <frozen importlib._bootstrap>(64): <frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(196): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(158):  --- modulename: _bootstrap, funcname: acquire\\n",\n  "<frozen importlib._bootstrap>(93): <frozen importlib._bootstrap>(94): <frozen importlib._bootstrap>(95): <frozen importlib._bootstrap>(97): <frozen importlib._bootstrap>(98): <frozen importlib._bootstrap>(99): <frozen importlib._bootstrap>(100): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(1005): <frozen importlib._bootstrap>(1006): <frozen importlib._bootstrap>(1007):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(968): <frozen importlib._bootstrap>(969): <frozen importlib._bootstrap>(970): <frozen importlib._bootstrap>(982):  --- modulename: _bootstrap, funcname: _find_spec\\n",\n  "<frozen importlib._bootstrap>(903): <frozen importlib._bootstrap>(904): <frozen importlib._bootstrap>(909): <frozen importlib._bootstrap>(915): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: __init__, funcname: find_spec\\n",\n  "__init__.py(85):         if path is not None:\\n",\n  "__init__.py(88):         method_name = \'spec_for_{fullname}\'.format(**locals())\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  "__init__.py(90):         return method()\\n",\n  " --- modulename: __init__, funcname: <lambda>\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  " --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(738): <frozen importlib._bootstrap>(740): <frozen importlib._bootstrap>(741):  --- modulename: _bootstrap, funcname: spec_from_loader\\n",\n  "<frozen importlib._bootstrap>(417): <frozen importlib._bootstrap>(428): <frozen importlib._bootstrap>(429): <frozen importlib._bootstrap>(430): <frozen importlib._bootstrap>(431):  --- modulename: _bootstrap, funcname: _requires_builtin_wrapper\\n",\n  "<frozen importlib._bootstrap>(242): <frozen importlib._bootstrap>(245):  --- modulename: _bootstrap, funcname: is_package\\n",\n  "<frozen importlib._bootstrap>(786): <frozen importlib._bootstrap>(438):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(353): <frozen importlib._bootstrap>(354): <frozen importlib._bootstrap>(355): <frozen importlib._bootstrap>(356): <frozen importlib._bootstrap>(357): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(928): <frozen importlib._bootstrap>(943): <frozen importlib._bootstrap>(983): <frozen importlib._bootstrap>(986):  --- modulename: _bootstrap, funcname: _load_unlocked\\n",\n  "<frozen importlib._bootstrap>(661): <frozen importlib._bootstrap>(663): <frozen importlib._bootstrap>(666):  --- modulename: _bootstrap, funcname: module_from_spec\\n",\n  "<frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(562): <frozen importlib._bootstrap>(565):  --- modulename: _bootstrap, funcname: create_module\\n",\n  "<frozen importlib._bootstrap>(760): <frozen importlib._bootstrap>(763):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228): <frozen importlib._bootstrap>(569): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap, funcname: _init_module_attrs\\n",\n  "<frozen importlib._bootstrap>(490): <frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(497): <frozen importlib._bootstrap>(498): <frozen importlib._bootstrap>(519): <frozen importlib._bootstrap>(520): <frozen importlib._bootstrap>(524): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526):  --- modulename: _bootstrap, funcname: parent\\n",\n  "<frozen importlib._bootstrap>(401): <frozen importlib._bootstrap>(402): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(535): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(542):  --- modulename: _bootstrap, funcname: has_location\\n",\n  "<frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(572): <frozen importlib._bootstrap>(671): <frozen importlib._bootstrap>(672): <frozen importlib._bootstrap>(673): <frozen importlib._bootstrap>(674): <frozen importlib._bootstrap>(675): <frozen importlib._bootstrap>(680):  --- modulename: _bootstrap, funcname: exec_module\\n",\n  "<frozen importlib._bootstrap>(768):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228): <frozen importlib._bootstrap>(691): <frozen importlib._bootstrap>(692): <frozen importlib._bootstrap>(693):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap>(695): <frozen importlib._bootstrap>(697): <frozen importlib._bootstrap>(987): <frozen importlib._bootstrap>(996):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(161):  --- modulename: _bootstrap, funcname: release\\n",\n  "<frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(115): <frozen importlib._bootstrap>(117): <frozen importlib._bootstrap>(118): <frozen importlib._bootstrap>(119): <frozen importlib._bootstrap>(120): <frozen importlib._bootstrap>(121):  --- modulename: _bootstrap, funcname: cb\\n",\n  "<frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(191): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(194): string.py(24): whitespace = \' \\\\t\\\\n\\\\r\\\\v\\\\f\'\\n",\n  "string.py(25): ascii_lowercase = \'abcdefghijklmnopqrstuvwxyz\'\\n",\n  "string.py(26): ascii_uppercase = \'ABCDEFGHIJKLMNOPQRSTUVWXYZ\'\\n",\n  "string.py(27): ascii_letters = ascii_lowercase + ascii_uppercase\\n",\n  "string.py(28): digits = \'0123456789\'\\n",\n  "string.py(29): hexdigits = digits + \'abcdef\' + \'ABCDEF\'\\n",\n  "string.py(30): octdigits = \'01234567\'\\n",\n  "string.py(31): punctuation = r\\"\\"\\"!\\"#$%&\'()*+,-./:;<=>?@[\\\\]^_`{|}~\\"\\"\\"\\n",\n  "string.py(32): printable = digits + ascii_letters + punctuation + whitespace\\n",\n  "string.py(37): def capwords(s, sep=None):\\n",\n  "string.py(52): import re as _re\\n",\n  "string.py(53): from collections import ChainMap as _ChainMap\\n",\n  " --- modulename: _bootstrap, funcname: _handle_fromlist\\n",\n  "<frozen importlib._bootstrap>(1043): <frozen importlib._bootstrap>(1044): <frozen importlib._bootstrap>(1051): <frozen importlib._bootstrap>(1055): <frozen importlib._bootstrap>(1043): <frozen importlib._bootstrap>(1067): string.py(55): _sentinel_dict = {}\\n",\n  "string.py(57): class Template:\\n",\n  " --- modulename: string, funcname: Template\\n",\n  "string.py(57): class Template:\\n",\n  "string.py(58):     \\"\\"\\"A string class for supporting $-substitutions.\\"\\"\\"\\n",\n  "string.py(60):     delimiter = \'$\'\\n",\n  "string.py(65):     idpattern = r\'(?a:[_a-z][_a-z0-9]*)\'\\n",\n  "string.py(66):     braceidpattern = None\\n",\n  "string.py(67):     flags = _re.IGNORECASE\\n",\n  "string.py(69):     def __init_subclass__(cls):\\n",\n  "string.py(87):     def __init__(self, template):\\n",\n  "string.py(92):     def _invalid(self, mo):\\n",\n  "string.py(104):     def substitute(self, mapping=_sentinel_dict, /, **kws):\\n",\n  "string.py(123):     def safe_substitute(self, mapping=_sentinel_dict, /, **kws):\\n",\n  "string.py(146): Template.__init_subclass__()\\n",\n  " --- modulename: string, funcname: __init_subclass__\\n",\n  "string.py(70):         super().__init_subclass__()\\n",\n  "string.py(71):         if \'pattern\' in cls.__dict__:\\n",\n  "string.py(74):             delim = _re.escape(cls.delimiter)\\n",\n  " --- modulename: re, funcname: escape\\n",\n  "re.py(274):     if isinstance(pattern, str):\\n",\n  "re.py(275):         return pattern.translate(_special_chars_map)\\n",\n  "string.py(75):             id = cls.idpattern\\n",\n  "string.py(76):             bid = cls.braceidpattern or cls.idpattern\\n",\n  "string.py(77):             pattern = fr\\"\\"\\"\\n",\n  "string.py(78):             {delim}(?:\\n",\n  "string.py(77):             pattern = fr\\"\\"\\"\\n",\n  "string.py(79):               (?P<escaped>{delim})  |   # Escape sequence of two delimiters\\n",\n  "string.py(77):             pattern = fr\\"\\"\\"\\n",\n  "string.py(80):               (?P<named>{id})       |   # delimiter and a Python identifier\\n",\n  "string.py(77):             pattern = fr\\"\\"\\"\\n",\n  "string.py(81):               {{(?P<braced>{bid})}} |   # delimiter and a braced identifier\\n",\n  "string.py(77):             pattern = fr\\"\\"\\"\\n",\n  "string.py(85):         cls.pattern = _re.compile(pattern, cls.flags | _re.VERBOSE)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: enum, funcname: __or__\\n",\n  "enum.py(972):         if not isinstance(other, (self.__class__, int)):\\n",\n  "enum.py(974):         result = self.__class__(self._value_ | self.__class__(other)._value_)\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(676):             return value\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  "enum.py(681):         except KeyError:\\n",\n  "enum.py(683):             pass\\n",\n  "enum.py(690):         try:\\n",\n  "enum.py(691):             exc = None\\n",\n  "enum.py(692):             result = cls._missing_(value)\\n",\n  " --- modulename: enum, funcname: _missing_\\n",\n  "enum.py(933):         if not isinstance(value, int):\\n",\n  "enum.py(935):         new_member = cls._create_pseudo_member_(value)\\n",\n  " --- modulename: enum, funcname: _create_pseudo_member_\\n",\n  "enum.py(943):         pseudo_member = cls._value2member_map_.get(value, None)\\n",\n  "enum.py(944):         if pseudo_member is None:\\n",\n  "enum.py(945):             need_to_create = [value]\\n",\n  "enum.py(947):             _, extra_flags = _decompose(cls, value)\\n",\n  " --- modulename: enum, funcname: _decompose\\n",\n  "enum.py(1022):     not_covered = value\\n",\n  "enum.py(1023):     negative = value < 0\\n",\n  "enum.py(1024):     members = []\\n",\n  "enum.py(1025):     for member in flag:\\n",\n  " --- modulename: enum, funcname: __iter__\\n",\n  "enum.py(438):         return (cls._member_map_[name] for name in cls._member_names_)\\n",\n  " --- modulename: enum, funcname: <genexpr>\\n",\n  "enum.py(438):         return (cls._member_map_[name] for name in cls._member_names_)\\n",\n  "enum.py(1026):         member_value = member.value\\n",\n  " --- modulename: types, funcname: __get__\\n",\n  "types.py(172):         if instance is None:\\n",\n  "types.py(176):         elif self.fget is None:\\n",\n  "types.py(178):         return self.fget(instance)\\n",\n  " --- modulename: enum, funcname: value\\n",\n  "enum.py(795):         return self._value_\\n",\n  "enum.py(1027):         if member_value and member_value & value == member_value:\\n",\n  "enum.py(1025):     for member in flag:\\n",\n  " --- modulename: enum, funcname: <genexpr>\\n",\n  "enum.py(438):         return (cls._member_map_[name] for name in cls._member_names_)\\n",\n  "enum.py(1026):         member_value = member.value\\n",\n  " --- modulename: types, funcname: __get__\\n",\n  "types.py(172):         if instance is None:\\n",\n  "types.py(176):         elif self.fget is None:\\n",\n  "types.py(178):         return self.fget(instance)\\n",\n  " --- modulename: enum, funcname: value\\n",\n  "enum.py(795):         return self._value_\\n",\n  "enum.py(1027):         if member_value and member_value & value == member_value:\\n",\n  "enum.py(1028):             members.append(member)\\n",\n  "enum.py(1029):             not_covered &= ~member_value\\n",\n  "enum.py(1025):     for member in flag:\\n",\n  " --- modulename: enum, funcname: <genexpr>\\n",\n  "enum.py(438):         return (cls._member_map_[name] for name in cls._member_names_)\\n",\n  "enum.py(1026):         member_value = member.value\\n",\n  " --- modulename: types, funcname: __get__\\n",\n  "types.py(172):         if instance is None:\\n",\n  "types.py(176):         elif self.fget is None:\\n",\n  "types.py(178):         return self.fget(instance)\\n",\n  " --- modulename: enum, funcname: value\\n",\n  "enum.py(795):         return self._value_\\n",\n  "enum.py(1027):         if member_value and member_value & value == member_value:\\n",\n  "enum.py(1025):     for member in flag:\\n",\n  " --- modulename: enum, funcname: <genexpr>\\n",\n  "enum.py(438):         return (cls._member_map_[name] for name in cls._member_names_)\\n",\n  "enum.py(1026):         member_value = member.value\\n",\n  " --- modulename: types, funcname: __get__\\n",\n  "types.py(172):         if instance is None:\\n",\n  "types.py(176):         elif self.fget is None:\\n",\n  "types.py(178):         return self.fget(instance)\\n",\n  " --- modulename: enum, funcname: value\\n",\n  "enum.py(795):         return self._value_\\n",\n  "enum.py(1027):         if member_value and member_value & value == member_value:\\n",\n  "enum.py(1025):     for member in flag:\\n",\n  " --- modulename: enum, funcname: <genexpr>\\n",\n  "enum.py(438):         return (cls._member_map_[name] for name in cls._member_names_)\\n",\n  "enum.py(1026):         member_value = member.value\\n",\n  " --- modulename: types, funcname: __get__\\n",\n  "types.py(172):         if instance is None:\\n",\n  "types.py(176):         elif self.fget is None:\\n",\n  "types.py(178):         return self.fget(instance)\\n",\n  " --- modulename: enum, funcname: value\\n",\n  "enum.py(795):         return self._value_\\n",\n  "enum.py(1027):         if member_value and member_value & value == member_value:\\n",\n  "enum.py(1025):     for member in flag:\\n",\n  " --- modulename: enum, funcname: <genexpr>\\n",\n  "enum.py(438):         return (cls._member_map_[name] for name in cls._member_names_)\\n",\n  "enum.py(1026):         member_value = member.value\\n",\n  " --- modulename: types, funcname: __get__\\n",\n  "types.py(172):         if instance is None:\\n",\n  "types.py(176):         elif self.fget is None:\\n",\n  "types.py(178):         return self.fget(instance)\\n",\n  " --- modulename: enum, funcname: value\\n",\n  "enum.py(795):         return self._value_\\n",\n  "enum.py(1027):         if member_value and member_value & value == member_value:\\n",\n  "enum.py(1025):     for member in flag:\\n",\n  " --- modulename: enum, funcname: <genexpr>\\n",\n  "enum.py(438):         return (cls._member_map_[name] for name in cls._member_names_)\\n",\n  "enum.py(1026):         member_value = member.value\\n",\n  " --- modulename: types, funcname: __get__\\n",\n  "types.py(172):         if instance is None:\\n",\n  "types.py(176):         elif self.fget is None:\\n",\n  "types.py(178):         return self.fget(instance)\\n",\n  " --- modulename: enum, funcname: value\\n",\n  "enum.py(795):         return self._value_\\n",\n  "enum.py(1027):         if member_value and member_value & value == member_value:\\n",\n  "enum.py(1028):             members.append(member)\\n",\n  "enum.py(1029):             not_covered &= ~member_value\\n",\n  "enum.py(1025):     for member in flag:\\n",\n  " --- modulename: enum, funcname: <genexpr>\\n",\n  "enum.py(438):         return (cls._member_map_[name] for name in cls._member_names_)\\n",\n  "enum.py(1026):         member_value = member.value\\n",\n  " --- modulename: types, funcname: __get__\\n",\n  "types.py(172):         if instance is None:\\n",\n  "types.py(176):         elif self.fget is None:\\n",\n  "types.py(178):         return self.fget(instance)\\n",\n  " --- modulename: enum, funcname: value\\n",\n  "enum.py(795):         return self._value_\\n",\n  "enum.py(1027):         if member_value and member_value & value == member_value:\\n",\n  "enum.py(1025):     for member in flag:\\n",\n  " --- modulename: enum, funcname: <genexpr>\\n",\n  "enum.py(438):         return (cls._member_map_[name] for name in cls._member_names_)\\n",\n  "enum.py(1026):         member_value = member.value\\n",\n  " --- modulename: types, funcname: __get__\\n",\n  "types.py(172):         if instance is None:\\n",\n  "types.py(176):         elif self.fget is None:\\n",\n  "types.py(178):         return self.fget(instance)\\n",\n  " --- modulename: enum, funcname: value\\n",\n  "enum.py(795):         return self._value_\\n",\n  "enum.py(1027):         if member_value and member_value & value == member_value:\\n",\n  "enum.py(1025):     for member in flag:\\n",\n  " --- modulename: enum, funcname: <genexpr>\\n",\n  "enum.py(438):         return (cls._member_map_[name] for name in cls._member_names_)\\n",\n  "enum.py(1030):     if not negative:\\n",\n  "enum.py(1031):         tmp = not_covered\\n",\n  "enum.py(1032):         while tmp:\\n",\n  "enum.py(1038):     if not members and value in flag._value2member_map_:\\n",\n  "enum.py(1040):     members.sort(key=lambda m: m._value_, reverse=True)\\n",\n  " --- modulename: enum, funcname: <lambda>\\n",\n  "enum.py(1040):     members.sort(key=lambda m: m._value_, reverse=True)\\n",\n  " --- modulename: enum, funcname: <lambda>\\n",\n  "enum.py(1040):     members.sort(key=lambda m: m._value_, reverse=True)\\n",\n  "enum.py(1041):     if len(members) > 1 and members[0].value == value:\\n",\n  " --- modulename: types, funcname: __get__\\n",\n  "types.py(172):         if instance is None:\\n",\n  "types.py(176):         elif self.fget is None:\\n",\n  "types.py(178):         return self.fget(instance)\\n",\n  " --- modulename: enum, funcname: value\\n",\n  "enum.py(795):         return self._value_\\n",\n  "enum.py(1044):     return members, not_covered\\n",\n  "enum.py(949):             while extra_flags:\\n",\n  "enum.py(961):             for value in reversed(need_to_create):\\n",\n  "enum.py(963):                 pseudo_member = int.__new__(cls, value)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "enum.py(964):                 pseudo_member._name_ = None\\n",\n  "enum.py(965):                 pseudo_member._value_ = value\\n",\n  "enum.py(968):                 pseudo_member = cls._value2member_map_.setdefault(value, pseudo_member)\\n",\n  "enum.py(961):             for value in reversed(need_to_create):\\n",\n  "enum.py(969):         return pseudo_member\\n",\n  "enum.py(936):         return new_member\\n",\n  "enum.py(696):         try:\\n",\n  "enum.py(697):             if isinstance(result, cls):\\n",\n  "enum.py(698):                 return result\\n",\n  "enum.py(712):             exc = None\\n",\n  "enum.py(713):             ve_exc = None\\n",\n  "enum.py(698):                 return result\\n",\n  "enum.py(975):         return result\\n",\n  " --- modulename: re, funcname: compile\\n",\n  "re.py(252):     return _compile(pattern, flags)\\n",\n  " --- modulename: re, funcname: _compile\\n",\n  "re.py(291):     if isinstance(flags, RegexFlag):\\n",\n  "re.py(292):         flags = flags.value\\n",\n  " --- modulename: types, funcname: __get__\\n",\n  "types.py(172):         if instance is None:\\n",\n  "types.py(176):         elif self.fget is None:\\n",\n  "types.py(178):         return self.fget(instance)\\n",\n  " --- modulename: enum, funcname: value\\n",\n  "enum.py(795):         return self._value_\\n",\n  "re.py(293):     try:\\n",\n  "re.py(294):         return _cache[type(pattern), pattern, flags]\\n",\n  "re.py(295):     except KeyError:\\n",\n  "re.py(296):         pass\\n",\n  "re.py(297):     if isinstance(pattern, Pattern):\\n",\n  "re.py(302):     if not sre_compile.isstring(pattern):\\n",\n  " --- modulename: sre_compile, funcname: isstring\\n",\n  "sre_compile.py(596):     return isinstance(obj, (str, bytes))\\n",\n  "re.py(304):     p = sre_compile.compile(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: compile\\n",\n  "sre_compile.py(762):     if isstring(p):\\n",\n  " --- modulename: sre_compile, funcname: isstring\\n",\n  "sre_compile.py(596):     return isinstance(obj, (str, bytes))\\n",\n  "sre_compile.py(763):         pattern = p\\n",\n  "sre_compile.py(764):         p = sre_parse.parse(p, flags)\\n",\n  " --- modulename: sre_parse, funcname: parse\\n",\n  "sre_parse.py(942):     source = Tokenizer(str)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(225):         self.istext = isinstance(string, str)\\n",\n  "sre_parse.py(226):         self.string = string\\n",\n  "sre_parse.py(227):         if not self.istext:\\n",\n  "sre_parse.py(229):         self.decoded_string = string\\n",\n  "sre_parse.py(230):         self.index = 0\\n",\n  "sre_parse.py(231):         self.next = None\\n",\n  "sre_parse.py(232):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(944):     if state is None:\\n",\n  "sre_parse.py(945):         state = State()\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(77):         self.flags = 0\\n",\n  "sre_parse.py(78):         self.groupdict = {}\\n",\n  "sre_parse.py(79):         self.groupwidths = [None]  # group 0\\n",\n  "sre_parse.py(80):         self.lookbehindgroups = None\\n",\n  "sre_parse.py(946):     state.flags = flags\\n",\n  "sre_parse.py(947):     state.str = str\\n",\n  "sre_parse.py(949):     try:\\n",\n  "sre_parse.py(950):         p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(525):             code = _escape(source, this, state)\\n",\n  " --- modulename: sre_parse, funcname: _escape\\n",\n  "sre_parse.py(357):     code = CATEGORIES.get(escape)\\n",\n  "sre_parse.py(358):     if code:\\n",\n  "sre_parse.py(360):     code = ESCAPES.get(escape)\\n",\n  "sre_parse.py(361):     if code:\\n",\n  "sre_parse.py(363):     try:\\n",\n  "sre_parse.py(364):         c = escape[1:2]\\n",\n  "sre_parse.py(365):         if c == \\"x\\":\\n",\n  "sre_parse.py(371):         elif c == \\"u\\" and source.istext:\\n",\n  "sre_parse.py(377):         elif c == \\"U\\" and source.istext:\\n",\n  "sre_parse.py(385):         elif c == \\"N\\" and source.istext:\\n",\n  "sre_parse.py(397):         elif c == \\"0\\":\\n",\n  "sre_parse.py(401):         elif c in DIGITS:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(424):         if len(escape) == 2:\\n",\n  "sre_parse.py(425):             if c in ASCIILETTERS:\\n",\n  "sre_parse.py(427):             return LITERAL, ord(escape[1])\\n",\n  "sre_parse.py(526):             subpatternappend(code)\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(686):             start = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(687):             group = True\\n",\n  "sre_parse.py(688):             name = None\\n",\n  "sre_parse.py(689):             add_flags = 0\\n",\n  "sre_parse.py(690):             del_flags = 0\\n",\n  "sre_parse.py(691):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(693):                 char = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(694):                 if char is None:\\n",\n  "sre_parse.py(696):                 if char == \\"P\\":\\n",\n  "sre_parse.py(727):                 elif char == \\":\\":\\n",\n  "sre_parse.py(729):                     group = None\\n",\n  "sre_parse.py(829):             if group is not None:\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(835):                            not (del_flags & SRE_FLAG_VERBOSE))\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(836):             p = _parse_sub(source, state, sub_verbose, nested + 1)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(686):             start = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(687):             group = True\\n",\n  "sre_parse.py(688):             name = None\\n",\n  "sre_parse.py(689):             add_flags = 0\\n",\n  "sre_parse.py(690):             del_flags = 0\\n",\n  "sre_parse.py(691):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(693):                 char = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(694):                 if char is None:\\n",\n  "sre_parse.py(696):                 if char == \\"P\\":\\n",\n  "sre_parse.py(698):                     if sourcematch(\\"<\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(700):                         name = source.getuntil(\\">\\", \\"group name\\")\\n",\n  " --- modulename: sre_parse, funcname: getuntil\\n",\n  "sre_parse.py(268):         result = \'\'\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(278):                 if not result:\\n",\n  "sre_parse.py(282):         return result\\n",\n  "sre_parse.py(701):                         if not name.isidentifier():\\n",\n  "sre_parse.py(829):             if group is not None:\\n",\n  "sre_parse.py(830):                 try:\\n",\n  "sre_parse.py(831):                     group = state.opengroup(name)\\n",\n  " --- modulename: sre_parse, funcname: opengroup\\n",\n  "sre_parse.py(85):         gid = self.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(86):         self.groupwidths.append(None)\\n",\n  "sre_parse.py(87):         if self.groups > MAXGROUPS:\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(89):         if name is not None:\\n",\n  "sre_parse.py(90):             ogid = self.groupdict.get(name, None)\\n",\n  "sre_parse.py(91):             if ogid is not None:\\n",\n  "sre_parse.py(94):             self.groupdict[name] = gid\\n",\n  "sre_parse.py(95):         return gid\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(835):                            not (del_flags & SRE_FLAG_VERBOSE))\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(836):             p = _parse_sub(source, state, sub_verbose, nested + 1)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(525):             code = _escape(source, this, state)\\n",\n  " --- modulename: sre_parse, funcname: _escape\\n",\n  "sre_parse.py(357):     code = CATEGORIES.get(escape)\\n",\n  "sre_parse.py(358):     if code:\\n",\n  "sre_parse.py(360):     code = ESCAPES.get(escape)\\n",\n  "sre_parse.py(361):     if code:\\n",\n  "sre_parse.py(363):     try:\\n",\n  "sre_parse.py(364):         c = escape[1:2]\\n",\n  "sre_parse.py(365):         if c == \\"x\\":\\n",\n  "sre_parse.py(371):         elif c == \\"u\\" and source.istext:\\n",\n  "sre_parse.py(377):         elif c == \\"U\\" and source.istext:\\n",\n  "sre_parse.py(385):         elif c == \\"N\\" and source.istext:\\n",\n  "sre_parse.py(397):         elif c == \\"0\\":\\n",\n  "sre_parse.py(401):         elif c in DIGITS:\\n",\n  "sre_parse.py(424):         if len(escape) == 2:\\n",\n  "sre_parse.py(425):             if c in ASCIILETTERS:\\n",\n  "sre_parse.py(427):             return LITERAL, ord(escape[1])\\n",\n  "sre_parse.py(526):             subpatternappend(code)\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(449):         return items[0]\\n",\n  "sre_parse.py(837):             if not source.match(\\")\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(840):             if group is not None:\\n",\n  "sre_parse.py(841):                 state.closegroup(group, p)\\n",\n  " --- modulename: sre_parse, funcname: closegroup\\n",\n  "sre_parse.py(97):         self.groupwidths[gid] = p.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(842):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(857):             group, add_flags, del_flags, p = av\\n",\n  "sre_parse.py(858):             if group is None and not add_flags and not del_flags:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(521):                         break\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(686):             start = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(687):             group = True\\n",\n  "sre_parse.py(688):             name = None\\n",\n  "sre_parse.py(689):             add_flags = 0\\n",\n  "sre_parse.py(690):             del_flags = 0\\n",\n  "sre_parse.py(691):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(693):                 char = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(694):                 if char is None:\\n",\n  "sre_parse.py(696):                 if char == \\"P\\":\\n",\n  "sre_parse.py(698):                     if sourcematch(\\"<\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(700):                         name = source.getuntil(\\">\\", \\"group name\\")\\n",\n  " --- modulename: sre_parse, funcname: getuntil\\n",\n  "sre_parse.py(268):         result = \'\'\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(278):                 if not result:\\n",\n  "sre_parse.py(282):         return result\\n",\n  "sre_parse.py(701):                         if not name.isidentifier():\\n",\n  "sre_parse.py(829):             if group is not None:\\n",\n  "sre_parse.py(830):                 try:\\n",\n  "sre_parse.py(831):                     group = state.opengroup(name)\\n",\n  " --- modulename: sre_parse, funcname: opengroup\\n",\n  "sre_parse.py(85):         gid = self.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(86):         self.groupwidths.append(None)\\n",\n  "sre_parse.py(87):         if self.groups > MAXGROUPS:\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(89):         if name is not None:\\n",\n  "sre_parse.py(90):             ogid = self.groupdict.get(name, None)\\n",\n  "sre_parse.py(91):             if ogid is not None:\\n",\n  "sre_parse.py(94):             self.groupdict[name] = gid\\n",\n  "sre_parse.py(95):         return gid\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(835):                            not (del_flags & SRE_FLAG_VERBOSE))\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(836):             p = _parse_sub(source, state, sub_verbose, nested + 1)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(686):             start = source.tell() - 1\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(687):             group = True\\n",\n  "sre_parse.py(688):             name = None\\n",\n  "sre_parse.py(689):             add_flags = 0\\n",\n  "sre_parse.py(690):             del_flags = 0\\n",\n  "sre_parse.py(691):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(693):                 char = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(694):                 if char is None:\\n",\n  "sre_parse.py(696):                 if char == \\"P\\":\\n",\n  "sre_parse.py(727):                 elif char == \\":\\":\\n",\n  "sre_parse.py(730):                 elif char == \\"#\\":\\n",\n  "sre_parse.py(740):                 elif char in \\"=!<\\":\\n",\n  "sre_parse.py(767):                 elif char == \\"(\\":\\n",\n  "sre_parse.py(803):                 elif char in FLAGS or char == \\"-\\":\\n",\n  "sre_parse.py(805):                     flags = _parse_flags(source, state, char)\\n",\n  " --- modulename: sre_parse, funcname: _parse_flags\\n",\n  "sre_parse.py(864):     sourceget = source.get\\n",\n  "sre_parse.py(865):     add_flags = 0\\n",\n  "sre_parse.py(866):     del_flags = 0\\n",\n  "sre_parse.py(867):     if char != \\"-\\":\\n",\n  "sre_parse.py(869):             flag = FLAGS[char]\\n",\n  "sre_parse.py(870):             if source.istext:\\n",\n  "sre_parse.py(871):                 if char == \'L\':\\n",\n  "sre_parse.py(878):             add_flags |= flag\\n",\n  "sre_parse.py(879):             if (flag & TYPE_FLAGS) and (add_flags & TYPE_FLAGS) != flag:\\n",\n  "sre_parse.py(882):             char = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(883):             if char is None:\\n",\n  "sre_parse.py(885):             if char in \\")-:\\":\\n",\n  "sre_parse.py(886):                 break\\n",\n  "sre_parse.py(890):     if char == \\")\\":\\n",\n  "sre_parse.py(893):     if add_flags & GLOBAL_FLAGS:\\n",\n  "sre_parse.py(895):     if char == \\"-\\":\\n",\n  "sre_parse.py(916):     assert char == \\":\\"\\n",\n  "sre_parse.py(917):     if del_flags & GLOBAL_FLAGS:\\n",\n  "sre_parse.py(919):     if add_flags & del_flags:\\n",\n  "sre_parse.py(921):     return add_flags, del_flags\\n",\n  "sre_parse.py(806):                     if flags is None:  # global flags\\n",\n  "sre_parse.py(822):                     add_flags, del_flags = flags\\n",\n  "sre_parse.py(823):                     group = None\\n",\n  "sre_parse.py(829):             if group is not None:\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(835):                            not (del_flags & SRE_FLAG_VERBOSE))\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(836):             p = _parse_sub(source, state, sub_verbose, nested + 1)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(532):             here = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(534):             set = []\\n",\n  "sre_parse.py(535):             setappend = set.append\\n",\n  "sre_parse.py(538):             if source.next == \'[\':\\n",\n  "sre_parse.py(544):             negate = sourcematch(\\"^\\")\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(570):                     that = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(571):                     if that is None:\\n",\n  "sre_parse.py(574):                     if that == \\"]\\":\\n",\n  "sre_parse.py(580):                     if that[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(583):                         if that == \'-\':\\n",\n  "sre_parse.py(590):                         code2 = LITERAL, _ord(that)\\n",\n  "sre_parse.py(591):                     if code1[0] != LITERAL or code2[0] != LITERAL:\\n",\n  "sre_parse.py(594):                     lo = code1[1]\\n",\n  "sre_parse.py(595):                     hi = code2[1]\\n",\n  "sre_parse.py(596):                     if hi < lo:\\n",\n  "sre_parse.py(599):                     setappend((RANGE, (lo, hi)))\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(552):                     break\\n",\n  "sre_parse.py(605):             set = _uniq(set)\\n",\n  " --- modulename: sre_parse, funcname: _uniq\\n",\n  "sre_parse.py(433):     return list(dict.fromkeys(items))\\n",\n  "sre_parse.py(607):             if _len(set) == 1 and set[0][0] is LITERAL:\\n",\n  "sre_parse.py(614):                 if negate:\\n",\n  "sre_parse.py(618):                 subpatternappend((IN, set))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(532):             here = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(534):             set = []\\n",\n  "sre_parse.py(535):             setappend = set.append\\n",\n  "sre_parse.py(538):             if source.next == \'[\':\\n",\n  "sre_parse.py(544):             negate = sourcematch(\\"^\\")\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(570):                     that = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(571):                     if that is None:\\n",\n  "sre_parse.py(574):                     if that == \\"]\\":\\n",\n  "sre_parse.py(580):                     if that[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(583):                         if that == \'-\':\\n",\n  "sre_parse.py(590):                         code2 = LITERAL, _ord(that)\\n",\n  "sre_parse.py(591):                     if code1[0] != LITERAL or code2[0] != LITERAL:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(594):                     lo = code1[1]\\n",\n  "sre_parse.py(595):                     hi = code2[1]\\n",\n  "sre_parse.py(596):                     if hi < lo:\\n",\n  "sre_parse.py(599):                     setappend((RANGE, (lo, hi)))\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(570):                     that = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(571):                     if that is None:\\n",\n  "sre_parse.py(574):                     if that == \\"]\\":\\n",\n  "sre_parse.py(580):                     if that[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(583):                         if that == \'-\':\\n",\n  "sre_parse.py(590):                         code2 = LITERAL, _ord(that)\\n",\n  "sre_parse.py(591):                     if code1[0] != LITERAL or code2[0] != LITERAL:\\n",\n  "sre_parse.py(594):                     lo = code1[1]\\n",\n  "sre_parse.py(595):                     hi = code2[1]\\n",\n  "sre_parse.py(596):                     if hi < lo:\\n",\n  "sre_parse.py(599):                     setappend((RANGE, (lo, hi)))\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(552):                     break\\n",\n  "sre_parse.py(605):             set = _uniq(set)\\n",\n  " --- modulename: sre_parse, funcname: _uniq\\n",\n  "sre_parse.py(433):     return list(dict.fromkeys(items))\\n",\n  "sre_parse.py(607):             if _len(set) == 1 and set[0][0] is LITERAL:\\n",\n  "sre_parse.py(614):                 if negate:\\n",\n  "sre_parse.py(618):                 subpatternappend((IN, set))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(622):             here = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(623):             if this == \\"?\\":\\n",\n  "sre_parse.py(625):             elif this == \\"*\\":\\n",\n  "sre_parse.py(626):                 min, max = 0, MAXREPEAT\\n",\n  "sre_parse.py(663):             if subpattern:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(664):                 item = subpattern[-1:]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(166):             return SubPattern(self.state, self.data[index])\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(667):             if not item or item[0][0] is AT:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(670):             if item[0][0] in _REPEATCODES:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(673):             if item[0][0] is SUBPATTERN:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(677):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(680):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))\\n",\n  " --- modulename: sre_parse, funcname: __setitem__\\n",\n  "sre_parse.py(169):         self.data[index] = code\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(449):         return items[0]\\n",\n  "sre_parse.py(837):             if not source.match(\\")\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(840):             if group is not None:\\n",\n  "sre_parse.py(842):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(857):             group, add_flags, del_flags, p = av\\n",\n  "sre_parse.py(858):             if group is None and not add_flags and not del_flags:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(449):         return items[0]\\n",\n  "sre_parse.py(837):             if not source.match(\\")\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(840):             if group is not None:\\n",\n  "sre_parse.py(841):                 state.closegroup(group, p)\\n",\n  " --- modulename: sre_parse, funcname: closegroup\\n",\n  "sre_parse.py(97):         self.groupwidths[gid] = p.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(194):                 i, j = av[-1].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(198):                 i, j = av[2].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(199):                 lo = lo + i * av[0]\\n",\n  "sre_parse.py(200):                 hi = hi + j * av[1]\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(195):                 lo = lo + i\\n",\n  "sre_parse.py(196):                 hi = hi + j\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(842):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(857):             group, add_flags, del_flags, p = av\\n",\n  "sre_parse.py(858):             if group is None and not add_flags and not del_flags:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(521):                         break\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(622):             here = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(623):             if this == \\"?\\":\\n",\n  "sre_parse.py(625):             elif this == \\"*\\":\\n",\n  "sre_parse.py(628):             elif this == \\"+\\":\\n",\n  "sre_parse.py(630):             elif this == \\"{\\":\\n",\n  "sre_parse.py(631):                 if source.next == \\"}\\":\\n",\n  "sre_parse.py(635):                 min, max = 0, MAXREPEAT\\n",\n  "sre_parse.py(636):                 lo = hi = \\"\\"\\n",\n  "sre_parse.py(637):                 while source.next in DIGITS:\\n",\n  "sre_parse.py(639):                 if sourcematch(\\",\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(643):                     hi = lo\\n",\n  "sre_parse.py(644):                 if not sourcematch(\\"}\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(645):                     subpatternappend((LITERAL, _ord(this)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(646):                     source.seek(here)\\n",\n  " --- modulename: sre_parse, funcname: seek\\n",\n  "sre_parse.py(289):         self.index = index\\n",\n  "sre_parse.py(290):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(647):                     continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(686):             start = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(687):             group = True\\n",\n  "sre_parse.py(688):             name = None\\n",\n  "sre_parse.py(689):             add_flags = 0\\n",\n  "sre_parse.py(690):             del_flags = 0\\n",\n  "sre_parse.py(691):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(693):                 char = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(694):                 if char is None:\\n",\n  "sre_parse.py(696):                 if char == \\"P\\":\\n",\n  "sre_parse.py(698):                     if sourcematch(\\"<\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(700):                         name = source.getuntil(\\">\\", \\"group name\\")\\n",\n  " --- modulename: sre_parse, funcname: getuntil\\n",\n  "sre_parse.py(268):         result = \'\'\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(278):                 if not result:\\n",\n  "sre_parse.py(282):         return result\\n",\n  "sre_parse.py(701):                         if not name.isidentifier():\\n",\n  "sre_parse.py(829):             if group is not None:\\n",\n  "sre_parse.py(830):                 try:\\n",\n  "sre_parse.py(831):                     group = state.opengroup(name)\\n",\n  " --- modulename: sre_parse, funcname: opengroup\\n",\n  "sre_parse.py(85):         gid = self.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(86):         self.groupwidths.append(None)\\n",\n  "sre_parse.py(87):         if self.groups > MAXGROUPS:\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(89):         if name is not None:\\n",\n  "sre_parse.py(90):             ogid = self.groupdict.get(name, None)\\n",\n  "sre_parse.py(91):             if ogid is not None:\\n",\n  "sre_parse.py(94):             self.groupdict[name] = gid\\n",\n  "sre_parse.py(95):         return gid\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(835):                            not (del_flags & SRE_FLAG_VERBOSE))\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(836):             p = _parse_sub(source, state, sub_verbose, nested + 1)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(686):             start = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(687):             group = True\\n",\n  "sre_parse.py(688):             name = None\\n",\n  "sre_parse.py(689):             add_flags = 0\\n",\n  "sre_parse.py(690):             del_flags = 0\\n",\n  "sre_parse.py(691):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(693):                 char = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(694):                 if char is None:\\n",\n  "sre_parse.py(696):                 if char == \\"P\\":\\n",\n  "sre_parse.py(727):                 elif char == \\":\\":\\n",\n  "sre_parse.py(730):                 elif char == \\"#\\":\\n",\n  "sre_parse.py(740):                 elif char in \\"=!<\\":\\n",\n  "sre_parse.py(767):                 elif char == \\"(\\":\\n",\n  "sre_parse.py(803):                 elif char in FLAGS or char == \\"-\\":\\n",\n  "sre_parse.py(805):                     flags = _parse_flags(source, state, char)\\n",\n  " --- modulename: sre_parse, funcname: _parse_flags\\n",\n  "sre_parse.py(864):     sourceget = source.get\\n",\n  "sre_parse.py(865):     add_flags = 0\\n",\n  "sre_parse.py(866):     del_flags = 0\\n",\n  "sre_parse.py(867):     if char != \\"-\\":\\n",\n  "sre_parse.py(869):             flag = FLAGS[char]\\n",\n  "sre_parse.py(870):             if source.istext:\\n",\n  "sre_parse.py(871):                 if char == \'L\':\\n",\n  "sre_parse.py(878):             add_flags |= flag\\n",\n  "sre_parse.py(879):             if (flag & TYPE_FLAGS) and (add_flags & TYPE_FLAGS) != flag:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(882):             char = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(883):             if char is None:\\n",\n  "sre_parse.py(885):             if char in \\")-:\\":\\n",\n  "sre_parse.py(886):                 break\\n",\n  "sre_parse.py(890):     if char == \\")\\":\\n",\n  "sre_parse.py(893):     if add_flags & GLOBAL_FLAGS:\\n",\n  "sre_parse.py(895):     if char == \\"-\\":\\n",\n  "sre_parse.py(916):     assert char == \\":\\"\\n",\n  "sre_parse.py(917):     if del_flags & GLOBAL_FLAGS:\\n",\n  "sre_parse.py(919):     if add_flags & del_flags:\\n",\n  "sre_parse.py(921):     return add_flags, del_flags\\n",\n  "sre_parse.py(806):                     if flags is None:  # global flags\\n",\n  "sre_parse.py(822):                     add_flags, del_flags = flags\\n",\n  "sre_parse.py(823):                     group = None\\n",\n  "sre_parse.py(829):             if group is not None:\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(835):                            not (del_flags & SRE_FLAG_VERBOSE))\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(836):             p = _parse_sub(source, state, sub_verbose, nested + 1)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(532):             here = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(534):             set = []\\n",\n  "sre_parse.py(535):             setappend = set.append\\n",\n  "sre_parse.py(538):             if source.next == \'[\':\\n",\n  "sre_parse.py(544):             negate = sourcematch(\\"^\\")\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(570):                     that = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(571):                     if that is None:\\n",\n  "sre_parse.py(574):                     if that == \\"]\\":\\n",\n  "sre_parse.py(580):                     if that[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(583):                         if that == \'-\':\\n",\n  "sre_parse.py(590):                         code2 = LITERAL, _ord(that)\\n",\n  "sre_parse.py(591):                     if code1[0] != LITERAL or code2[0] != LITERAL:\\n",\n  "sre_parse.py(594):                     lo = code1[1]\\n",\n  "sre_parse.py(595):                     hi = code2[1]\\n",\n  "sre_parse.py(596):                     if hi < lo:\\n",\n  "sre_parse.py(599):                     setappend((RANGE, (lo, hi)))\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(552):                     break\\n",\n  "sre_parse.py(605):             set = _uniq(set)\\n",\n  " --- modulename: sre_parse, funcname: _uniq\\n",\n  "sre_parse.py(433):     return list(dict.fromkeys(items))\\n",\n  "sre_parse.py(607):             if _len(set) == 1 and set[0][0] is LITERAL:\\n",\n  "sre_parse.py(614):                 if negate:\\n",\n  "sre_parse.py(618):                 subpatternappend((IN, set))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(532):             here = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(534):             set = []\\n",\n  "sre_parse.py(535):             setappend = set.append\\n",\n  "sre_parse.py(538):             if source.next == \'[\':\\n",\n  "sre_parse.py(544):             negate = sourcematch(\\"^\\")\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(570):                     that = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(571):                     if that is None:\\n",\n  "sre_parse.py(574):                     if that == \\"]\\":\\n",\n  "sre_parse.py(580):                     if that[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(583):                         if that == \'-\':\\n",\n  "sre_parse.py(590):                         code2 = LITERAL, _ord(that)\\n",\n  "sre_parse.py(591):                     if code1[0] != LITERAL or code2[0] != LITERAL:\\n",\n  "sre_parse.py(594):                     lo = code1[1]\\n",\n  "sre_parse.py(595):                     hi = code2[1]\\n",\n  "sre_parse.py(596):                     if hi < lo:\\n",\n  "sre_parse.py(599):                     setappend((RANGE, (lo, hi)))\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(570):                     that = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(571):                     if that is None:\\n",\n  "sre_parse.py(574):                     if that == \\"]\\":\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(580):                     if that[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(583):                         if that == \'-\':\\n",\n  "sre_parse.py(590):                         code2 = LITERAL, _ord(that)\\n",\n  "sre_parse.py(591):                     if code1[0] != LITERAL or code2[0] != LITERAL:\\n",\n  "sre_parse.py(594):                     lo = code1[1]\\n",\n  "sre_parse.py(595):                     hi = code2[1]\\n",\n  "sre_parse.py(596):                     if hi < lo:\\n",\n  "sre_parse.py(599):                     setappend((RANGE, (lo, hi)))\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(552):                     break\\n",\n  "sre_parse.py(605):             set = _uniq(set)\\n",\n  " --- modulename: sre_parse, funcname: _uniq\\n",\n  "sre_parse.py(433):     return list(dict.fromkeys(items))\\n",\n  "sre_parse.py(607):             if _len(set) == 1 and set[0][0] is LITERAL:\\n",\n  "sre_parse.py(614):                 if negate:\\n",\n  "sre_parse.py(618):                 subpatternappend((IN, set))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(622):             here = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(623):             if this == \\"?\\":\\n",\n  "sre_parse.py(625):             elif this == \\"*\\":\\n",\n  "sre_parse.py(626):                 min, max = 0, MAXREPEAT\\n",\n  "sre_parse.py(663):             if subpattern:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(664):                 item = subpattern[-1:]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(166):             return SubPattern(self.state, self.data[index])\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(667):             if not item or item[0][0] is AT:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(670):             if item[0][0] in _REPEATCODES:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(673):             if item[0][0] is SUBPATTERN:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(677):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(680):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))\\n",\n  " --- modulename: sre_parse, funcname: __setitem__\\n",\n  "sre_parse.py(169):         self.data[index] = code\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(449):         return items[0]\\n",\n  "sre_parse.py(837):             if not source.match(\\")\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(840):             if group is not None:\\n",\n  "sre_parse.py(842):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(857):             group, add_flags, del_flags, p = av\\n",\n  "sre_parse.py(858):             if group is None and not add_flags and not del_flags:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(449):         return items[0]\\n",\n  "sre_parse.py(837):             if not source.match(\\")\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(840):             if group is not None:\\n",\n  "sre_parse.py(841):                 state.closegroup(group, p)\\n",\n  " --- modulename: sre_parse, funcname: closegroup\\n",\n  "sre_parse.py(97):         self.groupwidths[gid] = p.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(194):                 i, j = av[-1].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(198):                 i, j = av[2].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(199):                 lo = lo + i * av[0]\\n",\n  "sre_parse.py(200):                 hi = hi + j * av[1]\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(195):                 lo = lo + i\\n",\n  "sre_parse.py(196):                 hi = hi + j\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(842):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(529):             subpatternappend((LITERAL, _ord(this)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(857):             group, add_flags, del_flags, p = av\\n",\n  "sre_parse.py(858):             if group is None and not add_flags and not del_flags:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(521):                         break\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(686):             start = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(687):             group = True\\n",\n  "sre_parse.py(688):             name = None\\n",\n  "sre_parse.py(689):             add_flags = 0\\n",\n  "sre_parse.py(690):             del_flags = 0\\n",\n  "sre_parse.py(691):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(693):                 char = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(694):                 if char is None:\\n",\n  "sre_parse.py(696):                 if char == \\"P\\":\\n",\n  "sre_parse.py(698):                     if sourcematch(\\"<\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(700):                         name = source.getuntil(\\">\\", \\"group name\\")\\n",\n  " --- modulename: sre_parse, funcname: getuntil\\n",\n  "sre_parse.py(268):         result = \'\'\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(281):             result += c\\n",\n  "sre_parse.py(270):             c = self.next\\n",\n  "sre_parse.py(271):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(272):             if c is None:\\n",\n  "sre_parse.py(277):             if c == terminator:\\n",\n  "sre_parse.py(278):                 if not result:\\n",\n  "sre_parse.py(282):         return result\\n",\n  "sre_parse.py(701):                         if not name.isidentifier():\\n",\n  "sre_parse.py(829):             if group is not None:\\n",\n  "sre_parse.py(830):                 try:\\n",\n  "sre_parse.py(831):                     group = state.opengroup(name)\\n",\n  " --- modulename: sre_parse, funcname: opengroup\\n",\n  "sre_parse.py(85):         gid = self.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(86):         self.groupwidths.append(None)\\n",\n  "sre_parse.py(87):         if self.groups > MAXGROUPS:\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(89):         if name is not None:\\n",\n  "sre_parse.py(90):             ogid = self.groupdict.get(name, None)\\n",\n  "sre_parse.py(91):             if ogid is not None:\\n",\n  "sre_parse.py(94):             self.groupdict[name] = gid\\n",\n  "sre_parse.py(95):         return gid\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(835):                            not (del_flags & SRE_FLAG_VERBOSE))\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(836):             p = _parse_sub(source, state, sub_verbose, nested + 1)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(449):         return items[0]\\n",\n  "sre_parse.py(837):             if not source.match(\\")\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(840):             if group is not None:\\n",\n  "sre_parse.py(841):                 state.closegroup(group, p)\\n",\n  " --- modulename: sre_parse, funcname: closegroup\\n",\n  "sre_parse.py(97):         self.groupwidths[gid] = p.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(842):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(519):                     this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(520):                     if this is None or this == \\"\\\\n\\":\\n",\n  "sre_parse.py(521):                         break\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(857):             group, add_flags, del_flags, p = av\\n",\n  "sre_parse.py(858):             if group is None and not add_flags and not del_flags:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(451):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(455):         prefix = None\\n",\n  "sre_parse.py(456):         for item in items:\\n",\n  "sre_parse.py(457):             if not item:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(459):             if prefix is None:\\n",\n  "sre_parse.py(460):                 prefix = item[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(456):         for item in items:\\n",\n  "sre_parse.py(457):             if not item:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(459):             if prefix is None:\\n",\n  "sre_parse.py(461):             elif item[0] != prefix:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(462):                 break\\n",\n  "sre_parse.py(473):     set = []\\n",\n  "sre_parse.py(474):     for item in items:\\n",\n  "sre_parse.py(475):         if len(item) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(477):         op, av = item[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(478):         if op is LITERAL:\\n",\n  "sre_parse.py(480):         elif op is IN and av[0][0] is not NEGATE:\\n",\n  "sre_parse.py(483):             break\\n",\n  "sre_parse.py(490):     subpattern.append((BRANCH, (None, items)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(491):     return subpattern\\n",\n  "sre_parse.py(837):             if not source.match(\\")\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(840):             if group is not None:\\n",\n  "sre_parse.py(842):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(237):         except IndexError:\\n",\n  "sre_parse.py(238):             self.next = None\\n",\n  "sre_parse.py(239):             return\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(508):             break # end of pattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(857):             group, add_flags, del_flags, p = av\\n",\n  "sre_parse.py(858):             if group is None and not add_flags and not del_flags:\\n",\n  "sre_parse.py(859):                 subpattern[i: i+1] = p\\n",\n  " --- modulename: sre_parse, funcname: __setitem__\\n",\n  "sre_parse.py(169):         self.data[index] = code\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(449):         return items[0]\\n",\n  "sre_parse.py(960):     p.state.flags = fix_flags(str, p.state.flags)\\n",\n  " --- modulename: sre_parse, funcname: fix_flags\\n",\n  "sre_parse.py(925):     if isinstance(src, str):\\n",\n  "sre_parse.py(926):         if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_parse.py(928):         if not flags & SRE_FLAG_ASCII:\\n",\n  "sre_parse.py(929):             flags |= SRE_FLAG_UNICODE\\n",\n  "sre_parse.py(937):     return flags\\n",\n  "sre_parse.py(962):     if source.next is not None:\\n",\n  "sre_parse.py(966):     if flags & SRE_FLAG_DEBUG:\\n",\n  "sre_parse.py(969):     return p\\n",\n  "sre_compile.py(768):     code = _code(p, flags)\\n",\n  " --- modulename: sre_compile, funcname: _code\\n",\n  "sre_compile.py(600):     flags = p.state.flags | flags\\n",\n  "sre_compile.py(601):     code = []\\n",\n  "sre_compile.py(604):     _compile_info(code, p, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile_info\\n",\n  "sre_compile.py(540):     lo, hi = pattern.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(181):                 i = MAXREPEAT - 1\\n",\n  "sre_parse.py(182):                 j = 0\\n",\n  "sre_parse.py(183):                 for av in av[1]:\\n",\n  "sre_parse.py(184):                     l, h = av.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(194):                 i, j = av[-1].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(177):             return self.width\\n",\n  "sre_parse.py(195):                 lo = lo + i\\n",\n  "sre_parse.py(196):                 hi = hi + j\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(185):                     i = min(i, l)\\n",\n  "sre_parse.py(186):                     j = max(j, h)\\n",\n  "sre_parse.py(183):                 for av in av[1]:\\n",\n  "sre_parse.py(184):                     l, h = av.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(194):                 i, j = av[-1].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(177):             return self.width\\n",\n  "sre_parse.py(195):                 lo = lo + i\\n",\n  "sre_parse.py(196):                 hi = hi + j\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(185):                     i = min(i, l)\\n",\n  "sre_parse.py(186):                     j = max(j, h)\\n",\n  "sre_parse.py(183):                 for av in av[1]:\\n",\n  "sre_parse.py(184):                     l, h = av.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(194):                 i, j = av[-1].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(177):             return self.width\\n",\n  "sre_parse.py(195):                 lo = lo + i\\n",\n  "sre_parse.py(196):                 hi = hi + j\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(185):                     i = min(i, l)\\n",\n  "sre_parse.py(186):                     j = max(j, h)\\n",\n  "sre_parse.py(183):                 for av in av[1]:\\n",\n  "sre_parse.py(184):                     l, h = av.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(194):                 i, j = av[-1].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(177):             return self.width\\n",\n  "sre_parse.py(195):                 lo = lo + i\\n",\n  "sre_parse.py(196):                 hi = hi + j\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(185):                     i = min(i, l)\\n",\n  "sre_parse.py(186):                     j = max(j, h)\\n",\n  "sre_parse.py(183):                 for av in av[1]:\\n",\n  "sre_parse.py(187):                 lo = lo + i\\n",\n  "sre_parse.py(188):                 hi = hi + j\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_compile.py(541):     if hi > MAXCODE:\\n",\n  "sre_compile.py(543):     if lo == 0:\\n",\n  "sre_compile.py(547):     prefix = []\\n",\n  "sre_compile.py(548):     prefix_skip = 0\\n",\n  "sre_compile.py(549):     charset = [] # not used\\n",\n  "sre_compile.py(550):     if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):\\n",\n  "sre_compile.py(552):         prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_literal_prefix\\n",\n  "sre_compile.py(463):     prefix = []\\n",\n  "sre_compile.py(464):     prefixappend = prefix.append\\n",\n  "sre_compile.py(465):     prefix_skip = None\\n",\n  "sre_compile.py(466):     iscased = _get_iscased(flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_iscased\\n",\n  "sre_compile.py(454):     if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(456):     elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(457):         return _sre.unicode_iscased\\n",\n  "sre_compile.py(467):     for op, av in pattern.data:\\n",\n  "sre_compile.py(468):         if op is LITERAL:\\n",\n  "sre_compile.py(469):             if iscased and iscased(av):\\n",\n  "sre_compile.py(471):             prefixappend(av)\\n",\n  "sre_compile.py(467):     for op, av in pattern.data:\\n",\n  "sre_compile.py(468):         if op is LITERAL:\\n",\n  "sre_compile.py(472):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(487):             break\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(490):     return prefix, prefix_skip, False\\n",\n  "sre_compile.py(554):         if not prefix:\\n",\n  "sre_compile.py(561):     emit = code.append\\n",\n  "sre_compile.py(562):     emit(INFO)\\n",\n  "sre_compile.py(563):     skip = len(code); emit(0)\\n",\n  "sre_compile.py(565):     mask = 0\\n",\n  "sre_compile.py(566):     if prefix:\\n",\n  "sre_compile.py(567):         mask = SRE_INFO_PREFIX\\n",\n  "sre_compile.py(568):         if prefix_skip is None and got_all:\\n",\n  "sre_compile.py(572):     emit(mask)\\n",\n  "sre_compile.py(574):     if lo < MAXCODE:\\n",\n  "sre_compile.py(575):         emit(lo)\\n",\n  "sre_compile.py(579):     emit(min(hi, MAXCODE))\\n",\n  "sre_compile.py(581):     if prefix:\\n",\n  "sre_compile.py(582):         emit(len(prefix)) # length\\n",\n  "sre_compile.py(583):         if prefix_skip is None:\\n",\n  "sre_compile.py(584):             prefix_skip =  len(prefix)\\n",\n  "sre_compile.py(585):         emit(prefix_skip) # skip\\n",\n  "sre_compile.py(586):         code.extend(prefix)\\n",\n  "sre_compile.py(588):         code.extend(_generate_overlap_table(prefix))\\n",\n  " --- modulename: sre_compile, funcname: _generate_overlap_table\\n",\n  "sre_compile.py(441):     table = [0] * len(prefix)\\n",\n  "sre_compile.py(442):     for i in range(1, len(prefix)):\\n",\n  "sre_compile.py(451):     return table\\n",\n  "sre_compile.py(593):     code[skip] = len(code) - skip\\n",\n  "sre_compile.py(607):     _compile(code, p.data, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(95):             elif flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(98):             elif not iscased(av):\\n",\n  "sre_compile.py(99):                 emit(op)\\n",\n  "sre_compile.py(100):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(172):         elif op in SUCCESS_CODES:\\n",\n  "sre_compile.py(174):         elif op in ASSERT_CODES:\\n",\n  "sre_compile.py(187):         elif op is CALL:\\n",\n  "sre_compile.py(193):         elif op is AT:\\n",\n  "sre_compile.py(202):         elif op is BRANCH:\\n",\n  "sre_compile.py(203):             emit(op)\\n",\n  "sre_compile.py(204):             tail = []\\n",\n  "sre_compile.py(205):             tailappend = tail.append\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(207):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(209):                 _compile(code, av, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(163):             group, add_flags, del_flags, p = av\\n",\n  "sre_compile.py(164):             if group:\\n",\n  "sre_compile.py(165):                 emit(MARK)\\n",\n  "sre_compile.py(166):                 emit((group-1)*2)\\n",\n  "sre_compile.py(168):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))\\n",\n  " --- modulename: sre_compile, funcname: _combine_flags\\n",\n  "sre_compile.py(67):     if add_flags & TYPE_FLAGS:\\n",\n  "sre_compile.py(69):     return (flags | add_flags) & ~del_flags\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(95):             elif flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(98):             elif not iscased(av):\\n",\n  "sre_compile.py(99):                 emit(op)\\n",\n  "sre_compile.py(100):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(169):             if group:\\n",\n  "sre_compile.py(170):                 emit(MARK)\\n",\n  "sre_compile.py(171):                 emit((group-1)*2+1)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(210):                 emit(JUMP)\\n",\n  "sre_compile.py(211):                 tailappend(_len(code)); emit(0)\\n",\n  "sre_compile.py(212):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(207):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(209):                 _compile(code, av, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(163):             group, add_flags, del_flags, p = av\\n",\n  "sre_compile.py(164):             if group:\\n",\n  "sre_compile.py(165):                 emit(MARK)\\n",\n  "sre_compile.py(166):                 emit((group-1)*2)\\n",\n  "sre_compile.py(168):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))\\n",\n  " --- modulename: sre_compile, funcname: _combine_flags\\n",\n  "sre_compile.py(67):     if add_flags & TYPE_FLAGS:\\n",\n  "sre_compile.py(69):     return (flags | add_flags) & ~del_flags\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(163):             group, add_flags, del_flags, p = av\\n",\n  "sre_compile.py(164):             if group:\\n",\n  "sre_compile.py(168):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))\\n",\n  " --- modulename: sre_compile, funcname: _combine_flags\\n",\n  "sre_compile.py(67):     if add_flags & TYPE_FLAGS:\\n",\n  "sre_compile.py(68):         flags &= ~TYPE_FLAGS\\n",\n  "sre_compile.py(69):     return (flags | add_flags) & ~del_flags\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(88):             iscased = _sre.ascii_iscased\\n",\n  "sre_compile.py(89):             tolower = _sre.ascii_tolower\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(296):                 elif op is RANGE:\\n",\n  "sre_compile.py(297):                     r = range(av[0], av[1]+1)\\n",\n  "sre_compile.py(298):                     if fixup:\\n",\n  "sre_compile.py(299):                         if fixes:\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(308):                         if not hascased:\\n",\n  "sre_compile.py(309):                             hascased = any(map(iscased, r))\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(339):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(351):             if q - p == 1:\\n",\n  "sre_compile.py(352):                 out.append((LITERAL, p))\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(351):             if q - p == 1:\\n",\n  "sre_compile.py(354):                 out.append((RANGE, (p, q - 1)))\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(355):         out += tail\\n",\n  "sre_compile.py(357):         if hascased or len(out) < len(charset):\\n",\n  "sre_compile.py(358):             return out, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(125):             elif not fixes:  # ascii\\n",\n  "sre_compile.py(126):                 emit(IN_IGNORE)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(257):             emit(av)\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(259):             emit(av[0])\\n",\n  "sre_compile.py(260):             emit(av[1])\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(138):             if flags & SRE_FLAG_TEMPLATE:\\n",\n  "sre_compile.py(140):             if _simple(av[2]):\\n",\n  " --- modulename: sre_compile, funcname: _simple\\n",\n  "sre_compile.py(425):     if len(p) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_compile.py(427):     op, av = p[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(428):     if op is SUBPATTERN:\\n",\n  "sre_compile.py(430):     return op in _UNIT_CODES\\n",\n  "sre_compile.py(141):                 if op is MAX_REPEAT:\\n",\n  "sre_compile.py(142):                     emit(REPEAT_ONE)\\n",\n  "sre_compile.py(145):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(146):                 emit(av[0])\\n",\n  "sre_compile.py(147):                 emit(av[1])\\n",\n  "sre_compile.py(148):                 _compile(code, av[2], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(88):             iscased = _sre.ascii_iscased\\n",\n  "sre_compile.py(89):             tolower = _sre.ascii_tolower\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(296):                 elif op is RANGE:\\n",\n  "sre_compile.py(297):                     r = range(av[0], av[1]+1)\\n",\n  "sre_compile.py(298):                     if fixup:\\n",\n  "sre_compile.py(299):                         if fixes:\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(308):                         if not hascased:\\n",\n  "sre_compile.py(309):                             hascased = any(map(iscased, r))\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(296):                 elif op is RANGE:\\n",\n  "sre_compile.py(297):                     r = range(av[0], av[1]+1)\\n",\n  "sre_compile.py(298):                     if fixup:\\n",\n  "sre_compile.py(299):                         if fixes:\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(308):                         if not hascased:\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(341):             runs = None\\n",\n  "sre_compile.py(342):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(363):     if len(charmap) == 256:\\n",\n  "sre_compile.py(364):         data = _mk_bitmap(charmap)\\n",\n  " --- modulename: sre_compile, funcname: _mk_bitmap\\n",\n  "sre_compile.py(412):     s = bits.translate(_BITS_TRANS)[::-1]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  " --- modulename: sre_compile, funcname: <listcomp>\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(365):         out.append((CHARSET, data))\\n",\n  "sre_compile.py(366):         out += tail\\n",\n  "sre_compile.py(367):         return out, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(125):             elif not fixes:  # ascii\\n",\n  "sre_compile.py(126):                 emit(IN_IGNORE)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n",\n  "sre_compile.py(262):             code.extend(av)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(149):                 emit(SUCCESS)\\n",\n  "sre_compile.py(150):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(169):             if group:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(169):             if group:\\n",\n  "sre_compile.py(170):                 emit(MARK)\\n",\n  "sre_compile.py(171):                 emit((group-1)*2+1)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(210):                 emit(JUMP)\\n",\n  "sre_compile.py(211):                 tailappend(_len(code)); emit(0)\\n",\n  "sre_compile.py(212):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(207):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(209):                 _compile(code, av, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(95):             elif flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(98):             elif not iscased(av):\\n",\n  "sre_compile.py(99):                 emit(op)\\n",\n  "sre_compile.py(100):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(163):             group, add_flags, del_flags, p = av\\n",\n  "sre_compile.py(164):             if group:\\n",\n  "sre_compile.py(165):                 emit(MARK)\\n",\n  "sre_compile.py(166):                 emit((group-1)*2)\\n",\n  "sre_compile.py(168):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))\\n",\n  " --- modulename: sre_compile, funcname: _combine_flags\\n",\n  "sre_compile.py(67):     if add_flags & TYPE_FLAGS:\\n",\n  "sre_compile.py(69):     return (flags | add_flags) & ~del_flags\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(163):             group, add_flags, del_flags, p = av\\n",\n  "sre_compile.py(164):             if group:\\n",\n  "sre_compile.py(168):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))\\n",\n  " --- modulename: sre_compile, funcname: _combine_flags\\n",\n  "sre_compile.py(67):     if add_flags & TYPE_FLAGS:\\n",\n  "sre_compile.py(68):         flags &= ~TYPE_FLAGS\\n",\n  "sre_compile.py(69):     return (flags | add_flags) & ~del_flags\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(88):             iscased = _sre.ascii_iscased\\n",\n  "sre_compile.py(89):             tolower = _sre.ascii_tolower\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(296):                 elif op is RANGE:\\n",\n  "sre_compile.py(297):                     r = range(av[0], av[1]+1)\\n",\n  "sre_compile.py(298):                     if fixup:\\n",\n  "sre_compile.py(299):                         if fixes:\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(308):                         if not hascased:\\n",\n  "sre_compile.py(309):                             hascased = any(map(iscased, r))\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(339):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(351):             if q - p == 1:\\n",\n  "sre_compile.py(352):                 out.append((LITERAL, p))\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(351):             if q - p == 1:\\n",\n  "sre_compile.py(354):                 out.append((RANGE, (p, q - 1)))\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(355):         out += tail\\n",\n  "sre_compile.py(357):         if hascased or len(out) < len(charset):\\n",\n  "sre_compile.py(358):             return out, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(125):             elif not fixes:  # ascii\\n",\n  "sre_compile.py(126):                 emit(IN_IGNORE)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(257):             emit(av)\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(259):             emit(av[0])\\n",\n  "sre_compile.py(260):             emit(av[1])\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(138):             if flags & SRE_FLAG_TEMPLATE:\\n",\n  "sre_compile.py(140):             if _simple(av[2]):\\n",\n  " --- modulename: sre_compile, funcname: _simple\\n",\n  "sre_compile.py(425):     if len(p) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_compile.py(427):     op, av = p[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(428):     if op is SUBPATTERN:\\n",\n  "sre_compile.py(430):     return op in _UNIT_CODES\\n",\n  "sre_compile.py(141):                 if op is MAX_REPEAT:\\n",\n  "sre_compile.py(142):                     emit(REPEAT_ONE)\\n",\n  "sre_compile.py(145):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(146):                 emit(av[0])\\n",\n  "sre_compile.py(147):                 emit(av[1])\\n",\n  "sre_compile.py(148):                 _compile(code, av[2], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(88):             iscased = _sre.ascii_iscased\\n",\n  "sre_compile.py(89):             tolower = _sre.ascii_tolower\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(296):                 elif op is RANGE:\\n",\n  "sre_compile.py(297):                     r = range(av[0], av[1]+1)\\n",\n  "sre_compile.py(298):                     if fixup:\\n",\n  "sre_compile.py(299):                         if fixes:\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(308):                         if not hascased:\\n",\n  "sre_compile.py(309):                             hascased = any(map(iscased, r))\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(296):                 elif op is RANGE:\\n",\n  "sre_compile.py(297):                     r = range(av[0], av[1]+1)\\n",\n  "sre_compile.py(298):                     if fixup:\\n",\n  "sre_compile.py(299):                         if fixes:\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(307):                                 charmap[i] = 1\\n",\n  "sre_compile.py(306):                             for i in map(fixup, r):\\n",\n  "sre_compile.py(308):                         if not hascased:\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(341):             runs = None\\n",\n  "sre_compile.py(342):             break\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(363):     if len(charmap) == 256:\\n",\n  "sre_compile.py(364):         data = _mk_bitmap(charmap)\\n",\n  " --- modulename: sre_compile, funcname: _mk_bitmap\\n",\n  "sre_compile.py(412):     s = bits.translate(_BITS_TRANS)[::-1]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  " --- modulename: sre_compile, funcname: <listcomp>\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(365):         out.append((CHARSET, data))\\n",\n  "sre_compile.py(366):         out += tail\\n",\n  "sre_compile.py(367):         return out, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(125):             elif not fixes:  # ascii\\n",\n  "sre_compile.py(126):                 emit(IN_IGNORE)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n",\n  "sre_compile.py(262):             code.extend(av)\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(149):                 emit(SUCCESS)\\n",\n  "sre_compile.py(150):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(169):             if group:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(169):             if group:\\n",\n  "sre_compile.py(170):                 emit(MARK)\\n",\n  "sre_compile.py(171):                 emit((group-1)*2+1)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(95):             elif flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(98):             elif not iscased(av):\\n",\n  "sre_compile.py(99):                 emit(op)\\n",\n  "sre_compile.py(100):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(210):                 emit(JUMP)\\n",\n  "sre_compile.py(211):                 tailappend(_len(code)); emit(0)\\n",\n  "sre_compile.py(212):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(207):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(209):                 _compile(code, av, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(163):             group, add_flags, del_flags, p = av\\n",\n  "sre_compile.py(164):             if group:\\n",\n  "sre_compile.py(165):                 emit(MARK)\\n",\n  "sre_compile.py(166):                 emit((group-1)*2)\\n",\n  "sre_compile.py(168):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))\\n",\n  " --- modulename: sre_compile, funcname: _combine_flags\\n",\n  "sre_compile.py(67):     if add_flags & TYPE_FLAGS:\\n",\n  "sre_compile.py(69):     return (flags | add_flags) & ~del_flags\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(169):             if group:\\n",\n  "sre_compile.py(170):                 emit(MARK)\\n",\n  "sre_compile.py(171):                 emit((group-1)*2+1)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(210):                 emit(JUMP)\\n",\n  "sre_compile.py(211):                 tailappend(_len(code)); emit(0)\\n",\n  "sre_compile.py(212):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(213):             emit(FAILURE) # end of branch\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(215):                 code[tail] = _len(code) - tail\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(215):                 code[tail] = _len(code) - tail\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(215):                 code[tail] = _len(code) - tail\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(215):                 code[tail] = _len(code) - tail\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(609):     code.append(SUCCESS)\\n",\n  "sre_compile.py(611):     return code\\n",\n  "sre_compile.py(770):     if flags & SRE_FLAG_DEBUG:\\n",\n  "sre_compile.py(775):     groupindex = p.state.groupdict\\n",\n  "sre_compile.py(776):     indexgroup = [None] * p.state.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(777):     for k, i in groupindex.items():\\n",\n  "sre_compile.py(778):         indexgroup[i] = k\\n",\n  "sre_compile.py(777):     for k, i in groupindex.items():\\n",\n  "sre_compile.py(778):         indexgroup[i] = k\\n",\n  "sre_compile.py(777):     for k, i in groupindex.items():\\n",\n  "sre_compile.py(778):         indexgroup[i] = k\\n",\n  "sre_compile.py(777):     for k, i in groupindex.items():\\n",\n  "sre_compile.py(778):         indexgroup[i] = k\\n",\n  "sre_compile.py(777):     for k, i in groupindex.items():\\n",\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "sre_compile.py(781):         pattern, flags | p.state.flags, code,\\n",\n  "sre_compile.py(782):         p.state.groups-1,\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(783):         groupindex, tuple(indexgroup)\\n",\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "re.py(305):     if not (flags & DEBUG):\\n",\n  " --- modulename: enum, funcname: __and__\\n",\n  "enum.py(978):         if not isinstance(other, (self.__class__, int)):\\n",\n  "enum.py(980):         return self.__class__(self._value_ & self.__class__(other)._value_)\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  "re.py(306):         if len(_cache) >= _MAXCACHE:\\n",\n  "re.py(312):         _cache[type(pattern), pattern, flags] = p\\n",\n  "re.py(313):     return p\\n",\n  "string.py(159): class Formatter:\\n",\n  " --- modulename: string, funcname: Formatter\\n",\n  "string.py(159): class Formatter:\\n",\n  "string.py(160):     def format(self, format_string, /, *args, **kwargs):\\n",\n  "string.py(163):     def vformat(self, format_string, args, kwargs):\\n",\n  "string.py(169):     def _vformat(self, format_string, args, kwargs, used_args, recursion_depth,\\n",\n  "string.py(223):     def get_value(self, key, args, kwargs):\\n",\n  "string.py(230):     def check_unused_args(self, used_args, args, kwargs):\\n",\n  "string.py(234):     def format_field(self, value, format_spec):\\n",\n  "string.py(238):     def convert_field(self, value, conversion):\\n",\n  "string.py(258):     def parse(self, format_string):\\n",\n  "string.py(267):     def get_field(self, field_name, args, kwargs):\\n",\n  "<frozen importlib._bootstrap>(691): <frozen importlib._bootstrap>(692): <frozen importlib._bootstrap>(693):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap>(695): <frozen importlib._bootstrap>(697): <frozen importlib._bootstrap>(987): <frozen importlib._bootstrap>(996):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(161):  --- modulename: _bootstrap, funcname: release\\n",\n  "<frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(115): <frozen importlib._bootstrap>(117): <frozen importlib._bootstrap>(118): <frozen importlib._bootstrap>(119): <frozen importlib._bootstrap>(120): <frozen importlib._bootstrap>(121):  --- modulename: _bootstrap, funcname: cb\\n",\n  "<frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(191): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(194): __init__.py(29): from string import Formatter as StrFormatter\\n",\n  "__init__.py(32): __all__ = [\'BASIC_FORMAT\', \'BufferingFormatter\', \'CRITICAL\', \'DEBUG\', \'ERROR\',\\n",\n  "__init__.py(42): import threading\\n",\n  "__init__.py(44): __author__  = \\"Vinay Sajip <vinay_sajip@red-dove.com>\\"\\n",\n  "__init__.py(45): __status__  = \\"production\\"\\n",\n  "__init__.py(47): __version__ = \\"0.5.1.2\\"\\n",\n  "__init__.py(48): __date__    = \\"07 February 2010\\"\\n",\n  "__init__.py(57): _startTime = time.time()\\n",\n  "__init__.py(63): raiseExceptions = True\\n",\n  "__init__.py(68): logThreads = True\\n",\n  "__init__.py(73): logMultiprocessing = True\\n",\n  "__init__.py(78): logProcesses = True\\n",\n  "__init__.py(91): CRITICAL = 50\\n",\n  "__init__.py(92): FATAL = CRITICAL\\n",\n  "__init__.py(93): ERROR = 40\\n",\n  "__init__.py(94): WARNING = 30\\n",\n  "__init__.py(95): WARN = WARNING\\n",\n  "__init__.py(96): INFO = 20\\n",\n  "__init__.py(97): DEBUG = 10\\n",\n  "__init__.py(98): NOTSET = 0\\n",\n  "__init__.py(101):     CRITICAL: \'CRITICAL\',\\n",\n  "__init__.py(102):     ERROR: \'ERROR\',\\n",\n  "__init__.py(103):     WARNING: \'WARNING\',\\n",\n  "__init__.py(104):     INFO: \'INFO\',\\n",\n  "__init__.py(105):     DEBUG: \'DEBUG\',\\n",\n  "__init__.py(106):     NOTSET: \'NOTSET\',\\n",\n  "__init__.py(100): _levelToName = {\\n",\n  "__init__.py(109):     \'CRITICAL\': CRITICAL,\\n",\n  "__init__.py(110):     \'FATAL\': FATAL,\\n",\n  "__init__.py(111):     \'ERROR\': ERROR,\\n",\n  "__init__.py(112):     \'WARN\': WARNING,\\n",\n  "__init__.py(113):     \'WARNING\': WARNING,\\n",\n  "__init__.py(114):     \'INFO\': INFO,\\n",\n  "__init__.py(115):     \'DEBUG\': DEBUG,\\n",\n  "__init__.py(116):     \'NOTSET\': NOTSET,\\n",\n  "__init__.py(108): _nameToLevel = {\\n",\n  "__init__.py(119): def getLevelName(level):\\n",\n  "__init__.py(146): def addLevelName(level, levelName):\\n",\n  "__init__.py(159): if hasattr(sys, \'_getframe\'):\\n",\n  "__init__.py(160):     currentframe = lambda: sys._getframe(3)\\n",\n  "__init__.py(181): _srcfile = os.path.normcase(addLevelName.__code__.co_filename)\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "__init__.py(193): def _checkLevel(level):\\n",\n  "__init__.py(216): _lock = threading.RLock()\\n",\n  " --- modulename: threading, funcname: RLock\\n",\n  "threading.py(91):     if _CRLock is None:\\n",\n  "threading.py(93):     return _CRLock(*args, **kwargs)\\n",\n  "__init__.py(218): def _acquireLock():\\n",\n  "__init__.py(227): def _releaseLock():\\n",\n  "__init__.py(237): if not hasattr(os, \'register_at_fork\'):  # Windows and friends.\\n",\n  "__init__.py(244):     _at_fork_reinit_lock_weakset = weakref.WeakSet()\\n",\n  " --- modulename: _weakrefset, funcname: __init__\\n",\n  "_weakrefset.py(38):         self.data = set()\\n",\n  "_weakrefset.py(39):         def _remove(item, selfref=ref(self)):\\n",\n  "_weakrefset.py(46):         self._remove = _remove\\n",\n  "_weakrefset.py(48):         self._pending_removals = []\\n",\n  "_weakrefset.py(49):         self._iterating = set()\\n",\n  "_weakrefset.py(50):         if data is not None:\\n",\n  "__init__.py(246):     def _register_at_fork_reinit_lock(instance):\\n",\n  "__init__.py(253):     def _after_at_fork_child_reinit_locks():\\n",\n  "__init__.py(261):     os.register_at_fork(before=_acquireLock,\\n",\n  "__init__.py(262):                         after_in_child=_after_at_fork_child_reinit_locks,\\n",\n  "__init__.py(263):                         after_in_parent=_releaseLock)\\n",\n  "__init__.py(261):     os.register_at_fork(before=_acquireLock,\\n",\n  "__init__.py(270): class LogRecord(object):\\n",\n  " --- modulename: __init__, funcname: LogRecord\\n",\n  "__init__.py(270): class LogRecord(object):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "__init__.py(271):     \\"\\"\\"\\n",\n  "__init__.py(282):     def __init__(self, name, level, pathname, lineno,\\n",\n  "__init__.py(354):     def __repr__(self):\\n",\n  "__init__.py(358):     def getMessage(self):\\n",\n  "__init__.py(373): _logRecordFactory = LogRecord\\n",\n  "__init__.py(375): def setLogRecordFactory(factory):\\n",\n  "__init__.py(385): def getLogRecordFactory():\\n",\n  "__init__.py(392): def makeLogRecord(dict):\\n",\n  "__init__.py(407): _str_formatter = StrFormatter()\\n",\n  "__init__.py(408): del StrFormatter\\n",\n  "__init__.py(411): class PercentStyle(object):\\n",\n  " --- modulename: __init__, funcname: PercentStyle\\n",\n  "__init__.py(411): class PercentStyle(object):\\n",\n  "__init__.py(413):     default_format = \'%(message)s\'\\n",\n  "__init__.py(414):     asctime_format = \'%(asctime)s\'\\n",\n  "__init__.py(415):     asctime_search = \'%(asctime)\'\\n",\n  "__init__.py(416):     validation_pattern = re.compile(r\'%\\\\(\\\\w+\\\\)[#0+ -]*(\\\\*|\\\\d+)?(\\\\.(\\\\*|\\\\d+))?[diouxefgcrsa%]\', re.I)\\n",\n  " --- modulename: re, funcname: compile\\n",\n  "re.py(252):     return _compile(pattern, flags)\\n",\n  " --- modulename: re, funcname: _compile\\n",\n  "re.py(291):     if isinstance(flags, RegexFlag):\\n",\n  "re.py(292):         flags = flags.value\\n",\n  " --- modulename: types, funcname: __get__\\n",\n  "types.py(172):         if instance is None:\\n",\n  "types.py(176):         elif self.fget is None:\\n",\n  "types.py(178):         return self.fget(instance)\\n",\n  " --- modulename: enum, funcname: value\\n",\n  "enum.py(795):         return self._value_\\n",\n  "re.py(293):     try:\\n",\n  "re.py(294):         return _cache[type(pattern), pattern, flags]\\n",\n  "re.py(295):     except KeyError:\\n",\n  "re.py(296):         pass\\n",\n  "re.py(297):     if isinstance(pattern, Pattern):\\n",\n  "re.py(302):     if not sre_compile.isstring(pattern):\\n",\n  " --- modulename: sre_compile, funcname: isstring\\n",\n  "sre_compile.py(596):     return isinstance(obj, (str, bytes))\\n",\n  "re.py(304):     p = sre_compile.compile(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: compile\\n",\n  "sre_compile.py(762):     if isstring(p):\\n",\n  " --- modulename: sre_compile, funcname: isstring\\n",\n  "sre_compile.py(596):     return isinstance(obj, (str, bytes))\\n",\n  "sre_compile.py(763):         pattern = p\\n",\n  "sre_compile.py(764):         p = sre_parse.parse(p, flags)\\n",\n  " --- modulename: sre_parse, funcname: parse\\n",\n  "sre_parse.py(942):     source = Tokenizer(str)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(225):         self.istext = isinstance(string, str)\\n",\n  "sre_parse.py(226):         self.string = string\\n",\n  "sre_parse.py(227):         if not self.istext:\\n",\n  "sre_parse.py(229):         self.decoded_string = string\\n",\n  "sre_parse.py(230):         self.index = 0\\n",\n  "sre_parse.py(231):         self.next = None\\n",\n  "sre_parse.py(232):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(944):     if state is None:\\n",\n  "sre_parse.py(945):         state = State()\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(77):         self.flags = 0\\n",\n  "sre_parse.py(78):         self.groupdict = {}\\n",\n  "sre_parse.py(79):         self.groupwidths = [None]  # group 0\\n",\n  "sre_parse.py(80):         self.lookbehindgroups = None\\n",\n  "sre_parse.py(946):     state.flags = flags\\n",\n  "sre_parse.py(947):     state.str = str\\n",\n  "sre_parse.py(949):     try:\\n",\n  "sre_parse.py(950):         p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(529):             subpatternappend((LITERAL, _ord(this)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(525):             code = _escape(source, this, state)\\n",\n  " --- modulename: sre_parse, funcname: _escape\\n",\n  "sre_parse.py(357):     code = CATEGORIES.get(escape)\\n",\n  "sre_parse.py(358):     if code:\\n",\n  "sre_parse.py(360):     code = ESCAPES.get(escape)\\n",\n  "sre_parse.py(361):     if code:\\n",\n  "sre_parse.py(363):     try:\\n",\n  "sre_parse.py(364):         c = escape[1:2]\\n",\n  "sre_parse.py(365):         if c == \\"x\\":\\n",\n  "sre_parse.py(371):         elif c == \\"u\\" and source.istext:\\n",\n  "sre_parse.py(377):         elif c == \\"U\\" and source.istext:\\n",\n  "sre_parse.py(385):         elif c == \\"N\\" and source.istext:\\n",\n  "sre_parse.py(397):         elif c == \\"0\\":\\n",\n  "sre_parse.py(401):         elif c in DIGITS:\\n",\n  "sre_parse.py(424):         if len(escape) == 2:\\n",\n  "sre_parse.py(425):             if c in ASCIILETTERS:\\n",\n  "sre_parse.py(427):             return LITERAL, ord(escape[1])\\n",\n  "sre_parse.py(526):             subpatternappend(code)\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(525):             code = _escape(source, this, state)\\n",\n  " --- modulename: sre_parse, funcname: _escape\\n",\n  "sre_parse.py(357):     code = CATEGORIES.get(escape)\\n",\n  "sre_parse.py(358):     if code:\\n",\n  "sre_parse.py(359):         return code\\n",\n  "sre_parse.py(526):             subpatternappend(code)\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(622):             here = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(623):             if this == \\"?\\":\\n",\n  "sre_parse.py(625):             elif this == \\"*\\":\\n",\n  "sre_parse.py(628):             elif this == \\"+\\":\\n",\n  "sre_parse.py(629):                 min, max = 1, MAXREPEAT\\n",\n  "sre_parse.py(663):             if subpattern:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(664):                 item = subpattern[-1:]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(166):             return SubPattern(self.state, self.data[index])\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(667):             if not item or item[0][0] is AT:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(670):             if item[0][0] in _REPEATCODES:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(673):             if item[0][0] is SUBPATTERN:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(677):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(680):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))\\n",\n  " --- modulename: sre_parse, funcname: __setitem__\\n",\n  "sre_parse.py(169):         self.data[index] = code\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(525):             code = _escape(source, this, state)\\n",\n  " --- modulename: sre_parse, funcname: _escape\\n",\n  "sre_parse.py(357):     code = CATEGORIES.get(escape)\\n",\n  "sre_parse.py(358):     if code:\\n",\n  "sre_parse.py(360):     code = ESCAPES.get(escape)\\n",\n  "sre_parse.py(361):     if code:\\n",\n  "sre_parse.py(363):     try:\\n",\n  "sre_parse.py(364):         c = escape[1:2]\\n",\n  "sre_parse.py(365):         if c == \\"x\\":\\n",\n  "sre_parse.py(371):         elif c == \\"u\\" and source.istext:\\n",\n  "sre_parse.py(377):         elif c == \\"U\\" and source.istext:\\n",\n  "sre_parse.py(385):         elif c == \\"N\\" and source.istext:\\n",\n  "sre_parse.py(397):         elif c == \\"0\\":\\n",\n  "sre_parse.py(401):         elif c in DIGITS:\\n",\n  "sre_parse.py(424):         if len(escape) == 2:\\n",\n  "sre_parse.py(425):             if c in ASCIILETTERS:\\n",\n  "sre_parse.py(427):             return LITERAL, ord(escape[1])\\n",\n  "sre_parse.py(526):             subpatternappend(code)\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(532):             here = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(534):             set = []\\n",\n  "sre_parse.py(535):             setappend = set.append\\n",\n  "sre_parse.py(538):             if source.next == \'[\':\\n",\n  "sre_parse.py(544):             negate = sourcematch(\\"^\\")\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(570):                     that = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(571):                     if that is None:\\n",\n  "sre_parse.py(574):                     if that == \\"]\\":\\n",\n  "sre_parse.py(575):                         if code1[0] is IN:\\n",\n  "sre_parse.py(577):                         setappend(code1)\\n",\n  "sre_parse.py(578):                         setappend((LITERAL, _ord(\\"-\\")))\\n",\n  "sre_parse.py(579):                         break\\n",\n  "sre_parse.py(605):             set = _uniq(set)\\n",\n  " --- modulename: sre_parse, funcname: _uniq\\n",\n  "sre_parse.py(433):     return list(dict.fromkeys(items))\\n",\n  "sre_parse.py(607):             if _len(set) == 1 and set[0][0] is LITERAL:\\n",\n  "sre_parse.py(614):                 if negate:\\n",\n  "sre_parse.py(618):                 subpatternappend((IN, set))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(622):             here = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(623):             if this == \\"?\\":\\n",\n  "sre_parse.py(625):             elif this == \\"*\\":\\n",\n  "sre_parse.py(626):                 min, max = 0, MAXREPEAT\\n",\n  "sre_parse.py(663):             if subpattern:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(664):                 item = subpattern[-1:]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(166):             return SubPattern(self.state, self.data[index])\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(667):             if not item or item[0][0] is AT:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(670):             if item[0][0] in _REPEATCODES:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(673):             if item[0][0] is SUBPATTERN:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(677):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(680):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))\\n",\n  " --- modulename: sre_parse, funcname: __setitem__\\n",\n  "sre_parse.py(169):         self.data[index] = code\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(686):             start = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(687):             group = True\\n",\n  "sre_parse.py(688):             name = None\\n",\n  "sre_parse.py(689):             add_flags = 0\\n",\n  "sre_parse.py(690):             del_flags = 0\\n",\n  "sre_parse.py(691):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(829):             if group is not None:\\n",\n  "sre_parse.py(830):                 try:\\n",\n  "sre_parse.py(831):                     group = state.opengroup(name)\\n",\n  " --- modulename: sre_parse, funcname: opengroup\\n",\n  "sre_parse.py(85):         gid = self.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(86):         self.groupwidths.append(None)\\n",\n  "sre_parse.py(87):         if self.groups > MAXGROUPS:\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(89):         if name is not None:\\n",\n  "sre_parse.py(95):         return gid\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(836):             p = _parse_sub(source, state, sub_verbose, nested + 1)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(525):             code = _escape(source, this, state)\\n",\n  " --- modulename: sre_parse, funcname: _escape\\n",\n  "sre_parse.py(357):     code = CATEGORIES.get(escape)\\n",\n  "sre_parse.py(358):     if code:\\n",\n  "sre_parse.py(360):     code = ESCAPES.get(escape)\\n",\n  "sre_parse.py(361):     if code:\\n",\n  "sre_parse.py(363):     try:\\n",\n  "sre_parse.py(364):         c = escape[1:2]\\n",\n  "sre_parse.py(365):         if c == \\"x\\":\\n",\n  "sre_parse.py(371):         elif c == \\"u\\" and source.istext:\\n",\n  "sre_parse.py(377):         elif c == \\"U\\" and source.istext:\\n",\n  "sre_parse.py(385):         elif c == \\"N\\" and source.istext:\\n",\n  "sre_parse.py(397):         elif c == \\"0\\":\\n",\n  "sre_parse.py(401):         elif c in DIGITS:\\n",\n  "sre_parse.py(424):         if len(escape) == 2:\\n",\n  "sre_parse.py(425):             if c in ASCIILETTERS:\\n",\n  "sre_parse.py(427):             return LITERAL, ord(escape[1])\\n",\n  "sre_parse.py(526):             subpatternappend(code)\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(525):             code = _escape(source, this, state)\\n",\n  " --- modulename: sre_parse, funcname: _escape\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(357):     code = CATEGORIES.get(escape)\\n",\n  "sre_parse.py(358):     if code:\\n",\n  "sre_parse.py(359):         return code\\n",\n  "sre_parse.py(526):             subpatternappend(code)\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(622):             here = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(623):             if this == \\"?\\":\\n",\n  "sre_parse.py(625):             elif this == \\"*\\":\\n",\n  "sre_parse.py(628):             elif this == \\"+\\":\\n",\n  "sre_parse.py(629):                 min, max = 1, MAXREPEAT\\n",\n  "sre_parse.py(663):             if subpattern:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(664):                 item = subpattern[-1:]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(166):             return SubPattern(self.state, self.data[index])\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(667):             if not item or item[0][0] is AT:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(670):             if item[0][0] in _REPEATCODES:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(673):             if item[0][0] is SUBPATTERN:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(677):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(680):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))\\n",\n  " --- modulename: sre_parse, funcname: __setitem__\\n",\n  "sre_parse.py(169):         self.data[index] = code\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(451):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(455):         prefix = None\\n",\n  "sre_parse.py(456):         for item in items:\\n",\n  "sre_parse.py(457):             if not item:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(459):             if prefix is None:\\n",\n  "sre_parse.py(460):                 prefix = item[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(456):         for item in items:\\n",\n  "sre_parse.py(457):             if not item:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(459):             if prefix is None:\\n",\n  "sre_parse.py(461):             elif item[0] != prefix:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(462):                 break\\n",\n  "sre_parse.py(473):     set = []\\n",\n  "sre_parse.py(474):     for item in items:\\n",\n  "sre_parse.py(475):         if len(item) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(477):         op, av = item[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(478):         if op is LITERAL:\\n",\n  "sre_parse.py(479):             set.append((op, av))\\n",\n  "sre_parse.py(474):     for item in items:\\n",\n  "sre_parse.py(475):         if len(item) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(477):         op, av = item[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(478):         if op is LITERAL:\\n",\n  "sre_parse.py(480):         elif op is IN and av[0][0] is not NEGATE:\\n",\n  "sre_parse.py(483):             break\\n",\n  "sre_parse.py(490):     subpattern.append((BRANCH, (None, items)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(491):     return subpattern\\n",\n  "sre_parse.py(837):             if not source.match(\\")\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(840):             if group is not None:\\n",\n  "sre_parse.py(841):                 state.closegroup(group, p)\\n",\n  " --- modulename: sre_parse, funcname: closegroup\\n",\n  "sre_parse.py(97):         self.groupwidths[gid] = p.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(181):                 i = MAXREPEAT - 1\\n",\n  "sre_parse.py(182):                 j = 0\\n",\n  "sre_parse.py(183):                 for av in av[1]:\\n",\n  "sre_parse.py(184):                     l, h = av.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(185):                     i = min(i, l)\\n",\n  "sre_parse.py(186):                     j = max(j, h)\\n",\n  "sre_parse.py(183):                 for av in av[1]:\\n",\n  "sre_parse.py(184):                     l, h = av.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(198):                 i, j = av[2].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(199):                 lo = lo + i * av[0]\\n",\n  "sre_parse.py(200):                 hi = hi + j * av[1]\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(185):                     i = min(i, l)\\n",\n  "sre_parse.py(186):                     j = max(j, h)\\n",\n  "sre_parse.py(183):                 for av in av[1]:\\n",\n  "sre_parse.py(187):                 lo = lo + i\\n",\n  "sre_parse.py(188):                 hi = hi + j\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(842):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(622):             here = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(623):             if this == \\"?\\":\\n",\n  "sre_parse.py(624):                 min, max = 0, 1\\n",\n  "sre_parse.py(663):             if subpattern:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(664):                 item = subpattern[-1:]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(166):             return SubPattern(self.state, self.data[index])\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(667):             if not item or item[0][0] is AT:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(670):             if item[0][0] in _REPEATCODES:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(673):             if item[0][0] is SUBPATTERN:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(674):                 group, add_flags, del_flags, p = item[0][1]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(675):                 if group is None and not add_flags and not del_flags:\\n",\n  "sre_parse.py(677):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(680):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))\\n",\n  " --- modulename: sre_parse, funcname: __setitem__\\n",\n  "sre_parse.py(169):         self.data[index] = code\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(686):             start = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(687):             group = True\\n",\n  "sre_parse.py(688):             name = None\\n",\n  "sre_parse.py(689):             add_flags = 0\\n",\n  "sre_parse.py(690):             del_flags = 0\\n",\n  "sre_parse.py(691):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(829):             if group is not None:\\n",\n  "sre_parse.py(830):                 try:\\n",\n  "sre_parse.py(831):                     group = state.opengroup(name)\\n",\n  " --- modulename: sre_parse, funcname: opengroup\\n",\n  "sre_parse.py(85):         gid = self.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(86):         self.groupwidths.append(None)\\n",\n  "sre_parse.py(87):         if self.groups > MAXGROUPS:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(89):         if name is not None:\\n",\n  "sre_parse.py(95):         return gid\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(836):             p = _parse_sub(source, state, sub_verbose, nested + 1)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(525):             code = _escape(source, this, state)\\n",\n  " --- modulename: sre_parse, funcname: _escape\\n",\n  "sre_parse.py(357):     code = CATEGORIES.get(escape)\\n",\n  "sre_parse.py(358):     if code:\\n",\n  "sre_parse.py(360):     code = ESCAPES.get(escape)\\n",\n  "sre_parse.py(361):     if code:\\n",\n  "sre_parse.py(363):     try:\\n",\n  "sre_parse.py(364):         c = escape[1:2]\\n",\n  "sre_parse.py(365):         if c == \\"x\\":\\n",\n  "sre_parse.py(371):         elif c == \\"u\\" and source.istext:\\n",\n  "sre_parse.py(377):         elif c == \\"U\\" and source.istext:\\n",\n  "sre_parse.py(385):         elif c == \\"N\\" and source.istext:\\n",\n  "sre_parse.py(397):         elif c == \\"0\\":\\n",\n  "sre_parse.py(401):         elif c in DIGITS:\\n",\n  "sre_parse.py(424):         if len(escape) == 2:\\n",\n  "sre_parse.py(425):             if c in ASCIILETTERS:\\n",\n  "sre_parse.py(427):             return LITERAL, ord(escape[1])\\n",\n  "sre_parse.py(526):             subpatternappend(code)\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(686):             start = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(687):             group = True\\n",\n  "sre_parse.py(688):             name = None\\n",\n  "sre_parse.py(689):             add_flags = 0\\n",\n  "sre_parse.py(690):             del_flags = 0\\n",\n  "sre_parse.py(691):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(829):             if group is not None:\\n",\n  "sre_parse.py(830):                 try:\\n",\n  "sre_parse.py(831):                     group = state.opengroup(name)\\n",\n  " --- modulename: sre_parse, funcname: opengroup\\n",\n  "sre_parse.py(85):         gid = self.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(86):         self.groupwidths.append(None)\\n",\n  "sre_parse.py(87):         if self.groups > MAXGROUPS:\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(89):         if name is not None:\\n",\n  "sre_parse.py(95):         return gid\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(836):             p = _parse_sub(source, state, sub_verbose, nested + 1)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(525):             code = _escape(source, this, state)\\n",\n  " --- modulename: sre_parse, funcname: _escape\\n",\n  "sre_parse.py(357):     code = CATEGORIES.get(escape)\\n",\n  "sre_parse.py(358):     if code:\\n",\n  "sre_parse.py(360):     code = ESCAPES.get(escape)\\n",\n  "sre_parse.py(361):     if code:\\n",\n  "sre_parse.py(363):     try:\\n",\n  "sre_parse.py(364):         c = escape[1:2]\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(365):         if c == \\"x\\":\\n",\n  "sre_parse.py(371):         elif c == \\"u\\" and source.istext:\\n",\n  "sre_parse.py(377):         elif c == \\"U\\" and source.istext:\\n",\n  "sre_parse.py(385):         elif c == \\"N\\" and source.istext:\\n",\n  "sre_parse.py(397):         elif c == \\"0\\":\\n",\n  "sre_parse.py(401):         elif c in DIGITS:\\n",\n  "sre_parse.py(424):         if len(escape) == 2:\\n",\n  "sre_parse.py(425):             if c in ASCIILETTERS:\\n",\n  "sre_parse.py(427):             return LITERAL, ord(escape[1])\\n",\n  "sre_parse.py(526):             subpatternappend(code)\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(525):             code = _escape(source, this, state)\\n",\n  " --- modulename: sre_parse, funcname: _escape\\n",\n  "sre_parse.py(357):     code = CATEGORIES.get(escape)\\n",\n  "sre_parse.py(358):     if code:\\n",\n  "sre_parse.py(359):         return code\\n",\n  "sre_parse.py(526):             subpatternappend(code)\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(622):             here = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(623):             if this == \\"?\\":\\n",\n  "sre_parse.py(625):             elif this == \\"*\\":\\n",\n  "sre_parse.py(628):             elif this == \\"+\\":\\n",\n  "sre_parse.py(629):                 min, max = 1, MAXREPEAT\\n",\n  "sre_parse.py(663):             if subpattern:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(664):                 item = subpattern[-1:]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(166):             return SubPattern(self.state, self.data[index])\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(667):             if not item or item[0][0] is AT:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(670):             if item[0][0] in _REPEATCODES:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(673):             if item[0][0] is SUBPATTERN:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(677):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(680):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))\\n",\n  " --- modulename: sre_parse, funcname: __setitem__\\n",\n  "sre_parse.py(169):         self.data[index] = code\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(451):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(455):         prefix = None\\n",\n  "sre_parse.py(456):         for item in items:\\n",\n  "sre_parse.py(457):             if not item:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(459):             if prefix is None:\\n",\n  "sre_parse.py(460):                 prefix = item[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(456):         for item in items:\\n",\n  "sre_parse.py(457):             if not item:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(459):             if prefix is None:\\n",\n  "sre_parse.py(461):             elif item[0] != prefix:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(462):                 break\\n",\n  "sre_parse.py(473):     set = []\\n",\n  "sre_parse.py(474):     for item in items:\\n",\n  "sre_parse.py(475):         if len(item) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(477):         op, av = item[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(478):         if op is LITERAL:\\n",\n  "sre_parse.py(479):             set.append((op, av))\\n",\n  "sre_parse.py(474):     for item in items:\\n",\n  "sre_parse.py(475):         if len(item) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(477):         op, av = item[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(478):         if op is LITERAL:\\n",\n  "sre_parse.py(480):         elif op is IN and av[0][0] is not NEGATE:\\n",\n  "sre_parse.py(483):             break\\n",\n  "sre_parse.py(490):     subpattern.append((BRANCH, (None, items)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(491):     return subpattern\\n",\n  "sre_parse.py(837):             if not source.match(\\")\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(840):             if group is not None:\\n",\n  "sre_parse.py(841):                 state.closegroup(group, p)\\n",\n  " --- modulename: sre_parse, funcname: closegroup\\n",\n  "sre_parse.py(97):         self.groupwidths[gid] = p.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(181):                 i = MAXREPEAT - 1\\n",\n  "sre_parse.py(182):                 j = 0\\n",\n  "sre_parse.py(183):                 for av in av[1]:\\n",\n  "sre_parse.py(184):                     l, h = av.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(185):                     i = min(i, l)\\n",\n  "sre_parse.py(186):                     j = max(j, h)\\n",\n  "sre_parse.py(183):                 for av in av[1]:\\n",\n  "sre_parse.py(184):                     l, h = av.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(198):                 i, j = av[2].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(199):                 lo = lo + i * av[0]\\n",\n  "sre_parse.py(200):                 hi = hi + j * av[1]\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(185):                     i = min(i, l)\\n",\n  "sre_parse.py(186):                     j = max(j, h)\\n",\n  "sre_parse.py(183):                 for av in av[1]:\\n",\n  "sre_parse.py(187):                 lo = lo + i\\n",\n  "sre_parse.py(188):                 hi = hi + j\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(842):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(857):             group, add_flags, del_flags, p = av\\n",\n  "sre_parse.py(858):             if group is None and not add_flags and not del_flags:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(449):         return items[0]\\n",\n  "sre_parse.py(837):             if not source.match(\\")\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(840):             if group is not None:\\n",\n  "sre_parse.py(841):                 state.closegroup(group, p)\\n",\n  " --- modulename: sre_parse, funcname: closegroup\\n",\n  "sre_parse.py(97):         self.groupwidths[gid] = p.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(194):                 i, j = av[-1].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(177):             return self.width\\n",\n  "sre_parse.py(195):                 lo = lo + i\\n",\n  "sre_parse.py(196):                 hi = hi + j\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(842):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(622):             here = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(623):             if this == \\"?\\":\\n",\n  "sre_parse.py(624):                 min, max = 0, 1\\n",\n  "sre_parse.py(663):             if subpattern:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(664):                 item = subpattern[-1:]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(166):             return SubPattern(self.state, self.data[index])\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(667):             if not item or item[0][0] is AT:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(670):             if item[0][0] in _REPEATCODES:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(673):             if item[0][0] is SUBPATTERN:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(674):                 group, add_flags, del_flags, p = item[0][1]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(675):                 if group is None and not add_flags and not del_flags:\\n",\n  "sre_parse.py(677):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(680):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))\\n",\n  " --- modulename: sre_parse, funcname: __setitem__\\n",\n  "sre_parse.py(169):         self.data[index] = code\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(532):             here = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(534):             set = []\\n",\n  "sre_parse.py(535):             setappend = set.append\\n",\n  "sre_parse.py(538):             if source.next == \'[\':\\n",\n  "sre_parse.py(544):             negate = sourcematch(\\"^\\")\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(237):         except IndexError:\\n",\n  "sre_parse.py(238):             self.next = None\\n",\n  "sre_parse.py(239):             return\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(552):                     break\\n",\n  "sre_parse.py(605):             set = _uniq(set)\\n",\n  " --- modulename: sre_parse, funcname: _uniq\\n",\n  "sre_parse.py(433):     return list(dict.fromkeys(items))\\n",\n  "sre_parse.py(607):             if _len(set) == 1 and set[0][0] is LITERAL:\\n",\n  "sre_parse.py(614):                 if negate:\\n",\n  "sre_parse.py(618):                 subpatternappend((IN, set))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(508):             break # end of pattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(449):         return items[0]\\n",\n  "sre_parse.py(960):     p.state.flags = fix_flags(str, p.state.flags)\\n",\n  " --- modulename: sre_parse, funcname: fix_flags\\n",\n  "sre_parse.py(925):     if isinstance(src, str):\\n",\n  "sre_parse.py(926):         if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_parse.py(928):         if not flags & SRE_FLAG_ASCII:\\n",\n  "sre_parse.py(929):             flags |= SRE_FLAG_UNICODE\\n",\n  "sre_parse.py(937):     return flags\\n",\n  "sre_parse.py(962):     if source.next is not None:\\n",\n  "sre_parse.py(966):     if flags & SRE_FLAG_DEBUG:\\n",\n  "sre_parse.py(969):     return p\\n",\n  "sre_compile.py(768):     code = _code(p, flags)\\n",\n  " --- modulename: sre_compile, funcname: _code\\n",\n  "sre_compile.py(600):     flags = p.state.flags | flags\\n",\n  "sre_compile.py(601):     code = []\\n",\n  "sre_compile.py(604):     _compile_info(code, p, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile_info\\n",\n  "sre_compile.py(540):     lo, hi = pattern.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(198):                 i, j = av[2].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(341):             runs = None\\n",\n  "sre_compile.py(342):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(363):     if len(charmap) == 256:\\n",\n  "sre_compile.py(364):         data = _mk_bitmap(charmap)\\n",\n  " --- modulename: sre_compile, funcname: _mk_bitmap\\n",\n  "sre_compile.py(412):     s = bits.translate(_BITS_TRANS)[::-1]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  " --- modulename: sre_compile, funcname: <listcomp>\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(365):         out.append((CHARSET, data))\\n",\n  "sre_compile.py(366):         out += tail\\n",\n  "sre_compile.py(367):         return out, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(124):                 emit(IN)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n",\n  "sre_compile.py(262):             code.extend(av)\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(149):                 emit(SUCCESS)\\n",\n  "sre_compile.py(150):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(138):             if flags & SRE_FLAG_TEMPLATE:\\n",\n  "sre_compile.py(140):             if _simple(av[2]):\\n",\n  " --- modulename: sre_compile, funcname: _simple\\n",\n  "sre_compile.py(425):     if len(p) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_compile.py(427):     op, av = p[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(428):     if op is SUBPATTERN:\\n",\n  "sre_compile.py(429):         return av[0] is None and _simple(av[-1])\\n",\n  "sre_compile.py(152):                 emit(REPEAT)\\n",\n  "sre_compile.py(153):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(154):                 emit(av[0])\\n",\n  "sre_compile.py(155):                 emit(av[1])\\n",\n  "sre_compile.py(156):                 _compile(code, av[2], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(163):             group, add_flags, del_flags, p = av\\n",\n  "sre_compile.py(164):             if group:\\n",\n  "sre_compile.py(165):                 emit(MARK)\\n",\n  "sre_compile.py(166):                 emit((group-1)*2)\\n",\n  "sre_compile.py(168):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))\\n",\n  " --- modulename: sre_compile, funcname: _combine_flags\\n",\n  "sre_compile.py(67):     if add_flags & TYPE_FLAGS:\\n",\n  "sre_compile.py(69):     return (flags | add_flags) & ~del_flags\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(172):         elif op in SUCCESS_CODES:\\n",\n  "sre_compile.py(174):         elif op in ASSERT_CODES:\\n",\n  "sre_compile.py(187):         elif op is CALL:\\n",\n  "sre_compile.py(193):         elif op is AT:\\n",\n  "sre_compile.py(202):         elif op is BRANCH:\\n",\n  "sre_compile.py(203):             emit(op)\\n",\n  "sre_compile.py(204):             tail = []\\n",\n  "sre_compile.py(205):             tailappend = tail.append\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(207):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(209):                 _compile(code, av, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(95):             elif flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(98):             elif not iscased(av):\\n",\n  "sre_compile.py(99):                 emit(op)\\n",\n  "sre_compile.py(100):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(210):                 emit(JUMP)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(211):                 tailappend(_len(code)); emit(0)\\n",\n  "sre_compile.py(212):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(207):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(209):                 _compile(code, av, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(138):             if flags & SRE_FLAG_TEMPLATE:\\n",\n  "sre_compile.py(140):             if _simple(av[2]):\\n",\n  " --- modulename: sre_compile, funcname: _simple\\n",\n  "sre_compile.py(425):     if len(p) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_compile.py(427):     op, av = p[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(428):     if op is SUBPATTERN:\\n",\n  "sre_compile.py(430):     return op in _UNIT_CODES\\n",\n  "sre_compile.py(141):                 if op is MAX_REPEAT:\\n",\n  "sre_compile.py(142):                     emit(REPEAT_ONE)\\n",\n  "sre_compile.py(145):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(146):                 emit(av[0])\\n",\n  "sre_compile.py(147):                 emit(av[1])\\n",\n  "sre_compile.py(148):                 _compile(code, av[2], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(296):                 elif op is RANGE:\\n",\n  "sre_compile.py(313):                 elif op is NEGATE:\\n",\n  "sre_compile.py(316):                     tail.append((op, av))\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(339):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(355):         out += tail\\n",\n  "sre_compile.py(357):         if hascased or len(out) < len(charset):\\n",\n  "sre_compile.py(360):         return charset, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(124):                 emit(IN)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n",\n  "sre_compile.py(263):         elif op is BIGCHARSET:\\n",\n  "sre_compile.py(265):         elif op is CATEGORY:\\n",\n  "sre_compile.py(266):             if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(268):             elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(269):                 emit(CH_UNICODE[av])\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(149):                 emit(SUCCESS)\\n",\n  "sre_compile.py(150):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(210):                 emit(JUMP)\\n",\n  "sre_compile.py(211):                 tailappend(_len(code)); emit(0)\\n",\n  "sre_compile.py(212):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(213):             emit(FAILURE) # end of branch\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(215):                 code[tail] = _len(code) - tail\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(215):                 code[tail] = _len(code) - tail\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(169):             if group:\\n",\n  "sre_compile.py(170):                 emit(MARK)\\n",\n  "sre_compile.py(171):                 emit((group-1)*2+1)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(157):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(158):                 if op is MAX_REPEAT:\\n",\n  "sre_compile.py(159):                     emit(MAX_UNTIL)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(138):             if flags & SRE_FLAG_TEMPLATE:\\n",\n  "sre_compile.py(140):             if _simple(av[2]):\\n",\n  " --- modulename: sre_compile, funcname: _simple\\n",\n  "sre_compile.py(425):     if len(p) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_compile.py(427):     op, av = p[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(428):     if op is SUBPATTERN:\\n",\n  "sre_compile.py(429):         return av[0] is None and _simple(av[-1])\\n",\n  "sre_compile.py(152):                 emit(REPEAT)\\n",\n  "sre_compile.py(153):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(154):                 emit(av[0])\\n",\n  "sre_compile.py(155):                 emit(av[1])\\n",\n  "sre_compile.py(156):                 _compile(code, av[2], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(163):             group, add_flags, del_flags, p = av\\n",\n  "sre_compile.py(164):             if group:\\n",\n  "sre_compile.py(165):                 emit(MARK)\\n",\n  "sre_compile.py(166):                 emit((group-1)*2)\\n",\n  "sre_compile.py(168):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))\\n",\n  " --- modulename: sre_compile, funcname: _combine_flags\\n",\n  "sre_compile.py(67):     if add_flags & TYPE_FLAGS:\\n",\n  "sre_compile.py(69):     return (flags | add_flags) & ~del_flags\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(95):             elif flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(98):             elif not iscased(av):\\n",\n  "sre_compile.py(99):                 emit(op)\\n",\n  "sre_compile.py(100):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(163):             group, add_flags, del_flags, p = av\\n",\n  "sre_compile.py(164):             if group:\\n",\n  "sre_compile.py(165):                 emit(MARK)\\n",\n  "sre_compile.py(166):                 emit((group-1)*2)\\n",\n  "sre_compile.py(168):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))\\n",\n  " --- modulename: sre_compile, funcname: _combine_flags\\n",\n  "sre_compile.py(67):     if add_flags & TYPE_FLAGS:\\n",\n  "sre_compile.py(69):     return (flags | add_flags) & ~del_flags\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(172):         elif op in SUCCESS_CODES:\\n",\n  "sre_compile.py(174):         elif op in ASSERT_CODES:\\n",\n  "sre_compile.py(187):         elif op is CALL:\\n",\n  "sre_compile.py(193):         elif op is AT:\\n",\n  "sre_compile.py(202):         elif op is BRANCH:\\n",\n  "sre_compile.py(203):             emit(op)\\n",\n  "sre_compile.py(204):             tail = []\\n",\n  "sre_compile.py(205):             tailappend = tail.append\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(207):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(209):                 _compile(code, av, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(95):             elif flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(98):             elif not iscased(av):\\n",\n  "sre_compile.py(99):                 emit(op)\\n",\n  "sre_compile.py(100):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(210):                 emit(JUMP)\\n",\n  "sre_compile.py(211):                 tailappend(_len(code)); emit(0)\\n",\n  "sre_compile.py(212):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(207):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(209):                 _compile(code, av, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(138):             if flags & SRE_FLAG_TEMPLATE:\\n",\n  "sre_compile.py(140):             if _simple(av[2]):\\n",\n  " --- modulename: sre_compile, funcname: _simple\\n",\n  "sre_compile.py(425):     if len(p) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_compile.py(427):     op, av = p[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(428):     if op is SUBPATTERN:\\n",\n  "sre_compile.py(430):     return op in _UNIT_CODES\\n",\n  "sre_compile.py(141):                 if op is MAX_REPEAT:\\n",\n  "sre_compile.py(142):                     emit(REPEAT_ONE)\\n",\n  "sre_compile.py(145):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(146):                 emit(av[0])\\n",\n  "sre_compile.py(147):                 emit(av[1])\\n",\n  "sre_compile.py(148):                 _compile(code, av[2], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(296):                 elif op is RANGE:\\n",\n  "sre_compile.py(313):                 elif op is NEGATE:\\n",\n  "sre_compile.py(316):                     tail.append((op, av))\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(339):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(355):         out += tail\\n",\n  "sre_compile.py(357):         if hascased or len(out) < len(charset):\\n",\n  "sre_compile.py(360):         return charset, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(124):                 emit(IN)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n",\n  "sre_compile.py(263):         elif op is BIGCHARSET:\\n",\n  "sre_compile.py(265):         elif op is CATEGORY:\\n",\n  "sre_compile.py(266):             if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(268):             elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(269):                 emit(CH_UNICODE[av])\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(149):                 emit(SUCCESS)\\n",\n  "sre_compile.py(150):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(210):                 emit(JUMP)\\n",\n  "sre_compile.py(211):                 tailappend(_len(code)); emit(0)\\n",\n  "sre_compile.py(212):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(213):             emit(FAILURE) # end of branch\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(215):                 code[tail] = _len(code) - tail\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(215):                 code[tail] = _len(code) - tail\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(169):             if group:\\n",\n  "sre_compile.py(170):                 emit(MARK)\\n",\n  "sre_compile.py(171):                 emit((group-1)*2+1)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(169):             if group:\\n",\n  "sre_compile.py(170):                 emit(MARK)\\n",\n  "sre_compile.py(171):                 emit((group-1)*2+1)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(157):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(158):                 if op is MAX_REPEAT:\\n",\n  "sre_compile.py(159):                     emit(MAX_UNTIL)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(293):                             hascased = True\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(290):                             for k in fixes[lo]:\\n",\n  "sre_compile.py(291):                                 charmap[k] = 1\\n",\n  "sre_compile.py(317):             except IndexError:\\n",\n  "sre_compile.py(318):                 if len(charmap) == 256:\\n",\n  "sre_compile.py(320):                     charmap += b\'\\\\0\' * 0xff00\\n",\n  "sre_compile.py(321):                     continue\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(290):                             for k in fixes[lo]:\\n",\n  "sre_compile.py(291):                                 charmap[k] = 1\\n",\n  "sre_compile.py(290):                             for k in fixes[lo]:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(290):                             for k in fixes[lo]:\\n",\n  "sre_compile.py(291):                                 charmap[k] = 1\\n",\n  "sre_compile.py(290):                             for k in fixes[lo]:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(341):             runs = None\\n",\n  "sre_compile.py(342):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(363):     if len(charmap) == 256:\\n",\n  "sre_compile.py(389):     charmap = bytes(charmap) # should be hashable\\n",\n  "sre_compile.py(390):     comps = {}\\n",\n  "sre_compile.py(391):     mapping = bytearray(256)\\n",\n  "sre_compile.py(392):     block = 0\\n",\n  "sre_compile.py(393):     data = bytearray()\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(399):             mapping[i // 256] = comps[chunk] = block\\n",\n  "sre_compile.py(400):             block += 1\\n",\n  "sre_compile.py(401):             data += chunk\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(399):             mapping[i // 256] = comps[chunk] = block\\n",\n  "sre_compile.py(400):             block += 1\\n",\n  "sre_compile.py(401):             data += chunk\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(399):             mapping[i // 256] = comps[chunk] = block\\n",\n  "sre_compile.py(400):             block += 1\\n",\n  "sre_compile.py(401):             data += chunk\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(395):         chunk = charmap[i: i + 256]\\n",\n  "sre_compile.py(396):         if chunk in comps:\\n",\n  "sre_compile.py(397):             mapping[i // 256] = comps[chunk]\\n",\n  "sre_compile.py(394):     for i in range(0, 65536, 256):\\n",\n  "sre_compile.py(402):     data = _mk_bitmap(data)\\n",\n  " --- modulename: sre_compile, funcname: _mk_bitmap\\n",\n  "sre_compile.py(412):     s = bits.translate(_BITS_TRANS)[::-1]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  " --- modulename: sre_compile, funcname: <listcomp>\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(403):     data[0:0] = [block] + _bytes_to_codes(mapping)\\n",\n  " --- modulename: sre_compile, funcname: _bytes_to_codes\\n",\n  "sre_compile.py(418):     a = memoryview(b).cast(\'I\')\\n",\n  "sre_compile.py(419):     assert a.itemsize == _sre.CODESIZE\\n",\n  "sre_compile.py(420):     assert len(a) * a.itemsize == len(b)\\n",\n  "sre_compile.py(421):     return a.tolist()\\n",\n  "sre_compile.py(404):     out.append((BIGCHARSET, data))\\n",\n  "sre_compile.py(405):     out += tail\\n",\n  "sre_compile.py(406):     return out, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(125):             elif not fixes:  # ascii\\n",\n  "sre_compile.py(128):                 emit(IN_UNI_IGNORE)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(263):         elif op is BIGCHARSET:\\n",\n  "sre_compile.py(264):             code.extend(av)\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(609):     code.append(SUCCESS)\\n",\n  "sre_compile.py(611):     return code\\n",\n  "sre_compile.py(770):     if flags & SRE_FLAG_DEBUG:\\n",\n  "sre_compile.py(775):     groupindex = p.state.groupdict\\n",\n  "sre_compile.py(776):     indexgroup = [None] * p.state.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(777):     for k, i in groupindex.items():\\n",\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "sre_compile.py(781):         pattern, flags | p.state.flags, code,\\n",\n  "sre_compile.py(782):         p.state.groups-1,\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(783):         groupindex, tuple(indexgroup)\\n",\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "re.py(305):     if not (flags & DEBUG):\\n",\n  " --- modulename: enum, funcname: __and__\\n",\n  "enum.py(978):         if not isinstance(other, (self.__class__, int)):\\n",\n  "enum.py(980):         return self.__class__(self._value_ & self.__class__(other)._value_)\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  "re.py(306):         if len(_cache) >= _MAXCACHE:\\n",\n  "re.py(312):         _cache[type(pattern), pattern, flags] = p\\n",\n  "re.py(313):     return p\\n",\n  "__init__.py(418):     def __init__(self, fmt):\\n",\n  "__init__.py(421):     def usesTime(self):\\n",\n  "__init__.py(424):     def validate(self):\\n",\n  "__init__.py(429):     def _format(self, record):\\n",\n  "__init__.py(432):     def format(self, record):\\n",\n  "__init__.py(439): class StrFormatStyle(PercentStyle):\\n",\n  " --- modulename: __init__, funcname: StrFormatStyle\\n",\n  "__init__.py(439): class StrFormatStyle(PercentStyle):\\n",\n  "__init__.py(440):     default_format = \'{message}\'\\n",\n  "__init__.py(441):     asctime_format = \'{asctime}\'\\n",\n  "__init__.py(442):     asctime_search = \'{asctime\'\\n",\n  "__init__.py(444):     fmt_spec = re.compile(r\'^(.?[<>=^])?[+ -]?#?0?(\\\\d+|{\\\\w+})?[,_]?(\\\\.(\\\\d+|{\\\\w+}))?[bcdefgnosx%]?$\', re.I)\\n",\n  " --- modulename: re, funcname: compile\\n",\n  "re.py(252):     return _compile(pattern, flags)\\n",\n  " --- modulename: re, funcname: _compile\\n",\n  "re.py(291):     if isinstance(flags, RegexFlag):\\n",\n  "re.py(292):         flags = flags.value\\n",\n  " --- modulename: types, funcname: __get__\\n",\n  "types.py(172):         if instance is None:\\n",\n  "types.py(176):         elif self.fget is None:\\n",\n  "types.py(178):         return self.fget(instance)\\n",\n  " --- modulename: enum, funcname: value\\n",\n  "enum.py(795):         return self._value_\\n",\n  "re.py(293):     try:\\n",\n  "re.py(294):         return _cache[type(pattern), pattern, flags]\\n",\n  "re.py(295):     except KeyError:\\n",\n  "re.py(296):         pass\\n",\n  "re.py(297):     if isinstance(pattern, Pattern):\\n",\n  "re.py(302):     if not sre_compile.isstring(pattern):\\n",\n  " --- modulename: sre_compile, funcname: isstring\\n",\n  "sre_compile.py(596):     return isinstance(obj, (str, bytes))\\n",\n  "re.py(304):     p = sre_compile.compile(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: compile\\n",\n  "sre_compile.py(762):     if isstring(p):\\n",\n  " --- modulename: sre_compile, funcname: isstring\\n",\n  "sre_compile.py(596):     return isinstance(obj, (str, bytes))\\n",\n  "sre_compile.py(763):         pattern = p\\n",\n  "sre_compile.py(764):         p = sre_parse.parse(p, flags)\\n",\n  " --- modulename: sre_parse, funcname: parse\\n",\n  "sre_parse.py(942):     source = Tokenizer(str)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(225):         self.istext = isinstance(string, str)\\n",\n  "sre_parse.py(226):         self.string = string\\n",\n  "sre_parse.py(227):         if not self.istext:\\n",\n  "sre_parse.py(229):         self.decoded_string = string\\n",\n  "sre_parse.py(230):         self.index = 0\\n",\n  "sre_parse.py(231):         self.next = None\\n",\n  "sre_parse.py(232):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(944):     if state is None:\\n",\n  "sre_parse.py(945):         state = State()\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(77):         self.flags = 0\\n",\n  "sre_parse.py(78):         self.groupdict = {}\\n",\n  "sre_parse.py(79):         self.groupwidths = [None]  # group 0\\n",\n  "sre_parse.py(80):         self.lookbehindgroups = None\\n",\n  "sre_parse.py(946):     state.flags = flags\\n",\n  "sre_parse.py(947):     state.str = str\\n",\n  "sre_parse.py(949):     try:\\n",\n  "sre_parse.py(950):         p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(844):         elif this == \\"^\\":\\n",\n  "sre_parse.py(845):             subpatternappend((AT, AT_BEGINNING))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(686):             start = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(687):             group = True\\n",\n  "sre_parse.py(688):             name = None\\n",\n  "sre_parse.py(689):             add_flags = 0\\n",\n  "sre_parse.py(690):             del_flags = 0\\n",\n  "sre_parse.py(691):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(829):             if group is not None:\\n",\n  "sre_parse.py(830):                 try:\\n",\n  "sre_parse.py(831):                     group = state.opengroup(name)\\n",\n  " --- modulename: sre_parse, funcname: opengroup\\n",\n  "sre_parse.py(85):         gid = self.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(86):         self.groupwidths.append(None)\\n",\n  "sre_parse.py(87):         if self.groups > MAXGROUPS:\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(89):         if name is not None:\\n",\n  "sre_parse.py(95):         return gid\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(836):             p = _parse_sub(source, state, sub_verbose, nested + 1)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(683):             subpatternappend((ANY, None))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(622):             here = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(623):             if this == \\"?\\":\\n",\n  "sre_parse.py(624):                 min, max = 0, 1\\n",\n  "sre_parse.py(663):             if subpattern:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(664):                 item = subpattern[-1:]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(166):             return SubPattern(self.state, self.data[index])\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(667):             if not item or item[0][0] is AT:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(670):             if item[0][0] in _REPEATCODES:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(673):             if item[0][0] is SUBPATTERN:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(677):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(680):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))\\n",\n  " --- modulename: sre_parse, funcname: __setitem__\\n",\n  "sre_parse.py(169):         self.data[index] = code\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(532):             here = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(534):             set = []\\n",\n  "sre_parse.py(535):             setappend = set.append\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(538):             if source.next == \'[\':\\n",\n  "sre_parse.py(544):             negate = sourcematch(\\"^\\")\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(552):                     break\\n",\n  "sre_parse.py(605):             set = _uniq(set)\\n",\n  " --- modulename: sre_parse, funcname: _uniq\\n",\n  "sre_parse.py(433):     return list(dict.fromkeys(items))\\n",\n  "sre_parse.py(607):             if _len(set) == 1 and set[0][0] is LITERAL:\\n",\n  "sre_parse.py(614):                 if negate:\\n",\n  "sre_parse.py(618):                 subpatternappend((IN, set))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(449):         return items[0]\\n",\n  "sre_parse.py(837):             if not source.match(\\")\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(840):             if group is not None:\\n",\n  "sre_parse.py(841):                 state.closegroup(group, p)\\n",\n  " --- modulename: sre_parse, funcname: closegroup\\n",\n  "sre_parse.py(97):         self.groupwidths[gid] = p.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(198):                 i, j = av[2].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(622):             here = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(623):             if this == \\"?\\":\\n",\n  "sre_parse.py(624):                 min, max = 0, 1\\n",\n  "sre_parse.py(663):             if subpattern:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(664):                 item = subpattern[-1:]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(166):             return SubPattern(self.state, self.data[index])\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(667):             if not item or item[0][0] is AT:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(670):             if item[0][0] in _REPEATCODES:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(673):             if item[0][0] is SUBPATTERN:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(677):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(680):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))\\n",\n  " --- modulename: sre_parse, funcname: __setitem__\\n",\n  "sre_parse.py(169):         self.data[index] = code\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(529):             subpatternappend((LITERAL, _ord(this)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(622):             here = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(623):             if this == \\"?\\":\\n",\n  "sre_parse.py(624):                 min, max = 0, 1\\n",\n  "sre_parse.py(663):             if subpattern:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(664):                 item = subpattern[-1:]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(166):             return SubPattern(self.state, self.data[index])\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(667):             if not item or item[0][0] is AT:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(670):             if item[0][0] in _REPEATCODES:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(673):             if item[0][0] is SUBPATTERN:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(677):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(680):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))\\n",\n  " --- modulename: sre_parse, funcname: __setitem__\\n",\n  "sre_parse.py(169):         self.data[index] = code\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(686):             start = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(687):             group = True\\n",\n  "sre_parse.py(688):             name = None\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(689):             add_flags = 0\\n",\n  "sre_parse.py(690):             del_flags = 0\\n",\n  "sre_parse.py(691):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(829):             if group is not None:\\n",\n  "sre_parse.py(830):                 try:\\n",\n  "sre_parse.py(831):                     group = state.opengroup(name)\\n",\n  " --- modulename: sre_parse, funcname: opengroup\\n",\n  "sre_parse.py(85):         gid = self.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(86):         self.groupwidths.append(None)\\n",\n  "sre_parse.py(87):         if self.groups > MAXGROUPS:\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(89):         if name is not None:\\n",\n  "sre_parse.py(95):         return gid\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(836):             p = _parse_sub(source, state, sub_verbose, nested + 1)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(525):             code = _escape(source, this, state)\\n",\n  " --- modulename: sre_parse, funcname: _escape\\n",\n  "sre_parse.py(357):     code = CATEGORIES.get(escape)\\n",\n  "sre_parse.py(358):     if code:\\n",\n  "sre_parse.py(359):         return code\\n",\n  "sre_parse.py(526):             subpatternappend(code)\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(622):             here = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(623):             if this == \\"?\\":\\n",\n  "sre_parse.py(625):             elif this == \\"*\\":\\n",\n  "sre_parse.py(628):             elif this == \\"+\\":\\n",\n  "sre_parse.py(629):                 min, max = 1, MAXREPEAT\\n",\n  "sre_parse.py(663):             if subpattern:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(664):                 item = subpattern[-1:]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(166):             return SubPattern(self.state, self.data[index])\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(667):             if not item or item[0][0] is AT:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(670):             if item[0][0] in _REPEATCODES:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(673):             if item[0][0] is SUBPATTERN:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(677):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(680):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))\\n",\n  " --- modulename: sre_parse, funcname: __setitem__\\n",\n  "sre_parse.py(169):         self.data[index] = code\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(622):             here = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(623):             if this == \\"?\\":\\n",\n  "sre_parse.py(625):             elif this == \\"*\\":\\n",\n  "sre_parse.py(628):             elif this == \\"+\\":\\n",\n  "sre_parse.py(630):             elif this == \\"{\\":\\n",\n  "sre_parse.py(631):                 if source.next == \\"}\\":\\n",\n  "sre_parse.py(635):                 min, max = 0, MAXREPEAT\\n",\n  "sre_parse.py(636):                 lo = hi = \\"\\"\\n",\n  "sre_parse.py(637):                 while source.next in DIGITS:\\n",\n  "sre_parse.py(639):                 if sourcematch(\\",\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(643):                     hi = lo\\n",\n  "sre_parse.py(644):                 if not sourcematch(\\"}\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(645):                     subpatternappend((LITERAL, _ord(this)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(646):                     source.seek(here)\\n",\n  " --- modulename: sre_parse, funcname: seek\\n",\n  "sre_parse.py(289):         self.index = index\\n",\n  "sre_parse.py(290):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(647):                     continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(525):             code = _escape(source, this, state)\\n",\n  " --- modulename: sre_parse, funcname: _escape\\n",\n  "sre_parse.py(357):     code = CATEGORIES.get(escape)\\n",\n  "sre_parse.py(358):     if code:\\n",\n  "sre_parse.py(359):         return code\\n",\n  "sre_parse.py(526):             subpatternappend(code)\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(622):             here = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(623):             if this == \\"?\\":\\n",\n  "sre_parse.py(625):             elif this == \\"*\\":\\n",\n  "sre_parse.py(628):             elif this == \\"+\\":\\n",\n  "sre_parse.py(629):                 min, max = 1, MAXREPEAT\\n",\n  "sre_parse.py(663):             if subpattern:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(664):                 item = subpattern[-1:]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(166):             return SubPattern(self.state, self.data[index])\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(667):             if not item or item[0][0] is AT:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(670):             if item[0][0] in _REPEATCODES:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(673):             if item[0][0] is SUBPATTERN:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(677):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(680):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))\\n",\n  " --- modulename: sre_parse, funcname: __setitem__\\n",\n  "sre_parse.py(169):         self.data[index] = code\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(529):             subpatternappend((LITERAL, _ord(this)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_compile.py(145):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(146):                 emit(av[0])\\n",\n  "sre_compile.py(147):                 emit(av[1])\\n",\n  "sre_compile.py(148):                 _compile(code, av[2], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(287):                         lo = fixup(av)\\n",\n  "sre_compile.py(288):                         charmap[lo] = 1\\n",\n  "sre_compile.py(289):                         if fixes and lo in fixes:\\n",\n  "sre_compile.py(292):                         if not hascased and iscased(av):\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(339):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(351):             if q - p == 1:\\n",\n  "sre_compile.py(352):                 out.append((LITERAL, p))\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(351):             if q - p == 1:\\n",\n  "sre_compile.py(352):                 out.append((LITERAL, p))\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(355):         out += tail\\n",\n  "sre_compile.py(357):         if hascased or len(out) < len(charset):\\n",\n  "sre_compile.py(360):         return charset, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(124):                 emit(IN)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(257):             emit(av)\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(257):             emit(av)\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(149):                 emit(SUCCESS)\\n",\n  "sre_compile.py(150):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(138):             if flags & SRE_FLAG_TEMPLATE:\\n",\n  "sre_compile.py(140):             if _simple(av[2]):\\n",\n  " --- modulename: sre_compile, funcname: _simple\\n",\n  "sre_compile.py(425):     if len(p) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_compile.py(427):     op, av = p[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(428):     if op is SUBPATTERN:\\n",\n  "sre_compile.py(429):         return av[0] is None and _simple(av[-1])\\n",\n  "sre_compile.py(152):                 emit(REPEAT)\\n",\n  "sre_compile.py(153):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(154):                 emit(av[0])\\n",\n  "sre_compile.py(155):                 emit(av[1])\\n",\n  "sre_compile.py(156):                 _compile(code, av[2], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(163):             group, add_flags, del_flags, p = av\\n",\n  "sre_compile.py(164):             if group:\\n",\n  "sre_compile.py(165):                 emit(MARK)\\n",\n  "sre_compile.py(166):                 emit((group-1)*2)\\n",\n  "sre_compile.py(168):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))\\n",\n  " --- modulename: sre_compile, funcname: _combine_flags\\n",\n  "sre_compile.py(67):     if add_flags & TYPE_FLAGS:\\n",\n  "sre_compile.py(69):     return (flags | add_flags) & ~del_flags\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(95):             elif flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(98):             elif not iscased(av):\\n",\n  "sre_compile.py(99):                 emit(op)\\n",\n  "sre_compile.py(100):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(163):             group, add_flags, del_flags, p = av\\n",\n  "sre_compile.py(164):             if group:\\n",\n  "sre_compile.py(165):                 emit(MARK)\\n",\n  "sre_compile.py(166):                 emit((group-1)*2)\\n",\n  "sre_compile.py(168):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))\\n",\n  " --- modulename: sre_compile, funcname: _combine_flags\\n",\n  "sre_compile.py(67):     if add_flags & TYPE_FLAGS:\\n",\n  "sre_compile.py(69):     return (flags | add_flags) & ~del_flags\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(172):         elif op in SUCCESS_CODES:\\n",\n  "sre_compile.py(174):         elif op in ASSERT_CODES:\\n",\n  "sre_compile.py(187):         elif op is CALL:\\n",\n  "sre_compile.py(193):         elif op is AT:\\n",\n  "sre_compile.py(202):         elif op is BRANCH:\\n",\n  "sre_compile.py(203):             emit(op)\\n",\n  "sre_compile.py(204):             tail = []\\n",\n  "sre_compile.py(205):             tailappend = tail.append\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(207):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(209):                 _compile(code, av, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(138):             if flags & SRE_FLAG_TEMPLATE:\\n",\n  "sre_compile.py(140):             if _simple(av[2]):\\n",\n  " --- modulename: sre_compile, funcname: _simple\\n",\n  "sre_compile.py(425):     if len(p) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_compile.py(427):     op, av = p[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(428):     if op is SUBPATTERN:\\n",\n  "sre_compile.py(430):     return op in _UNIT_CODES\\n",\n  "sre_compile.py(141):                 if op is MAX_REPEAT:\\n",\n  "sre_compile.py(142):                     emit(REPEAT_ONE)\\n",\n  "sre_compile.py(145):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(146):                 emit(av[0])\\n",\n  "sre_compile.py(147):                 emit(av[1])\\n",\n  "sre_compile.py(148):                 _compile(code, av[2], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(296):                 elif op is RANGE:\\n",\n  "sre_compile.py(313):                 elif op is NEGATE:\\n",\n  "sre_compile.py(316):                     tail.append((op, av))\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(339):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(355):         out += tail\\n",\n  "sre_compile.py(357):         if hascased or len(out) < len(charset):\\n",\n  "sre_compile.py(360):         return charset, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(124):                 emit(IN)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n",\n  "sre_compile.py(263):         elif op is BIGCHARSET:\\n",\n  "sre_compile.py(265):         elif op is CATEGORY:\\n",\n  "sre_compile.py(266):             if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(268):             elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(269):                 emit(CH_UNICODE[av])\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(149):                 emit(SUCCESS)\\n",\n  "sre_compile.py(150):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(210):                 emit(JUMP)\\n",\n  "sre_compile.py(211):                 tailappend(_len(code)); emit(0)\\n",\n  "sre_compile.py(212):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(207):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(209):                 _compile(code, av, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(95):             elif flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(98):             elif not iscased(av):\\n",\n  "sre_compile.py(99):                 emit(op)\\n",\n  "sre_compile.py(100):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(138):             if flags & SRE_FLAG_TEMPLATE:\\n",\n  "sre_compile.py(140):             if _simple(av[2]):\\n",\n  " --- modulename: sre_compile, funcname: _simple\\n",\n  "sre_compile.py(425):     if len(p) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_compile.py(427):     op, av = p[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(428):     if op is SUBPATTERN:\\n",\n  "sre_compile.py(430):     return op in _UNIT_CODES\\n",\n  "sre_compile.py(141):                 if op is MAX_REPEAT:\\n",\n  "sre_compile.py(142):                     emit(REPEAT_ONE)\\n",\n  "sre_compile.py(145):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(146):                 emit(av[0])\\n",\n  "sre_compile.py(147):                 emit(av[1])\\n",\n  "sre_compile.py(148):                 _compile(code, av[2], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(83):         if flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(84):             iscased = _sre.unicode_iscased\\n",\n  "sre_compile.py(85):             tolower = _sre.unicode_tolower\\n",\n  "sre_compile.py(86):             fixes = _ignorecase_fixes\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(296):                 elif op is RANGE:\\n",\n  "sre_compile.py(313):                 elif op is NEGATE:\\n",\n  "sre_compile.py(316):                     tail.append((op, av))\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(339):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(355):         out += tail\\n",\n  "sre_compile.py(357):         if hascased or len(out) < len(charset):\\n",\n  "sre_compile.py(360):         return charset, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(124):                 emit(IN)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n",\n  "sre_compile.py(263):         elif op is BIGCHARSET:\\n",\n  "sre_compile.py(265):         elif op is CATEGORY:\\n",\n  "sre_compile.py(266):             if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(268):             elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(269):                 emit(CH_UNICODE[av])\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(149):                 emit(SUCCESS)\\n",\n  "sre_compile.py(150):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(95):             elif flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(98):             elif not iscased(av):\\n",\n  "sre_compile.py(99):                 emit(op)\\n",\n  "sre_compile.py(100):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(210):                 emit(JUMP)\\n",\n  "sre_compile.py(211):                 tailappend(_len(code)); emit(0)\\n",\n  "sre_compile.py(212):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(213):             emit(FAILURE) # end of branch\\n",\n  "sre_parse.py(840):             if group is not None:\\n",\n  "sre_parse.py(841):                 state.closegroup(group, p)\\n",\n  " --- modulename: sre_parse, funcname: closegroup\\n",\n  "sre_parse.py(97):         self.groupwidths[gid] = p.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(181):                 i = MAXREPEAT - 1\\n",\n  "sre_parse.py(182):                 j = 0\\n",\n  "sre_parse.py(183):                 for av in av[1]:\\n",\n  "sre_parse.py(184):                     l, h = av.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(198):                 i, j = av[2].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(199):                 lo = lo + i * av[0]\\n",\n  "sre_parse.py(200):                 hi = hi + j * av[1]\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(185):                     i = min(i, l)\\n",\n  "sre_parse.py(186):                     j = max(j, h)\\n",\n  "sre_parse.py(183):                 for av in av[1]:\\n",\n  "sre_parse.py(184):                     l, h = av.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(198):                 i, j = av[2].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(199):                 lo = lo + i * av[0]\\n",\n  "sre_parse.py(200):                 hi = hi + j * av[1]\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(185):                     i = min(i, l)\\n",\n  "sre_parse.py(186):                     j = max(j, h)\\n",\n  "sre_parse.py(183):                 for av in av[1]:\\n",\n  "sre_parse.py(187):                 lo = lo + i\\n",\n  "sre_parse.py(188):                 hi = hi + j\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(842):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(622):             here = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(623):             if this == \\"?\\":\\n",\n  "sre_parse.py(625):             elif this == \\"*\\":\\n",\n  "sre_parse.py(626):                 min, max = 0, MAXREPEAT\\n",\n  "sre_parse.py(663):             if subpattern:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(664):                 item = subpattern[-1:]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(166):             return SubPattern(self.state, self.data[index])\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(667):             if not item or item[0][0] is AT:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(670):             if item[0][0] in _REPEATCODES:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(673):             if item[0][0] is SUBPATTERN:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(674):                 group, add_flags, del_flags, p = item[0][1]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(675):                 if group is None and not add_flags and not del_flags:\\n",\n  "sre_parse.py(677):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(680):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))\\n",\n  " --- modulename: sre_parse, funcname: __setitem__\\n",\n  "sre_parse.py(169):         self.data[index] = code\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(237):         except IndexError:\\n",\n  "sre_parse.py(238):             self.next = None\\n",\n  "sre_parse.py(239):             return\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(844):         elif this == \\"^\\":\\n",\n  "sre_parse.py(847):         elif this == \\"$\\":\\n",\n  "sre_parse.py(848):             subpatternappend((AT, AT_END))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(508):             break # end of pattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(857):             group, add_flags, del_flags, p = av\\n",\n  "sre_parse.py(858):             if group is None and not add_flags and not del_flags:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(449):         return items[0]\\n",\n  "sre_parse.py(960):     p.state.flags = fix_flags(str, p.state.flags)\\n",\n  " --- modulename: sre_parse, funcname: fix_flags\\n",\n  "sre_parse.py(925):     if isinstance(src, str):\\n",\n  "sre_parse.py(926):         if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_parse.py(928):         if not flags & SRE_FLAG_ASCII:\\n",\n  "sre_parse.py(929):             flags |= SRE_FLAG_UNICODE\\n",\n  "sre_parse.py(937):     return flags\\n",\n  "sre_parse.py(962):     if source.next is not None:\\n",\n  "sre_parse.py(966):     if flags & SRE_FLAG_DEBUG:\\n",\n  "sre_parse.py(969):     return p\\n",\n  "sre_compile.py(768):     code = _code(p, flags)\\n",\n  " --- modulename: sre_compile, funcname: _code\\n",\n  "sre_compile.py(600):     flags = p.state.flags | flags\\n",\n  "sre_compile.py(601):     code = []\\n",\n  "sre_compile.py(604):     _compile_info(code, p, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile_info\\n",\n  "sre_compile.py(540):     lo, hi = pattern.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(204):             elif op is GROUPREF:\\n",\n  "sre_parse.py(208):             elif op is GROUPREF_EXISTS:\\n",\n  "sre_parse.py(218):             elif op is SUCCESS:\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(194):                 i, j = av[-1].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(177):             return self.width\\n",\n  "sre_parse.py(195):                 lo = lo + i\\n",\n  "sre_parse.py(196):                 hi = hi + j\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(198):                 i, j = av[2].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(194):                 i, j = av[-1].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(177):             return self.width\\n",\n  "sre_parse.py(195):                 lo = lo + i\\n",\n  "sre_parse.py(196):                 hi = hi + j\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(199):                 lo = lo + i * av[0]\\n",\n  "sre_parse.py(200):                 hi = hi + j * av[1]\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(204):             elif op is GROUPREF:\\n",\n  "sre_parse.py(208):             elif op is GROUPREF_EXISTS:\\n",\n  "sre_parse.py(218):             elif op is SUCCESS:\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_compile.py(541):     if hi > MAXCODE:\\n",\n  "sre_compile.py(543):     if lo == 0:\\n",\n  "sre_compile.py(547):     prefix = []\\n",\n  "sre_compile.py(548):     prefix_skip = 0\\n",\n  "sre_compile.py(549):     charset = [] # not used\\n",\n  "sre_compile.py(550):     if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):\\n",\n  "sre_compile.py(552):         prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_literal_prefix\\n",\n  "sre_compile.py(463):     prefix = []\\n",\n  "sre_compile.py(464):     prefixappend = prefix.append\\n",\n  "sre_compile.py(465):     prefix_skip = None\\n",\n  "sre_compile.py(466):     iscased = _get_iscased(flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_iscased\\n",\n  "sre_compile.py(454):     if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(455):         return None\\n",\n  "sre_compile.py(467):     for op, av in pattern.data:\\n",\n  "sre_compile.py(468):         if op is LITERAL:\\n",\n  "sre_compile.py(472):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(487):             break\\n",\n  "sre_compile.py(490):     return prefix, prefix_skip, False\\n",\n  "sre_compile.py(554):         if not prefix:\\n",\n  "sre_compile.py(555):             charset = _get_charset_prefix(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_charset_prefix\\n",\n  "sre_compile.py(494):         if not pattern.data:\\n",\n  "sre_compile.py(496):         op, av = pattern.data[0]\\n",\n  "sre_compile.py(497):         if op is not SUBPATTERN:\\n",\n  "sre_compile.py(498):             break\\n",\n  "sre_compile.py(504):     iscased = _get_iscased(flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_iscased\\n",\n  "sre_compile.py(454):     if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(455):         return None\\n",\n  "sre_compile.py(505):     if op is LITERAL:\\n",\n  "sre_compile.py(509):     elif op is BRANCH:\\n",\n  "sre_compile.py(521):     elif op is IN:\\n",\n  "sre_compile.py(534):     return None\\n",\n  "sre_compile.py(561):     emit = code.append\\n",\n  "sre_compile.py(562):     emit(INFO)\\n",\n  "sre_compile.py(563):     skip = len(code); emit(0)\\n",\n  "sre_compile.py(565):     mask = 0\\n",\n  "sre_compile.py(566):     if prefix:\\n",\n  "sre_compile.py(570):     elif charset:\\n",\n  "sre_compile.py(572):     emit(mask)\\n",\n  "sre_compile.py(574):     if lo < MAXCODE:\\n",\n  "sre_compile.py(575):         emit(lo)\\n",\n  "sre_compile.py(579):     emit(min(hi, MAXCODE))\\n",\n  "sre_compile.py(581):     if prefix:\\n",\n  "sre_compile.py(589):     elif charset:\\n",\n  "sre_compile.py(593):     code[skip] = len(code) - skip\\n",\n  "sre_compile.py(607):     _compile(code, p.data, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(172):         elif op in SUCCESS_CODES:\\n",\n  "sre_compile.py(174):         elif op in ASSERT_CODES:\\n",\n  "sre_compile.py(187):         elif op is CALL:\\n",\n  "sre_compile.py(193):         elif op is AT:\\n",\n  "sre_compile.py(194):             emit(op)\\n",\n  "sre_compile.py(195):             if flags & SRE_FLAG_MULTILINE:\\n",\n  "sre_compile.py(197):             if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(199):             elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(200):                 av = AT_UNICODE.get(av, av)\\n",\n  "sre_compile.py(201):             emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(163):             group, add_flags, del_flags, p = av\\n",\n  "sre_compile.py(164):             if group:\\n",\n  "sre_compile.py(165):                 emit(MARK)\\n",\n  "sre_compile.py(166):                 emit((group-1)*2)\\n",\n  "sre_compile.py(168):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))\\n",\n  " --- modulename: sre_compile, funcname: _combine_flags\\n",\n  "sre_compile.py(67):     if add_flags & TYPE_FLAGS:\\n",\n  "sre_compile.py(69):     return (flags | add_flags) & ~del_flags\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(172):         elif op in SUCCESS_CODES:\\n",\n  "sre_compile.py(174):         elif op in ASSERT_CODES:\\n",\n  "sre_compile.py(187):         elif op is CALL:\\n",\n  "sre_compile.py(193):         elif op is AT:\\n",\n  "sre_compile.py(202):         elif op is BRANCH:\\n",\n  "sre_compile.py(203):             emit(op)\\n",\n  "sre_compile.py(204):             tail = []\\n",\n  "sre_compile.py(205):             tailappend = tail.append\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(207):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(209):                 _compile(code, av, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(138):             if flags & SRE_FLAG_TEMPLATE:\\n",\n  "sre_compile.py(140):             if _simple(av[2]):\\n",\n  " --- modulename: sre_compile, funcname: _simple\\n",\n  "sre_compile.py(425):     if len(p) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_compile.py(427):     op, av = p[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(428):     if op is SUBPATTERN:\\n",\n  "sre_compile.py(430):     return op in _UNIT_CODES\\n",\n  "sre_compile.py(141):                 if op is MAX_REPEAT:\\n",\n  "sre_compile.py(142):                     emit(REPEAT_ONE)\\n",\n  "sre_compile.py(145):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(146):                 emit(av[0])\\n",\n  "sre_compile.py(147):                 emit(av[1])\\n",\n  "sre_compile.py(148):                 _compile(code, av[2], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(296):                 elif op is RANGE:\\n",\n  "sre_compile.py(313):                 elif op is NEGATE:\\n",\n  "sre_compile.py(316):                     tail.append((op, av))\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(339):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(355):         out += tail\\n",\n  "sre_compile.py(357):         if hascased or len(out) < len(charset):\\n",\n  "sre_compile.py(360):         return charset, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(124):                 emit(IN)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n",\n  "sre_compile.py(263):         elif op is BIGCHARSET:\\n",\n  "sre_compile.py(265):         elif op is CATEGORY:\\n",\n  "sre_compile.py(266):             if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(268):             elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(269):                 emit(CH_UNICODE[av])\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(149):                 emit(SUCCESS)\\n",\n  "sre_compile.py(150):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(210):                 emit(JUMP)\\n",\n  "sre_compile.py(211):                 tailappend(_len(code)); emit(0)\\n",\n  "sre_compile.py(212):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(207):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(209):                 _compile(code, av, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(138):             if flags & SRE_FLAG_TEMPLATE:\\n",\n  "sre_compile.py(140):             if _simple(av[2]):\\n",\n  " --- modulename: sre_compile, funcname: _simple\\n",\n  "sre_compile.py(425):     if len(p) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_compile.py(427):     op, av = p[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(428):     if op is SUBPATTERN:\\n",\n  "sre_compile.py(430):     return op in _UNIT_CODES\\n",\n  "sre_compile.py(141):                 if op is MAX_REPEAT:\\n",\n  "sre_compile.py(142):                     emit(REPEAT_ONE)\\n",\n  "sre_compile.py(145):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(146):                 emit(av[0])\\n",\n  "sre_compile.py(147):                 emit(av[1])\\n",\n  "sre_compile.py(148):                 _compile(code, av[2], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(296):                 elif op is RANGE:\\n",\n  "sre_compile.py(313):                 elif op is NEGATE:\\n",\n  "sre_compile.py(316):                     tail.append((op, av))\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(339):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(355):         out += tail\\n",\n  "sre_compile.py(357):         if hascased or len(out) < len(charset):\\n",\n  "sre_compile.py(360):         return charset, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(124):                 emit(IN)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n",\n  "sre_compile.py(263):         elif op is BIGCHARSET:\\n",\n  "sre_compile.py(265):         elif op is CATEGORY:\\n",\n  "sre_compile.py(266):             if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(268):             elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(269):                 emit(CH_UNICODE[av])\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(149):                 emit(SUCCESS)\\n",\n  "sre_compile.py(150):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(210):                 emit(JUMP)\\n",\n  "sre_compile.py(211):                 tailappend(_len(code)); emit(0)\\n",\n  "sre_compile.py(212):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(213):             emit(FAILURE) # end of branch\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(215):                 code[tail] = _len(code) - tail\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(215):                 code[tail] = _len(code) - tail\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(169):             if group:\\n",\n  "sre_compile.py(170):                 emit(MARK)\\n",\n  "sre_compile.py(171):                 emit((group-1)*2+1)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(138):             if flags & SRE_FLAG_TEMPLATE:\\n",\n  "sre_compile.py(140):             if _simple(av[2]):\\n",\n  " --- modulename: sre_compile, funcname: _simple\\n",\n  "sre_compile.py(425):     if len(p) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_compile.py(427):     op, av = p[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(428):     if op is SUBPATTERN:\\n",\n  "sre_compile.py(429):         return av[0] is None and _simple(av[-1])\\n",\n  "sre_compile.py(152):                 emit(REPEAT)\\n",\n  "sre_compile.py(153):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(154):                 emit(av[0])\\n",\n  "sre_compile.py(155):                 emit(av[1])\\n",\n  "sre_compile.py(156):                 _compile(code, av[2], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(163):             group, add_flags, del_flags, p = av\\n",\n  "sre_compile.py(164):             if group:\\n",\n  "sre_compile.py(165):                 emit(MARK)\\n",\n  "sre_compile.py(166):                 emit((group-1)*2)\\n",\n  "sre_compile.py(168):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))\\n",\n  " --- modulename: sre_compile, funcname: _combine_flags\\n",\n  "sre_compile.py(67):     if add_flags & TYPE_FLAGS:\\n",\n  "sre_compile.py(69):     return (flags | add_flags) & ~del_flags\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(172):         elif op in SUCCESS_CODES:\\n",\n  "sre_compile.py(174):         elif op in ASSERT_CODES:\\n",\n  "sre_compile.py(187):         elif op is CALL:\\n",\n  "sre_compile.py(193):         elif op is AT:\\n",\n  "sre_compile.py(202):         elif op is BRANCH:\\n",\n  "sre_compile.py(203):             emit(op)\\n",\n  "sre_compile.py(204):             tail = []\\n",\n  "sre_compile.py(205):             tailappend = tail.append\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(207):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(209):                 _compile(code, av, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(93):                 emit(op)\\n",\n  "sre_compile.py(94):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(138):             if flags & SRE_FLAG_TEMPLATE:\\n",\n  "sre_compile.py(140):             if _simple(av[2]):\\n",\n  " --- modulename: sre_compile, funcname: _simple\\n",\n  "sre_compile.py(425):     if len(p) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_compile.py(427):     op, av = p[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(428):     if op is SUBPATTERN:\\n",\n  "sre_compile.py(430):     return op in _UNIT_CODES\\n",\n  "sre_compile.py(141):                 if op is MAX_REPEAT:\\n",\n  "sre_compile.py(142):                     emit(REPEAT_ONE)\\n",\n  "sre_compile.py(145):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(146):                 emit(av[0])\\n",\n  "sre_compile.py(147):                 emit(av[1])\\n",\n  "sre_compile.py(148):                 _compile(code, av[2], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(296):                 elif op is RANGE:\\n",\n  "sre_compile.py(313):                 elif op is NEGATE:\\n",\n  "sre_compile.py(316):                     tail.append((op, av))\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(339):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(355):         out += tail\\n",\n  "sre_compile.py(357):         if hascased or len(out) < len(charset):\\n",\n  "sre_compile.py(360):         return charset, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(124):                 emit(IN)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n",\n  "sre_compile.py(263):         elif op is BIGCHARSET:\\n",\n  "sre_compile.py(265):         elif op is CATEGORY:\\n",\n  "sre_compile.py(266):             if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(268):             elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(269):                 emit(CH_UNICODE[av])\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(149):                 emit(SUCCESS)\\n",\n  "sre_compile.py(150):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(210):                 emit(JUMP)\\n",\n  "sre_compile.py(211):                 tailappend(_len(code)); emit(0)\\n",\n  "sre_compile.py(212):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(207):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(209):                 _compile(code, av, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(93):                 emit(op)\\n",\n  "sre_compile.py(94):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(138):             if flags & SRE_FLAG_TEMPLATE:\\n",\n  "sre_compile.py(140):             if _simple(av[2]):\\n",\n  " --- modulename: sre_compile, funcname: _simple\\n",\n  "sre_compile.py(425):     if len(p) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_compile.py(427):     op, av = p[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(428):     if op is SUBPATTERN:\\n",\n  "sre_compile.py(430):     return op in _UNIT_CODES\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(141):                 if op is MAX_REPEAT:\\n",\n  "sre_compile.py(142):                     emit(REPEAT_ONE)\\n",\n  "sre_compile.py(145):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(146):                 emit(av[0])\\n",\n  "sre_compile.py(147):                 emit(av[1])\\n",\n  "sre_compile.py(148):                 _compile(code, av[2], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(93):                 emit(op)\\n",\n  "sre_compile.py(94):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(149):                 emit(SUCCESS)\\n",\n  "sre_compile.py(150):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(93):                 emit(op)\\n",\n  "sre_compile.py(94):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(210):                 emit(JUMP)\\n",\n  "sre_compile.py(211):                 tailappend(_len(code)); emit(0)\\n",\n  "sre_compile.py(212):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(213):             emit(FAILURE) # end of branch\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(215):                 code[tail] = _len(code) - tail\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(215):                 code[tail] = _len(code) - tail\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(169):             if group:\\n",\n  "sre_compile.py(170):                 emit(MARK)\\n",\n  "sre_compile.py(171):                 emit((group-1)*2+1)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(157):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(158):                 if op is MAX_REPEAT:\\n",\n  "sre_compile.py(159):                     emit(MAX_UNTIL)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(172):         elif op in SUCCESS_CODES:\\n",\n  "sre_compile.py(174):         elif op in ASSERT_CODES:\\n",\n  "sre_compile.py(187):         elif op is CALL:\\n",\n  "sre_compile.py(193):         elif op is AT:\\n",\n  "sre_compile.py(194):             emit(op)\\n",\n  "sre_compile.py(195):             if flags & SRE_FLAG_MULTILINE:\\n",\n  "sre_compile.py(197):             if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(199):             elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(200):                 av = AT_UNICODE.get(av, av)\\n",\n  "sre_compile.py(201):             emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(609):     code.append(SUCCESS)\\n",\n  "sre_compile.py(611):     return code\\n",\n  "sre_compile.py(770):     if flags & SRE_FLAG_DEBUG:\\n",\n  "sre_compile.py(775):     groupindex = p.state.groupdict\\n",\n  "sre_compile.py(776):     indexgroup = [None] * p.state.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(777):     for k, i in groupindex.items():\\n",\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "sre_compile.py(781):         pattern, flags | p.state.flags, code,\\n",\n  "sre_compile.py(782):         p.state.groups-1,\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(783):         groupindex, tuple(indexgroup)\\n",\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "re.py(305):     if not (flags & DEBUG):\\n",\n  " --- modulename: enum, funcname: __and__\\n",\n  "enum.py(978):         if not isinstance(other, (self.__class__, int)):\\n",\n  "enum.py(980):         return self.__class__(self._value_ & self.__class__(other)._value_)\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  "re.py(306):         if len(_cache) >= _MAXCACHE:\\n",\n  "re.py(312):         _cache[type(pattern), pattern, flags] = p\\n",\n  "re.py(313):     return p\\n",\n  "__init__.py(447):     def _format(self, record):\\n",\n  "__init__.py(450):     def validate(self):\\n",\n  "__init__.py(469): class StringTemplateStyle(PercentStyle):\\n",\n  " --- modulename: __init__, funcname: StringTemplateStyle\\n",\n  "__init__.py(469): class StringTemplateStyle(PercentStyle):\\n",\n  "__init__.py(470):     default_format = \'${message}\'\\n",\n  "__init__.py(471):     asctime_format = \'${asctime}\'\\n",\n  "__init__.py(472):     asctime_search = \'${asctime}\'\\n",\n  "__init__.py(474):     def __init__(self, fmt):\\n",\n  "__init__.py(478):     def usesTime(self):\\n",\n  "__init__.py(482):     def validate(self):\\n",\n  "__init__.py(496):     def _format(self, record):\\n",\n  "__init__.py(500): BASIC_FORMAT = \\"%(levelname)s:%(name)s:%(message)s\\"\\n",\n  "__init__.py(503):     \'%\': (PercentStyle, BASIC_FORMAT),\\n",\n  "__init__.py(504):     \'{\': (StrFormatStyle, \'{levelname}:{name}:{message}\'),\\n",\n  "__init__.py(505):     \'$\': (StringTemplateStyle, \'${levelname}:${name}:${message}\'),\\n",\n  "__init__.py(502): _STYLES = {\\n",\n  "__init__.py(508): class Formatter(object):\\n",\n  " --- modulename: __init__, funcname: Formatter\\n",\n  "__init__.py(508): class Formatter(object):\\n",\n  "__init__.py(509):     \\"\\"\\"\\n",\n  "__init__.py(551):     converter = time.localtime\\n",\n  "__init__.py(553):     def __init__(self, fmt=None, datefmt=None, style=\'%\', validate=True):\\n",\n  "__init__.py(579):     default_time_format = \'%Y-%m-%d %H:%M:%S\'\\n",\n  "__init__.py(580):     default_msec_format = \'%s,%03d\'\\n",\n  "__init__.py(582):     def formatTime(self, record, datefmt=None):\\n",\n  "__init__.py(609):     def formatException(self, ei):\\n",\n  "__init__.py(628):     def usesTime(self):\\n",\n  "__init__.py(634):     def formatMessage(self, record):\\n",\n  "__init__.py(637):     def formatStack(self, stack_info):\\n",\n  "__init__.py(650):     def format(self, record):\\n",\n  "__init__.py(685): _defaultFormatter = Formatter()\\n",\n  " --- modulename: __init__, funcname: __init__\\n",\n  "__init__.py(569):         if style not in _STYLES:\\n",\n  "__init__.py(572):         self._style = _STYLES[style][0](fmt)\\n",\n  " --- modulename: __init__, funcname: __init__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "__init__.py(419):         self._fmt = fmt or self.default_format\\n",\n  "__init__.py(573):         if validate:\\n",\n  "__init__.py(574):             self._style.validate()\\n",\n  " --- modulename: __init__, funcname: validate\\n",\n  "__init__.py(426):         if not self.validation_pattern.search(self._fmt):\\n",\n  "__init__.py(576):         self._fmt = self._style._fmt\\n",\n  "__init__.py(577):         self.datefmt = datefmt\\n",\n  "__init__.py(687): class BufferingFormatter(object):\\n",\n  " --- modulename: __init__, funcname: BufferingFormatter\\n",\n  "__init__.py(687): class BufferingFormatter(object):\\n",\n  "__init__.py(688):     \\"\\"\\"\\n",\n  "__init__.py(691):     def __init__(self, linefmt=None):\\n",\n  "__init__.py(701):     def formatHeader(self, records):\\n",\n  "__init__.py(707):     def formatFooter(self, records):\\n",\n  "__init__.py(713):     def format(self, records):\\n",\n  "__init__.py(729): class Filter(object):\\n",\n  " --- modulename: __init__, funcname: Filter\\n",\n  "__init__.py(729): class Filter(object):\\n",\n  "__init__.py(730):     \\"\\"\\"\\n",\n  "__init__.py(740):     def __init__(self, name=\'\'):\\n",\n  "__init__.py(751):     def filter(self, record):\\n",\n  "__init__.py(766): class Filterer(object):\\n",\n  " --- modulename: __init__, funcname: Filterer\\n",\n  "__init__.py(766): class Filterer(object):\\n",\n  "__init__.py(767):     \\"\\"\\"\\n",\n  "__init__.py(771):     def __init__(self):\\n",\n  "__init__.py(777):     def addFilter(self, filter):\\n",\n  "__init__.py(784):     def removeFilter(self, filter):\\n",\n  "__init__.py(791):     def filter(self, record):\\n",\n  "__init__.py(818): _handlers = weakref.WeakValueDictionary()  #map of handler names to handlers\\n",\n  " --- modulename: weakref, funcname: __init__\\n",\n  "weakref.py(106):         def remove(wr, selfref=ref(self), _atomic_removal=_remove_dead_weakref):\\n",\n  "weakref.py(115):         self._remove = remove\\n",\n  "weakref.py(117):         self._pending_removals = []\\n",\n  "weakref.py(118):         self._iterating = set()\\n",\n  "weakref.py(119):         self.data = {}\\n",\n  "weakref.py(120):         self.update(other, **kw)\\n",\n  " --- modulename: weakref, funcname: update\\n",\n  "weakref.py(291):         if self._pending_removals:\\n",\n  "weakref.py(293):         d = self.data\\n",\n  "weakref.py(294):         if other is not None:\\n",\n  "weakref.py(295):             if not hasattr(other, \\"items\\"):\\n",\n  "weakref.py(296):                 other = dict(other)\\n",\n  "weakref.py(297):             for key, o in other.items():\\n",\n  "weakref.py(299):         for key, o in kwargs.items():\\n",\n  "__init__.py(819): _handlerList = [] # added to allow handlers to be removed in reverse of order initialized\\n",\n  "__init__.py(821): def _removeHandlerRef(wr):\\n",\n  "__init__.py(838): def _addHandlerRef(handler):\\n",\n  "__init__.py(848): class Handler(Filterer):\\n",\n  " --- modulename: __init__, funcname: Handler\\n",\n  "__init__.py(848): class Handler(Filterer):\\n",\n  "__init__.py(849):     \\"\\"\\"\\n",\n  "__init__.py(857):     def __init__(self, level=NOTSET):\\n",\n  "__init__.py(870):     def get_name(self):\\n",\n  "__init__.py(873):     def set_name(self, name):\\n",\n  "__init__.py(884):     name = property(get_name, set_name)\\n",\n  "__init__.py(886):     def createLock(self):\\n",\n  "__init__.py(893):     def _at_fork_reinit(self):\\n",\n  "__init__.py(896):     def acquire(self):\\n",\n  "__init__.py(903):     def release(self):\\n",\n  "__init__.py(910):     def setLevel(self, level):\\n",\n  "__init__.py(916):     def format(self, record):\\n",\n  "__init__.py(929):     def emit(self, record):\\n",\n  "__init__.py(939):     def handle(self, record):\\n",\n  "__init__.py(957):     def setFormatter(self, fmt):\\n",\n  "__init__.py(963):     def flush(self):\\n",\n  "__init__.py(972):     def close(self):\\n",\n  "__init__.py(989):     def handleError(self, record):\\n",\n  "__init__.py(1036):     def __repr__(self):\\n",\n  "__init__.py(1040): class StreamHandler(Handler):\\n",\n  " --- modulename: __init__, funcname: StreamHandler\\n",\n  "__init__.py(1040): class StreamHandler(Handler):\\n",\n  "__init__.py(1041):     \\"\\"\\"\\n",\n  "__init__.py(1047):     terminator = \'\\\\n\'\\n",\n  "__init__.py(1049):     def __init__(self, stream=None):\\n",\n  "__init__.py(1060):     def flush(self):\\n",\n  "__init__.py(1071):     def emit(self, record):\\n",\n  "__init__.py(1093):     def setStream(self, stream):\\n",\n  "__init__.py(1113):     def __repr__(self):\\n",\n  "__init__.py(1123): class FileHandler(StreamHandler):\\n",\n  " --- modulename: __init__, funcname: FileHandler\\n",\n  "__init__.py(1123): class FileHandler(StreamHandler):\\n",\n  "__init__.py(1124):     \\"\\"\\"\\n",\n  "__init__.py(1127):     def __init__(self, filename, mode=\'a\', encoding=None, delay=False, errors=None):\\n",\n  "__init__.py(1148):     def close(self):\\n",\n  "__init__.py(1170):     def _open(self):\\n",\n  "__init__.py(1178):     def emit(self, record):\\n",\n  "__init__.py(1189):     def __repr__(self):\\n",\n  "__init__.py(1194): class _StderrHandler(StreamHandler):\\n",\n  " --- modulename: __init__, funcname: _StderrHandler\\n",\n  "__init__.py(1194): class _StderrHandler(StreamHandler):\\n",\n  "__init__.py(1195):     \\"\\"\\"\\n",\n  "__init__.py(1200):     def __init__(self, level=NOTSET):\\n",\n  "__init__.py(1206):     @property\\n",\n  "__init__.py(1207):     def stream(self):\\n",\n  "__init__.py(1211): _defaultLastResort = _StderrHandler(WARNING)\\n",\n  " --- modulename: __init__, funcname: __init__\\n",\n  "__init__.py(1204):         Handler.__init__(self, level)\\n",\n  " --- modulename: __init__, funcname: __init__\\n",\n  "__init__.py(862):         Filterer.__init__(self)\\n",\n  " --- modulename: __init__, funcname: __init__\\n",\n  "__init__.py(775):         self.filters = []\\n",\n  "__init__.py(863):         self._name = None\\n",\n  "__init__.py(864):         self.level = _checkLevel(level)\\n",\n  " --- modulename: __init__, funcname: _checkLevel\\n",\n  "__init__.py(194):     if isinstance(level, int):\\n",\n  "__init__.py(195):         rv = level\\n",\n  "__init__.py(202):     return rv\\n",\n  "__init__.py(865):         self.formatter = None\\n",\n  "__init__.py(867):         _addHandlerRef(self)\\n",\n  " --- modulename: __init__, funcname: _addHandlerRef\\n",\n  "__init__.py(842):     _acquireLock()\\n",\n  " --- modulename: __init__, funcname: _acquireLock\\n",\n  "__init__.py(224):     if _lock:\\n",\n  "__init__.py(225):         _lock.acquire()\\n",\n  "__init__.py(843):     try:\\n",\n  "__init__.py(844):         _handlerList.append(weakref.ref(handler, _removeHandlerRef))\\n",\n  "__init__.py(846):         _releaseLock()\\n",\n  " --- modulename: __init__, funcname: _releaseLock\\n",\n  "__init__.py(231):     if _lock:\\n",\n  "__init__.py(232):         _lock.release()\\n",\n  "__init__.py(868):         self.createLock()\\n",\n  " --- modulename: __init__, funcname: createLock\\n",\n  "__init__.py(890):         self.lock = threading.RLock()\\n",\n  " --- modulename: threading, funcname: RLock\\n",\n  "threading.py(91):     if _CRLock is None:\\n",\n  "threading.py(93):     return _CRLock(*args, **kwargs)\\n",\n  "__init__.py(891):         _register_at_fork_reinit_lock(self)\\n",\n  " --- modulename: __init__, funcname: _register_at_fork_reinit_lock\\n",\n  "__init__.py(247):         _acquireLock()\\n",\n  " --- modulename: __init__, funcname: _acquireLock\\n",\n  "__init__.py(224):     if _lock:\\n",\n  "__init__.py(225):         _lock.acquire()\\n",\n  "__init__.py(248):         try:\\n",\n  "__init__.py(249):             _at_fork_reinit_lock_weakset.add(instance)\\n",\n  " --- modulename: _weakrefset, funcname: add\\n",\n  "_weakrefset.py(87):         if self._pending_removals:\\n",\n  "_weakrefset.py(89):         self.data.add(ref(item, self._remove))\\n",\n  "__init__.py(251):             _releaseLock()\\n",\n  " --- modulename: __init__, funcname: _releaseLock\\n",\n  "__init__.py(231):     if _lock:\\n",\n  "__init__.py(232):         _lock.release()\\n",\n  "__init__.py(1212): lastResort = _defaultLastResort\\n",\n  "__init__.py(1218): class PlaceHolder(object):\\n",\n  " --- modulename: __init__, funcname: PlaceHolder\\n",\n  "__init__.py(1218): class PlaceHolder(object):\\n",\n  "__init__.py(1219):     \\"\\"\\"\\n",\n  "__init__.py(1224):     def __init__(self, alogger):\\n",\n  "__init__.py(1230):     def append(self, alogger):\\n",\n  "__init__.py(1241): def setLoggerClass(klass):\\n",\n  "__init__.py(1254): def getLoggerClass():\\n",\n  "__init__.py(1260): class Manager(object):\\n",\n  " --- modulename: __init__, funcname: Manager\\n",\n  "__init__.py(1260): class Manager(object):\\n",\n  "__init__.py(1261):     \\"\\"\\"\\n",\n  "__init__.py(1265):     def __init__(self, rootnode):\\n",\n  "__init__.py(1276):     @property\\n",\n  "__init__.py(1277):     def disable(self):\\n",\n  "__init__.py(1280):     @disable.setter\\n",\n  "__init__.py(1281):     def disable(self, value):\\n",\n  "__init__.py(1284):     def getLogger(self, name):\\n",\n  "__init__.py(1318):     def setLoggerClass(self, klass):\\n",\n  "__init__.py(1328):     def setLogRecordFactory(self, factory):\\n",\n  "__init__.py(1335):     def _fixupParents(self, alogger):\\n",\n  "__init__.py(1359):     def _fixupChildren(self, ph, alogger):\\n",\n  "__init__.py(1372):     def _clear_cache(self):\\n",\n  "__init__.py(1389): class Logger(Filterer):\\n",\n  " --- modulename: __init__, funcname: Logger\\n",\n  "__init__.py(1389): class Logger(Filterer):\\n",\n  "__init__.py(1390):     \\"\\"\\"\\n",\n  "__init__.py(1404):     def __init__(self, name, level=NOTSET):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "__init__.py(1417):     def setLevel(self, level):\\n",\n  "__init__.py(1424):     def debug(self, msg, *args, **kwargs):\\n",\n  "__init__.py(1436):     def info(self, msg, *args, **kwargs):\\n",\n  "__init__.py(1448):     def warning(self, msg, *args, **kwargs):\\n",\n  "__init__.py(1460):     def warn(self, msg, *args, **kwargs):\\n",\n  "__init__.py(1465):     def error(self, msg, *args, **kwargs):\\n",\n  "__init__.py(1477):     def exception(self, msg, *args, exc_info=True, **kwargs):\\n",\n  "__init__.py(1483):     def critical(self, msg, *args, **kwargs):\\n",\n  "__init__.py(1495):     fatal = critical\\n",\n  "__init__.py(1497):     def log(self, level, msg, *args, **kwargs):\\n",\n  "__init__.py(1514):     def findCaller(self, stack_info=False, stacklevel=1):\\n",\n  "__init__.py(1550):     def makeRecord(self, name, level, fn, lno, msg, args, exc_info,\\n",\n  "__init__.py(1565):     def _log(self, level, msg, args, exc_info=None, extra=None, stack_info=False,\\n",\n  "__init__.py(1591):     def handle(self, record):\\n",\n  "__init__.py(1601):     def addHandler(self, hdlr):\\n",\n  "__init__.py(1612):     def removeHandler(self, hdlr):\\n",\n  "__init__.py(1623):     def hasHandlers(self):\\n",\n  "__init__.py(1645):     def callHandlers(self, record):\\n",\n  "__init__.py(1675):     def getEffectiveLevel(self):\\n",\n  "__init__.py(1689):     def isEnabledFor(self, level):\\n",\n  "__init__.py(1711):     def getChild(self, suffix):\\n",\n  "__init__.py(1730):     def __repr__(self):\\n",\n  "__init__.py(1734):     def __reduce__(self):\\n",\n  "__init__.py(1743): class RootLogger(Logger):\\n",\n  " --- modulename: __init__, funcname: RootLogger\\n",\n  "__init__.py(1743): class RootLogger(Logger):\\n",\n  "__init__.py(1744):     \\"\\"\\"\\n",\n  "__init__.py(1749):     def __init__(self, level):\\n",\n  "__init__.py(1755):     def __reduce__(self):\\n",\n  "__init__.py(1758): _loggerClass = Logger\\n",\n  "__init__.py(1760): class LoggerAdapter(object):\\n",\n  " --- modulename: __init__, funcname: LoggerAdapter\\n",\n  "__init__.py(1760): class LoggerAdapter(object):\\n",\n  "__init__.py(1761):     \\"\\"\\"\\n",\n  "__init__.py(1766):     def __init__(self, logger, extra):\\n",\n  "__init__.py(1780):     def process(self, msg, kwargs):\\n",\n  "__init__.py(1796):     def debug(self, msg, *args, **kwargs):\\n",\n  "__init__.py(1802):     def info(self, msg, *args, **kwargs):\\n",\n  "__init__.py(1808):     def warning(self, msg, *args, **kwargs):\\n",\n  "__init__.py(1814):     def warn(self, msg, *args, **kwargs):\\n",\n  "__init__.py(1819):     def error(self, msg, *args, **kwargs):\\n",\n  "__init__.py(1825):     def exception(self, msg, *args, exc_info=True, **kwargs):\\n",\n  "__init__.py(1831):     def critical(self, msg, *args, **kwargs):\\n",\n  "__init__.py(1837):     def log(self, level, msg, *args, **kwargs):\\n",\n  "__init__.py(1846):     def isEnabledFor(self, level):\\n",\n  "__init__.py(1852):     def setLevel(self, level):\\n",\n  "__init__.py(1858):     def getEffectiveLevel(self):\\n",\n  "__init__.py(1864):     def hasHandlers(self):\\n",\n  "__init__.py(1870):     def _log(self, level, msg, args, exc_info=None, extra=None, stack_info=False):\\n",\n  "__init__.py(1883):     @property\\n",\n  "__init__.py(1884):     def manager(self):\\n",\n  "__init__.py(1887):     @manager.setter\\n",\n  "__init__.py(1888):     def manager(self, value):\\n",\n  "__init__.py(1891):     @property\\n",\n  "__init__.py(1892):     def name(self):\\n",\n  "__init__.py(1895):     def __repr__(self):\\n",\n  "__init__.py(1900): root = RootLogger(WARNING)\\n",\n  " --- modulename: __init__, funcname: __init__\\n",\n  "__init__.py(1753):         Logger.__init__(self, \\"root\\", level)\\n",\n  " --- modulename: __init__, funcname: __init__\\n",\n  "__init__.py(1408):         Filterer.__init__(self)\\n",\n  " --- modulename: __init__, funcname: __init__\\n",\n  "__init__.py(775):         self.filters = []\\n",\n  "__init__.py(1409):         self.name = name\\n",\n  "__init__.py(1410):         self.level = _checkLevel(level)\\n",\n  " --- modulename: __init__, funcname: _checkLevel\\n",\n  "__init__.py(194):     if isinstance(level, int):\\n",\n  "__init__.py(195):         rv = level\\n",\n  "__init__.py(202):     return rv\\n",\n  "__init__.py(1411):         self.parent = None\\n",\n  "__init__.py(1412):         self.propagate = True\\n",\n  "__init__.py(1413):         self.handlers = []\\n",\n  "__init__.py(1414):         self.disabled = False\\n",\n  "__init__.py(1415):         self._cache = {}\\n",\n  "__init__.py(1901): Logger.root = root\\n",\n  "__init__.py(1902): Logger.manager = Manager(Logger.root)\\n",\n  " --- modulename: __init__, funcname: __init__\\n",\n  "__init__.py(1269):         self.root = rootnode\\n",\n  "__init__.py(1270):         self.disable = 0\\n",\n  " --- modulename: __init__, funcname: disable\\n",\n  "__init__.py(1282):         self._disable = _checkLevel(value)\\n",\n  " --- modulename: __init__, funcname: _checkLevel\\n",\n  "__init__.py(194):     if isinstance(level, int):\\n",\n  "__init__.py(195):         rv = level\\n",\n  "__init__.py(202):     return rv\\n",\n  "__init__.py(1271):         self.emittedNoHandlerWarning = False\\n",\n  "__init__.py(1272):         self.loggerDict = {}\\n",\n  "__init__.py(1273):         self.loggerClass = None\\n",\n  "__init__.py(1274):         self.logRecordFactory = None\\n",\n  "__init__.py(1908): def basicConfig(**kwargs):\\n",\n  "__init__.py(2034): def getLogger(name=None):\\n",\n  "__init__.py(2044): def critical(msg, *args, **kwargs):\\n",\n  "__init__.py(2054): fatal = critical\\n",\n  "__init__.py(2056): def error(msg, *args, **kwargs):\\n",\n  "__init__.py(2066): def exception(msg, *args, exc_info=True, **kwargs):\\n",\n  "__init__.py(2074): def warning(msg, *args, **kwargs):\\n",\n  "__init__.py(2084): def warn(msg, *args, **kwargs):\\n",\n  "__init__.py(2089): def info(msg, *args, **kwargs):\\n",\n  "__init__.py(2099): def debug(msg, *args, **kwargs):\\n",\n  "__init__.py(2109): def log(level, msg, *args, **kwargs):\\n",\n  "__init__.py(2119): def disable(level=CRITICAL):\\n",\n  "__init__.py(2126): def shutdown(handlerList=_handlerList):\\n",\n  "__init__.py(2157): import atexit\\n",\n  "__init__.py(2158): atexit.register(shutdown)\\n",\n  "__init__.py(2162): class NullHandler(Handler):\\n",\n  " --- modulename: __init__, funcname: NullHandler\\n",\n  "__init__.py(2162): class NullHandler(Handler):\\n",\n  "__init__.py(2163):     \\"\\"\\"\\n",\n  "__init__.py(2172):     def handle(self, record):\\n",\n  "__init__.py(2175):     def emit(self, record):\\n",\n  "__init__.py(2178):     def createLock(self):\\n",\n  "__init__.py(2181):     def _at_fork_reinit(self):\\n",\n  "__init__.py(2186): _warnings_showwarning = None\\n",\n  "__init__.py(2188): def _showwarning(message, category, filename, lineno, file=None, line=None):\\n",\n  "__init__.py(2206): def captureWarnings(capture):\\n",\n  "<frozen importlib._bootstrap>(691): <frozen importlib._bootstrap>(692): <frozen importlib._bootstrap>(693):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap>(695): <frozen importlib._bootstrap>(697): <frozen importlib._bootstrap>(987): <frozen importlib._bootstrap>(996):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(161):  --- modulename: _bootstrap, funcname: release\\n",\n  "<frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(115): <frozen importlib._bootstrap>(117): <frozen importlib._bootstrap>(118): <frozen importlib._bootstrap>(119): <frozen importlib._bootstrap>(120): <frozen importlib._bootstrap>(121):  --- modulename: _bootstrap, funcname: cb\\n",\n  "<frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(191): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(194): debug.py(56): import os\\n",\n  "debug.py(57): from pprint import pprint\\n",\n  " --- modulename: _bootstrap, funcname: _find_and_load\\n",\n  "<frozen importlib._bootstrap>(1004):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(153): <frozen importlib._bootstrap>(154):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(157):  --- modulename: _bootstrap, funcname: _get_module_lock\\n",\n  "<frozen importlib._bootstrap>(172): <frozen importlib._bootstrap>(173): <frozen importlib._bootstrap>(174): <frozen importlib._bootstrap>(175): <frozen importlib._bootstrap>(176): <frozen importlib._bootstrap>(177): <frozen importlib._bootstrap>(179): <frozen importlib._bootstrap>(180): <frozen importlib._bootstrap>(183):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(59): <frozen importlib._bootstrap>(60): <frozen importlib._bootstrap>(61): <frozen importlib._bootstrap>(62): <frozen importlib._bootstrap>(63): <frozen importlib._bootstrap>(64): <frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(196): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(158):  --- modulename: _bootstrap, funcname: acquire\\n",\n  "<frozen importlib._bootstrap>(93): <frozen importlib._bootstrap>(94): <frozen importlib._bootstrap>(95): <frozen importlib._bootstrap>(97): <frozen importlib._bootstrap>(98): <frozen importlib._bootstrap>(99): <frozen importlib._bootstrap>(100): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(1005): <frozen importlib._bootstrap>(1006): <frozen importlib._bootstrap>(1007):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(968): <frozen importlib._bootstrap>(969): <frozen importlib._bootstrap>(970): <frozen importlib._bootstrap>(982):  --- modulename: _bootstrap, funcname: _find_spec\\n",\n  "<frozen importlib._bootstrap>(903): <frozen importlib._bootstrap>(904): <frozen importlib._bootstrap>(909): <frozen importlib._bootstrap>(915): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: __init__, funcname: find_spec\\n",\n  "__init__.py(85):         if path is not None:\\n",\n  "__init__.py(88):         method_name = \'spec_for_{fullname}\'.format(**locals())\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  "__init__.py(90):         return method()\\n",\n  " --- modulename: __init__, funcname: <lambda>\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  " --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(738): <frozen importlib._bootstrap>(740): <frozen importlib._bootstrap>(743):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(813): <frozen importlib._bootstrap>(816):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1421): <frozen importlib._bootstrap_external>(1422): <frozen importlib._bootstrap_external>(1423):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1388): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1555):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n",\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(151): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1557): <frozen importlib._bootstrap_external>(1556):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1510):  --- modulename: _bootstrap_external, funcname: __init__\\n",\n  "<frozen importlib._bootstrap_external>(1009): <frozen importlib._bootstrap_external>(1010): <frozen importlib._bootstrap_external>(1511): <frozen importlib._bootstrap_external>(1512): <frozen importlib._bootstrap_external>(1511):  --- modulename: _bootstrap_external, funcname: spec_from_file_location\\n",\n  "<frozen importlib._bootstrap_external>(708): <frozen importlib._bootstrap_external>(720): <frozen importlib._bootstrap_external>(728):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(353): <frozen importlib._bootstrap>(354): <frozen importlib._bootstrap>(355): <frozen importlib._bootstrap>(356): <frozen importlib._bootstrap>(357): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap_external>(729): <frozen importlib._bootstrap_external>(732): <frozen importlib._bootstrap_external>(742): <frozen importlib._bootstrap_external>(753): <frozen importlib._bootstrap_external>(754): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1400): <frozen importlib._bootstrap_external>(1401): <frozen importlib._bootstrap_external>(1424): <frozen importlib._bootstrap_external>(1426): <frozen importlib._bootstrap_external>(1437):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(928): <frozen importlib._bootstrap>(943): <frozen importlib._bootstrap>(983): <frozen importlib._bootstrap>(986):  --- modulename: _bootstrap, funcname: _load_unlocked\\n",\n  "<frozen importlib._bootstrap>(661): <frozen importlib._bootstrap>(663): <frozen importlib._bootstrap>(666):  --- modulename: _bootstrap, funcname: module_from_spec\\n",\n  "<frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(562): <frozen importlib._bootstrap>(565):  --- modulename: _bootstrap_external, funcname: create_module\\n",\n  "<frozen importlib._bootstrap_external>(842): <frozen importlib._bootstrap>(569): <frozen importlib._bootstrap>(570):  --- modulename: _bootstrap, funcname: _new_module\\n",\n  "<frozen importlib._bootstrap>(36): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap, funcname: _init_module_attrs\\n",\n  "<frozen importlib._bootstrap>(490): <frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(497): <frozen importlib._bootstrap>(498): <frozen importlib._bootstrap>(519): <frozen importlib._bootstrap>(520): <frozen importlib._bootstrap>(524): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526):  --- modulename: _bootstrap, funcname: parent\\n",\n  "<frozen importlib._bootstrap>(401): <frozen importlib._bootstrap>(402): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(535): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(542):  --- modulename: _bootstrap, funcname: has_location\\n",\n  "<frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(543): <frozen importlib._bootstrap>(544): <frozen importlib._bootstrap>(545): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(388): <frozen importlib._bootstrap>(389): <frozen importlib._bootstrap>(391):  --- modulename: _bootstrap_external, funcname: _get_cached\\n",\n  "<frozen importlib._bootstrap_external>(492): <frozen importlib._bootstrap_external>(493): <frozen importlib._bootstrap_external>(494):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(552):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(572): <frozen importlib._bootstrap>(671): <frozen importlib._bootstrap>(672): <frozen importlib._bootstrap>(673): <frozen importlib._bootstrap>(674): <frozen importlib._bootstrap>(675): <frozen importlib._bootstrap>(680):  --- modulename: _bootstrap_external, funcname: exec_module\\n",\n  "<frozen importlib._bootstrap_external>(846):  --- modulename: _bootstrap_external, funcname: get_code\\n",\n  "<frozen importlib._bootstrap_external>(923):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper\\n",\n  "<frozen importlib._bootstrap_external>(524): <frozen importlib._bootstrap_external>(526): <frozen importlib._bootstrap_external>(529):  --- modulename: _bootstrap_external, funcname: get_filename\\n",\n  "<frozen importlib._bootstrap_external>(1034): <frozen importlib._bootstrap_external>(924): <frozen importlib._bootstrap_external>(925): <frozen importlib._bootstrap_external>(926): <frozen importlib._bootstrap_external>(927): <frozen importlib._bootstrap_external>(928): <frozen importlib._bootstrap_external>(929): <frozen importlib._bootstrap_external>(930):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(934): <frozen importlib._bootstrap_external>(935):  --- modulename: _bootstrap_external, funcname: path_stats\\n",\n  "<frozen importlib._bootstrap_external>(1079):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1080): <frozen importlib._bootstrap_external>(939): <frozen importlib._bootstrap_external>(940): <frozen importlib._bootstrap_external>(941):  --- modulename: _bootstrap_external, funcname: get_data\\n",\n  "<frozen importlib._bootstrap_external>(1038): <frozen importlib._bootstrap_external>(1039): <frozen importlib._bootstrap_external>(1040): <frozen importlib._bootstrap_external>(946): <frozen importlib._bootstrap_external>(947): <frozen importlib._bootstrap_external>(945): <frozen importlib._bootstrap_external>(949): <frozen importlib._bootstrap_external>(950):  --- modulename: _bootstrap_external, funcname: _classify_pyc\\n",\n  "<frozen importlib._bootstrap_external>(576): <frozen importlib._bootstrap_external>(577): <frozen importlib._bootstrap_external>(581): <frozen importlib._bootstrap_external>(585):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(587): <frozen importlib._bootstrap_external>(590): <frozen importlib._bootstrap_external>(951): <frozen importlib._bootstrap_external>(952): <frozen importlib._bootstrap_external>(953): <frozen importlib._bootstrap_external>(966): <frozen importlib._bootstrap_external>(967): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969): <frozen importlib._bootstrap_external>(970): <frozen importlib._bootstrap_external>(971): <frozen importlib._bootstrap_external>(966):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc\\n",\n  "<frozen importlib._bootstrap_external>(612):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(617):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(976): <frozen importlib._bootstrap_external>(977): <frozen importlib._bootstrap_external>(976):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(978): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(978):  --- modulename: _bootstrap_external, funcname: _compile_bytecode\\n",\n  "<frozen importlib._bootstrap_external>(647): <frozen importlib._bootstrap_external>(648): <frozen importlib._bootstrap_external>(649):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(650): <frozen importlib._bootstrap_external>(651): <frozen importlib._bootstrap_external>(652): <frozen importlib._bootstrap_external>(847): <frozen importlib._bootstrap_external>(850):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228):  --- modulename: pprint, funcname: <module>\\n",\n  "pprint.py(11): \\"\\"\\"Support to pretty-print lists, tuples, & dictionaries recursively.\\n",\n  "pprint.py(37): import collections as _collections\\n",\n  "pprint.py(38): import re\\n",\n  "pprint.py(39): import sys as _sys\\n",\n  "pprint.py(40): import types as _types\\n",\n  "pprint.py(41): from io import StringIO as _StringIO\\n",\n  "pprint.py(43): __all__ = [\\"pprint\\",\\"pformat\\",\\"isreadable\\",\\"isrecursive\\",\\"saferepr\\",\\n",\n  "pprint.py(47): def pprint(object, stream=None, indent=1, width=80, depth=None, *,\\n",\n  "pprint.py(48):            compact=False, sort_dicts=True):\\n",\n  "pprint.py(47): def pprint(object, stream=None, indent=1, width=80, depth=None, *,\\n",\n  "pprint.py(55): def pformat(object, indent=1, width=80, depth=None, *,\\n",\n  "pprint.py(56):             compact=False, sort_dicts=True):\\n",\n  "pprint.py(55): def pformat(object, indent=1, width=80, depth=None, *,\\n",\n  "pprint.py(61): def pp(object, *args, sort_dicts=False, **kwargs):\\n",\n  "pprint.py(65): def saferepr(object):\\n",\n  "pprint.py(69): def isreadable(object):\\n",\n  "pprint.py(73): def isrecursive(object):\\n",\n  "pprint.py(77): class _safe_key:\\n",\n  " --- modulename: pprint, funcname: _safe_key\\n",\n  "pprint.py(77): class _safe_key:\\n",\n  "pprint.py(78):     \\"\\"\\"Helper function for key functions when sorting unorderable objects.\\n",\n  "pprint.py(87):     __slots__ = [\'obj\']\\n",\n  "pprint.py(89):     def __init__(self, obj):\\n",\n  "pprint.py(92):     def __lt__(self, other):\\n",\n  "pprint.py(99): def _safe_tuple(t):\\n",\n  "pprint.py(103): class PrettyPrinter:\\n",\n  " --- modulename: pprint, funcname: PrettyPrinter\\n",\n  "pprint.py(103): class PrettyPrinter:\\n",\n  "pprint.py(104):     def __init__(self, indent=1, width=80, depth=None, stream=None, *,\\n",\n  "pprint.py(105):                  compact=False, sort_dicts=True):\\n",\n  "pprint.py(104):     def __init__(self, indent=1, width=80, depth=None, stream=None, *,\\n",\n  "pprint.py(147):     def pprint(self, object):\\n",\n  "pprint.py(151):     def pformat(self, object):\\n",\n  "pprint.py(156):     def isrecursive(self, object):\\n",\n  "pprint.py(159):     def isreadable(self, object):\\n",\n  "pprint.py(163):     def _format(self, object, stream, indent, allowance, context, level):\\n",\n  "pprint.py(187):     _dispatch = {}\\n",\n  "pprint.py(189):     def _pprint_dict(self, object, stream, indent, allowance, context, level):\\n",\n  "pprint.py(204):     _dispatch[dict.__repr__] = _pprint_dict\\n",\n  "pprint.py(206):     def _pprint_ordered_dict(self, object, stream, indent, allowance, context, level):\\n",\n  "pprint.py(217):     _dispatch[_collections.OrderedDict.__repr__] = _pprint_ordered_dict\\n",\n  "pprint.py(219):     def _pprint_list(self, object, stream, indent, allowance, context, level):\\n",\n  "pprint.py(225):     _dispatch[list.__repr__] = _pprint_list\\n",\n  "pprint.py(227):     def _pprint_tuple(self, object, stream, indent, allowance, context, level):\\n",\n  "pprint.py(234):     _dispatch[tuple.__repr__] = _pprint_tuple\\n",\n  "pprint.py(236):     def _pprint_set(self, object, stream, indent, allowance, context, level):\\n",\n  "pprint.py(253):     _dispatch[set.__repr__] = _pprint_set\\n",\n  "pprint.py(254):     _dispatch[frozenset.__repr__] = _pprint_set\\n",\n  "pprint.py(256):     def _pprint_str(self, object, stream, indent, allowance, context, level):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "pprint.py(305):     _dispatch[str.__repr__] = _pprint_str\\n",\n  "pprint.py(307):     def _pprint_bytes(self, object, stream, indent, allowance, context, level):\\n",\n  "pprint.py(326):     _dispatch[bytes.__repr__] = _pprint_bytes\\n",\n  "pprint.py(328):     def _pprint_bytearray(self, object, stream, indent, allowance, context, level):\\n",\n  "pprint.py(335):     _dispatch[bytearray.__repr__] = _pprint_bytearray\\n",\n  "pprint.py(337):     def _pprint_mappingproxy(self, object, stream, indent, allowance, context, level):\\n",\n  "pprint.py(343):     _dispatch[_types.MappingProxyType.__repr__] = _pprint_mappingproxy\\n",\n  "pprint.py(345):     def _pprint_simplenamespace(self, object, stream, indent, allowance, context, level):\\n",\n  "pprint.py(370):     _dispatch[_types.SimpleNamespace.__repr__] = _pprint_simplenamespace\\n",\n  "pprint.py(372):     def _format_dict_items(self, items, stream, indent, allowance, context,\\n",\n  "pprint.py(389):     def _format_items(self, items, stream, indent, allowance, context, level):\\n",\n  "pprint.py(430):     def _repr(self, object, context, level):\\n",\n  "pprint.py(439):     def format(self, object, context, maxlevels, level):\\n",\n  "pprint.py(446):     def _pprint_default_dict(self, object, stream, indent, allowance, context, level):\\n",\n  "pprint.py(457):     _dispatch[_collections.defaultdict.__repr__] = _pprint_default_dict\\n",\n  "pprint.py(459):     def _pprint_counter(self, object, stream, indent, allowance, context, level):\\n",\n  "pprint.py(473):     _dispatch[_collections.Counter.__repr__] = _pprint_counter\\n",\n  "pprint.py(475):     def _pprint_chain_map(self, object, stream, indent, allowance, context, level):\\n",\n  "pprint.py(490):     _dispatch[_collections.ChainMap.__repr__] = _pprint_chain_map\\n",\n  "pprint.py(492):     def _pprint_deque(self, object, stream, indent, allowance, context, level):\\n",\n  "pprint.py(510):     _dispatch[_collections.deque.__repr__] = _pprint_deque\\n",\n  "pprint.py(512):     def _pprint_user_dict(self, object, stream, indent, allowance, context, level):\\n",\n  "pprint.py(515):     _dispatch[_collections.UserDict.__repr__] = _pprint_user_dict\\n",\n  "pprint.py(517):     def _pprint_user_list(self, object, stream, indent, allowance, context, level):\\n",\n  "pprint.py(520):     _dispatch[_collections.UserList.__repr__] = _pprint_user_list\\n",\n  "pprint.py(522):     def _pprint_user_string(self, object, stream, indent, allowance, context, level):\\n",\n  "pprint.py(525):     _dispatch[_collections.UserString.__repr__] = _pprint_user_string\\n",\n  "pprint.py(529): def _safe_repr(object, context, maxlevels, level, sort_dicts):\\n",\n  "pprint.py(599): _builtin_scalars = frozenset({str, bytes, bytearray, int, float, complex,\\n",\n  "pprint.py(600):                               bool, type(None)})\\n",\n  "pprint.py(599): _builtin_scalars = frozenset({str, bytes, bytearray, int, float, complex,\\n",\n  "pprint.py(602): def _recursion(object):\\n",\n  "pprint.py(607): def _perfcheck(object=None):\\n",\n  "pprint.py(620): def _wrap_bytes_repr(object, width, allowance):\\n",\n  "pprint.py(637): if __name__ == \\"__main__\\":\\n",\n  "<frozen importlib._bootstrap>(691): <frozen importlib._bootstrap>(692): <frozen importlib._bootstrap>(693):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap>(695): <frozen importlib._bootstrap>(697): <frozen importlib._bootstrap>(987): <frozen importlib._bootstrap>(996):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(161):  --- modulename: _bootstrap, funcname: release\\n",\n  "<frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(115): <frozen importlib._bootstrap>(117): <frozen importlib._bootstrap>(118): <frozen importlib._bootstrap>(119): <frozen importlib._bootstrap>(120): <frozen importlib._bootstrap>(121):  --- modulename: _bootstrap, funcname: cb\\n",\n  "<frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(191): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(194): debug.py(58): import re\\n",\n  "debug.py(59): import six\\n",\n  " --- modulename: _bootstrap, funcname: _find_and_load\\n",\n  "<frozen importlib._bootstrap>(1004):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(153): <frozen importlib._bootstrap>(154):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(157):  --- modulename: _bootstrap, funcname: _get_module_lock\\n",\n  "<frozen importlib._bootstrap>(172): <frozen importlib._bootstrap>(173): <frozen importlib._bootstrap>(174): <frozen importlib._bootstrap>(175): <frozen importlib._bootstrap>(176): <frozen importlib._bootstrap>(177): <frozen importlib._bootstrap>(179): <frozen importlib._bootstrap>(180): <frozen importlib._bootstrap>(183):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(59): <frozen importlib._bootstrap>(60): <frozen importlib._bootstrap>(61): <frozen importlib._bootstrap>(62): <frozen importlib._bootstrap>(63): <frozen importlib._bootstrap>(64): <frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(196): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(158):  --- modulename: _bootstrap, funcname: acquire\\n",\n  "<frozen importlib._bootstrap>(93): <frozen importlib._bootstrap>(94): <frozen importlib._bootstrap>(95): <frozen importlib._bootstrap>(97): <frozen importlib._bootstrap>(98): <frozen importlib._bootstrap>(99): <frozen importlib._bootstrap>(100): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(1005): <frozen importlib._bootstrap>(1006): <frozen importlib._bootstrap>(1007):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked\\n",\n  "<frozen importlib._bootstrap>(968): <frozen importlib._bootstrap>(969): <frozen importlib._bootstrap>(970): <frozen importlib._bootstrap>(982):  --- modulename: _bootstrap, funcname: _find_spec\\n",\n  "<frozen importlib._bootstrap>(903): <frozen importlib._bootstrap>(904): <frozen importlib._bootstrap>(909): <frozen importlib._bootstrap>(915): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: __init__, funcname: find_spec\\n",\n  "__init__.py(85):         if path is not None:\\n",\n  "__init__.py(88):         method_name = \'spec_for_{fullname}\'.format(**locals())\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  "__init__.py(90):         return method()\\n",\n  " --- modulename: __init__, funcname: <lambda>\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  " --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(738): <frozen importlib._bootstrap>(740): <frozen importlib._bootstrap>(743):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(813): <frozen importlib._bootstrap>(816):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1421): <frozen importlib._bootstrap_external>(1422): <frozen importlib._bootstrap_external>(1423):  --- modulename: _bootstrap_external, funcname: _get_spec\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(1388): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1555):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n",\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(151): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1557): <frozen importlib._bootstrap_external>(1556):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1510):  --- modulename: _bootstrap_external, funcname: __init__\\n",\n  "<frozen importlib._bootstrap_external>(1009): <frozen importlib._bootstrap_external>(1010): <frozen importlib._bootstrap_external>(1511): <frozen importlib._bootstrap_external>(1512): <frozen importlib._bootstrap_external>(1511):  --- modulename: _bootstrap_external, funcname: spec_from_file_location\\n",\n  "<frozen importlib._bootstrap_external>(708): <frozen importlib._bootstrap_external>(720): <frozen importlib._bootstrap_external>(728):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(353): <frozen importlib._bootstrap>(354): <frozen importlib._bootstrap>(355): <frozen importlib._bootstrap>(356): <frozen importlib._bootstrap>(357): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap_external>(729): <frozen importlib._bootstrap_external>(732): <frozen importlib._bootstrap_external>(742): <frozen importlib._bootstrap_external>(753): <frozen importlib._bootstrap_external>(754): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1400): <frozen importlib._bootstrap_external>(1401): <frozen importlib._bootstrap_external>(1424): <frozen importlib._bootstrap_external>(1426): <frozen importlib._bootstrap_external>(1437):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(928): <frozen importlib._bootstrap>(943): <frozen importlib._bootstrap>(983): <frozen importlib._bootstrap>(986):  --- modulename: _bootstrap, funcname: _load_unlocked\\n",\n  "<frozen importlib._bootstrap>(661): <frozen importlib._bootstrap>(663): <frozen importlib._bootstrap>(666):  --- modulename: _bootstrap, funcname: module_from_spec\\n",\n  "<frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(562): <frozen importlib._bootstrap>(565):  --- modulename: _bootstrap_external, funcname: create_module\\n",\n  "<frozen importlib._bootstrap_external>(842): <frozen importlib._bootstrap>(569): <frozen importlib._bootstrap>(570):  --- modulename: _bootstrap, funcname: _new_module\\n",\n  "<frozen importlib._bootstrap>(36): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap, funcname: _init_module_attrs\\n",\n  "<frozen importlib._bootstrap>(490): <frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(497): <frozen importlib._bootstrap>(498): <frozen importlib._bootstrap>(519): <frozen importlib._bootstrap>(520): <frozen importlib._bootstrap>(524): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526):  --- modulename: _bootstrap, funcname: parent\\n",\n  "<frozen importlib._bootstrap>(401): <frozen importlib._bootstrap>(402): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(535): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(542):  --- modulename: _bootstrap, funcname: has_location\\n",\n  "<frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(543): <frozen importlib._bootstrap>(544): <frozen importlib._bootstrap>(545): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(388): <frozen importlib._bootstrap>(389): <frozen importlib._bootstrap>(391):  --- modulename: _bootstrap_external, funcname: _get_cached\\n",\n  "<frozen importlib._bootstrap_external>(492): <frozen importlib._bootstrap_external>(493): <frozen importlib._bootstrap_external>(494):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(552):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(572): <frozen importlib._bootstrap>(671): <frozen importlib._bootstrap>(672): <frozen importlib._bootstrap>(673): <frozen importlib._bootstrap>(674): <frozen importlib._bootstrap>(675): <frozen importlib._bootstrap>(680):  --- modulename: _bootstrap_external, funcname: exec_module\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(846):  --- modulename: _bootstrap_external, funcname: get_code\\n",\n  "<frozen importlib._bootstrap_external>(923):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper\\n",\n  "<frozen importlib._bootstrap_external>(524): <frozen importlib._bootstrap_external>(526): <frozen importlib._bootstrap_external>(529):  --- modulename: _bootstrap_external, funcname: get_filename\\n",\n  "<frozen importlib._bootstrap_external>(1034): <frozen importlib._bootstrap_external>(924): <frozen importlib._bootstrap_external>(925): <frozen importlib._bootstrap_external>(926): <frozen importlib._bootstrap_external>(927): <frozen importlib._bootstrap_external>(928): <frozen importlib._bootstrap_external>(929): <frozen importlib._bootstrap_external>(930):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(934): <frozen importlib._bootstrap_external>(935):  --- modulename: _bootstrap_external, funcname: path_stats\\n",\n  "<frozen importlib._bootstrap_external>(1079):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1080): <frozen importlib._bootstrap_external>(939): <frozen importlib._bootstrap_external>(940): <frozen importlib._bootstrap_external>(941):  --- modulename: _bootstrap_external, funcname: get_data\\n",\n  "<frozen importlib._bootstrap_external>(1038): <frozen importlib._bootstrap_external>(1039): <frozen importlib._bootstrap_external>(1040): <frozen importlib._bootstrap_external>(946): <frozen importlib._bootstrap_external>(947): <frozen importlib._bootstrap_external>(945): <frozen importlib._bootstrap_external>(949): <frozen importlib._bootstrap_external>(950):  --- modulename: _bootstrap_external, funcname: _classify_pyc\\n",\n  "<frozen importlib._bootstrap_external>(576): <frozen importlib._bootstrap_external>(577): <frozen importlib._bootstrap_external>(581): <frozen importlib._bootstrap_external>(585):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(587): <frozen importlib._bootstrap_external>(590): <frozen importlib._bootstrap_external>(951): <frozen importlib._bootstrap_external>(952): <frozen importlib._bootstrap_external>(953): <frozen importlib._bootstrap_external>(966): <frozen importlib._bootstrap_external>(967): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969): <frozen importlib._bootstrap_external>(970): <frozen importlib._bootstrap_external>(971): <frozen importlib._bootstrap_external>(966):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc\\n",\n  "<frozen importlib._bootstrap_external>(612):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(617):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(976): <frozen importlib._bootstrap_external>(977): <frozen importlib._bootstrap_external>(976):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(978): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(978):  --- modulename: _bootstrap_external, funcname: _compile_bytecode\\n",\n  "<frozen importlib._bootstrap_external>(647): <frozen importlib._bootstrap_external>(648): <frozen importlib._bootstrap_external>(649):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(650): <frozen importlib._bootstrap_external>(651): <frozen importlib._bootstrap_external>(652): <frozen importlib._bootstrap_external>(847): <frozen importlib._bootstrap_external>(850):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228):  --- modulename: six, funcname: <module>\\n",\n  "six.py(21): \\"\\"\\"Utilities for writing code that runs on Python 2 and 3\\"\\"\\"\\n",\n  "six.py(23): from __future__ import absolute_import\\n",\n  " --- modulename: _bootstrap, funcname: _find_and_load\\n",\n  "<frozen importlib._bootstrap>(1004):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(153): <frozen importlib._bootstrap>(154):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(157):  --- modulename: _bootstrap, funcname: _get_module_lock\\n",\n  "<frozen importlib._bootstrap>(172): <frozen importlib._bootstrap>(173): <frozen importlib._bootstrap>(174): <frozen importlib._bootstrap>(175): <frozen importlib._bootstrap>(176): <frozen importlib._bootstrap>(177): <frozen importlib._bootstrap>(179): <frozen importlib._bootstrap>(180): <frozen importlib._bootstrap>(183):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(59): <frozen importlib._bootstrap>(60): <frozen importlib._bootstrap>(61): <frozen importlib._bootstrap>(62): <frozen importlib._bootstrap>(63): <frozen importlib._bootstrap>(64): <frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(196): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(158):  --- modulename: _bootstrap, funcname: acquire\\n",\n  "<frozen importlib._bootstrap>(93): <frozen importlib._bootstrap>(94): <frozen importlib._bootstrap>(95): <frozen importlib._bootstrap>(97): <frozen importlib._bootstrap>(98): <frozen importlib._bootstrap>(99): <frozen importlib._bootstrap>(100): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(1005): <frozen importlib._bootstrap>(1006): <frozen importlib._bootstrap>(1007):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked\\n",\n  "<frozen importlib._bootstrap>(968): <frozen importlib._bootstrap>(969): <frozen importlib._bootstrap>(970): <frozen importlib._bootstrap>(982):  --- modulename: _bootstrap, funcname: _find_spec\\n",\n  "<frozen importlib._bootstrap>(903): <frozen importlib._bootstrap>(904): <frozen importlib._bootstrap>(909): <frozen importlib._bootstrap>(915): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: __init__, funcname: find_spec\\n",\n  "__init__.py(85):         if path is not None:\\n",\n  "__init__.py(88):         method_name = \'spec_for_{fullname}\'.format(**locals())\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  "__init__.py(90):         return method()\\n",\n  " --- modulename: __init__, funcname: <lambda>\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  " --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(738): <frozen importlib._bootstrap>(740): <frozen importlib._bootstrap>(743):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(813): <frozen importlib._bootstrap>(816):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1421): <frozen importlib._bootstrap_external>(1422): <frozen importlib._bootstrap_external>(1423):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1388): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1555):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n",\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(151): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1557): <frozen importlib._bootstrap_external>(1556):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1510):  --- modulename: _bootstrap_external, funcname: __init__\\n",\n  "<frozen importlib._bootstrap_external>(1009): <frozen importlib._bootstrap_external>(1010): <frozen importlib._bootstrap_external>(1511): <frozen importlib._bootstrap_external>(1512): <frozen importlib._bootstrap_external>(1511):  --- modulename: _bootstrap_external, funcname: spec_from_file_location\\n",\n  "<frozen importlib._bootstrap_external>(708): <frozen importlib._bootstrap_external>(720): <frozen importlib._bootstrap_external>(728):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(353): <frozen importlib._bootstrap>(354): <frozen importlib._bootstrap>(355): <frozen importlib._bootstrap>(356): <frozen importlib._bootstrap>(357): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap_external>(729): <frozen importlib._bootstrap_external>(732): <frozen importlib._bootstrap_external>(742): <frozen importlib._bootstrap_external>(753): <frozen importlib._bootstrap_external>(754): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1400): <frozen importlib._bootstrap_external>(1401): <frozen importlib._bootstrap_external>(1424): <frozen importlib._bootstrap_external>(1426): <frozen importlib._bootstrap_external>(1437):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(928): <frozen importlib._bootstrap>(943): <frozen importlib._bootstrap>(983): <frozen importlib._bootstrap>(986):  --- modulename: _bootstrap, funcname: _load_unlocked\\n",\n  "<frozen importlib._bootstrap>(661): <frozen importlib._bootstrap>(663): <frozen importlib._bootstrap>(666):  --- modulename: _bootstrap, funcname: module_from_spec\\n",\n  "<frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(562): <frozen importlib._bootstrap>(565):  --- modulename: _bootstrap_external, funcname: create_module\\n",\n  "<frozen importlib._bootstrap_external>(842): <frozen importlib._bootstrap>(569): <frozen importlib._bootstrap>(570):  --- modulename: _bootstrap, funcname: _new_module\\n",\n  "<frozen importlib._bootstrap>(36): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap, funcname: _init_module_attrs\\n",\n  "<frozen importlib._bootstrap>(490): <frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(497): <frozen importlib._bootstrap>(498): <frozen importlib._bootstrap>(519): <frozen importlib._bootstrap>(520): <frozen importlib._bootstrap>(524): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526):  --- modulename: _bootstrap, funcname: parent\\n",\n  "<frozen importlib._bootstrap>(401): <frozen importlib._bootstrap>(402): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(535): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(542):  --- modulename: _bootstrap, funcname: has_location\\n",\n  "<frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(543): <frozen importlib._bootstrap>(544): <frozen importlib._bootstrap>(545): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(388): <frozen importlib._bootstrap>(389): <frozen importlib._bootstrap>(391):  --- modulename: _bootstrap_external, funcname: _get_cached\\n",\n  "<frozen importlib._bootstrap_external>(492): <frozen importlib._bootstrap_external>(493): <frozen importlib._bootstrap_external>(494):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(552):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(572): <frozen importlib._bootstrap>(671): <frozen importlib._bootstrap>(672): <frozen importlib._bootstrap>(673): <frozen importlib._bootstrap>(674): <frozen importlib._bootstrap>(675): <frozen importlib._bootstrap>(680):  --- modulename: _bootstrap_external, funcname: exec_module\\n",\n  "<frozen importlib._bootstrap_external>(846):  --- modulename: _bootstrap_external, funcname: get_code\\n",\n  "<frozen importlib._bootstrap_external>(923):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper\\n",\n  "<frozen importlib._bootstrap_external>(524): <frozen importlib._bootstrap_external>(526): <frozen importlib._bootstrap_external>(529):  --- modulename: _bootstrap_external, funcname: get_filename\\n",\n  "<frozen importlib._bootstrap_external>(1034): <frozen importlib._bootstrap_external>(924): <frozen importlib._bootstrap_external>(925): <frozen importlib._bootstrap_external>(926): <frozen importlib._bootstrap_external>(927): <frozen importlib._bootstrap_external>(928): <frozen importlib._bootstrap_external>(929): <frozen importlib._bootstrap_external>(930):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(934): <frozen importlib._bootstrap_external>(935):  --- modulename: _bootstrap_external, funcname: path_stats\\n",\n  "<frozen importlib._bootstrap_external>(1079):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1080): <frozen importlib._bootstrap_external>(939): <frozen importlib._bootstrap_external>(940): <frozen importlib._bootstrap_external>(941):  --- modulename: _bootstrap_external, funcname: get_data\\n",\n  "<frozen importlib._bootstrap_external>(1038): <frozen importlib._bootstrap_external>(1039): <frozen importlib._bootstrap_external>(1040): <frozen importlib._bootstrap_external>(946): <frozen importlib._bootstrap_external>(947): <frozen importlib._bootstrap_external>(945): <frozen importlib._bootstrap_external>(949): <frozen importlib._bootstrap_external>(950):  --- modulename: _bootstrap_external, funcname: _classify_pyc\\n",\n  "<frozen importlib._bootstrap_external>(576): <frozen importlib._bootstrap_external>(577): <frozen importlib._bootstrap_external>(581): <frozen importlib._bootstrap_external>(585):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(587): <frozen importlib._bootstrap_external>(590): <frozen importlib._bootstrap_external>(951): <frozen importlib._bootstrap_external>(952): <frozen importlib._bootstrap_external>(953): <frozen importlib._bootstrap_external>(966): <frozen importlib._bootstrap_external>(967): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969): <frozen importlib._bootstrap_external>(970): <frozen importlib._bootstrap_external>(971): <frozen importlib._bootstrap_external>(966):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc\\n",\n  "<frozen importlib._bootstrap_external>(612):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(617):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(976): <frozen importlib._bootstrap_external>(977): <frozen importlib._bootstrap_external>(976):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(978): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(978):  --- modulename: _bootstrap_external, funcname: _compile_bytecode\\n",\n  "<frozen importlib._bootstrap_external>(647): <frozen importlib._bootstrap_external>(648): <frozen importlib._bootstrap_external>(649):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(650): <frozen importlib._bootstrap_external>(651): <frozen importlib._bootstrap_external>(652): <frozen importlib._bootstrap_external>(847): <frozen importlib._bootstrap_external>(850):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228):  --- modulename: __future__, funcname: <module>\\n",\n  "__future__.py(1): \\"\\"\\"Record of phased-in incompatible language changes.\\n",\n  "__future__.py(50): all_feature_names = [\\n",\n  "__future__.py(63): __all__ = [\\"all_feature_names\\"] + all_feature_names\\n",\n  "__future__.py(69): CO_NESTED = 0x0010                      # nested_scopes\\n",\n  "__future__.py(70): CO_GENERATOR_ALLOWED = 0                # generators (obsolete, was 0x1000)\\n",\n  "__future__.py(71): CO_FUTURE_DIVISION = 0x20000            # division\\n",\n  "__future__.py(72): CO_FUTURE_ABSOLUTE_IMPORT = 0x40000     # perform absolute imports by default\\n",\n  "__future__.py(73): CO_FUTURE_WITH_STATEMENT = 0x80000      # with statement\\n",\n  "__future__.py(74): CO_FUTURE_PRINT_FUNCTION = 0x100000     # print function\\n",\n  "__future__.py(75): CO_FUTURE_UNICODE_LITERALS = 0x200000   # unicode string literals\\n",\n  "__future__.py(76): CO_FUTURE_BARRY_AS_BDFL = 0x400000\\n",\n  "__future__.py(77): CO_FUTURE_GENERATOR_STOP = 0x800000     # StopIteration becomes RuntimeError in generators\\n",\n  "__future__.py(78): CO_FUTURE_ANNOTATIONS = 0x1000000       # annotations become strings at runtime\\n",\n  "__future__.py(81): class _Feature:\\n",\n  " --- modulename: __future__, funcname: _Feature\\n",\n  "__future__.py(81): class _Feature:\\n",\n  "__future__.py(83):     def __init__(self, optionalRelease, mandatoryRelease, compiler_flag):\\n",\n  "__future__.py(88):     def getOptionalRelease(self):\\n",\n  "__future__.py(95):     def getMandatoryRelease(self):\\n",\n  "__future__.py(103):     def __repr__(self):\\n",\n  "__future__.py(109): nested_scopes = _Feature((2, 1, 0, \\"beta\\",  1),\\n",\n  "__future__.py(110):                          (2, 2, 0, \\"alpha\\", 0),\\n",\n  "__future__.py(111):                          CO_NESTED)\\n",\n  "__future__.py(109): nested_scopes = _Feature((2, 1, 0, \\"beta\\",  1),\\n",\n  " --- modulename: __future__, funcname: __init__\\n",\n  "__future__.py(84):         self.optional = optionalRelease\\n",\n  "__future__.py(85):         self.mandatory = mandatoryRelease\\n",\n  "__future__.py(86):         self.compiler_flag = compiler_flag\\n",\n  "__future__.py(113): generators = _Feature((2, 2, 0, \\"alpha\\", 1),\\n",\n  "__future__.py(114):                       (2, 3, 0, \\"final\\", 0),\\n",\n  "__future__.py(115):                       CO_GENERATOR_ALLOWED)\\n",\n  "__future__.py(113): generators = _Feature((2, 2, 0, \\"alpha\\", 1),\\n",\n  " --- modulename: __future__, funcname: __init__\\n",\n  "__future__.py(84):         self.optional = optionalRelease\\n",\n  "__future__.py(85):         self.mandatory = mandatoryRelease\\n",\n  "__future__.py(86):         self.compiler_flag = compiler_flag\\n",\n  "__future__.py(117): division = _Feature((2, 2, 0, \\"alpha\\", 2),\\n",\n  "__future__.py(118):                     (3, 0, 0, \\"alpha\\", 0),\\n",\n  "__future__.py(119):                     CO_FUTURE_DIVISION)\\n",\n  "__future__.py(117): division = _Feature((2, 2, 0, \\"alpha\\", 2),\\n",\n  " --- modulename: __future__, funcname: __init__\\n",\n  "__future__.py(84):         self.optional = optionalRelease\\n",\n  "__future__.py(85):         self.mandatory = mandatoryRelease\\n",\n  "__future__.py(86):         self.compiler_flag = compiler_flag\\n",\n  "__future__.py(121): absolute_import = _Feature((2, 5, 0, \\"alpha\\", 1),\\n",\n  "__future__.py(122):                            (3, 0, 0, \\"alpha\\", 0),\\n",\n  "__future__.py(123):                            CO_FUTURE_ABSOLUTE_IMPORT)\\n",\n  "__future__.py(121): absolute_import = _Feature((2, 5, 0, \\"alpha\\", 1),\\n",\n  " --- modulename: __future__, funcname: __init__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "__future__.py(84):         self.optional = optionalRelease\\n",\n  "__future__.py(85):         self.mandatory = mandatoryRelease\\n",\n  "__future__.py(86):         self.compiler_flag = compiler_flag\\n",\n  "__future__.py(125): with_statement = _Feature((2, 5, 0, \\"alpha\\", 1),\\n",\n  "__future__.py(126):                           (2, 6, 0, \\"alpha\\", 0),\\n",\n  "__future__.py(127):                           CO_FUTURE_WITH_STATEMENT)\\n",\n  "__future__.py(125): with_statement = _Feature((2, 5, 0, \\"alpha\\", 1),\\n",\n  " --- modulename: __future__, funcname: __init__\\n",\n  "__future__.py(84):         self.optional = optionalRelease\\n",\n  "__future__.py(85):         self.mandatory = mandatoryRelease\\n",\n  "<frozen importlib._bootstrap_external>(1388): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1555):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n",\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(151): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1557): <frozen importlib._bootstrap_external>(1556):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1510):  --- modulename: _bootstrap_external, funcname: __init__\\n",\n  "<frozen importlib._bootstrap_external>(1009): <frozen importlib._bootstrap_external>(1010): <frozen importlib._bootstrap_external>(1511): <frozen importlib._bootstrap_external>(1512): <frozen importlib._bootstrap_external>(1511):  --- modulename: _bootstrap_external, funcname: spec_from_file_location\\n",\n  "<frozen importlib._bootstrap_external>(708): <frozen importlib._bootstrap_external>(720): <frozen importlib._bootstrap_external>(728):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(353): <frozen importlib._bootstrap>(354): <frozen importlib._bootstrap>(355): <frozen importlib._bootstrap>(356): <frozen importlib._bootstrap>(357): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap_external>(729): <frozen importlib._bootstrap_external>(732): <frozen importlib._bootstrap_external>(742): <frozen importlib._bootstrap_external>(753): <frozen importlib._bootstrap_external>(754): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1400): <frozen importlib._bootstrap_external>(1401): <frozen importlib._bootstrap_external>(1424): <frozen importlib._bootstrap_external>(1426): <frozen importlib._bootstrap_external>(1437):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(928): <frozen importlib._bootstrap>(943): <frozen importlib._bootstrap>(983): <frozen importlib._bootstrap>(986):  --- modulename: _bootstrap, funcname: _load_unlocked\\n",\n  "<frozen importlib._bootstrap>(661): <frozen importlib._bootstrap>(663): <frozen importlib._bootstrap>(666):  --- modulename: _bootstrap, funcname: module_from_spec\\n",\n  "<frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(562): <frozen importlib._bootstrap>(565):  --- modulename: _bootstrap_external, funcname: create_module\\n",\n  "<frozen importlib._bootstrap_external>(842): <frozen importlib._bootstrap>(569): <frozen importlib._bootstrap>(570):  --- modulename: _bootstrap, funcname: _new_module\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(36): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap, funcname: _init_module_attrs\\n",\n  "<frozen importlib._bootstrap>(490): <frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(497): <frozen importlib._bootstrap>(498): <frozen importlib._bootstrap>(519): <frozen importlib._bootstrap>(520): <frozen importlib._bootstrap>(524): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526):  --- modulename: _bootstrap, funcname: parent\\n",\n  "<frozen importlib._bootstrap>(401): <frozen importlib._bootstrap>(402): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(535): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(542):  --- modulename: _bootstrap, funcname: has_location\\n",\n  "<frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(543): <frozen importlib._bootstrap>(544): <frozen importlib._bootstrap>(545): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(388): <frozen importlib._bootstrap>(389): <frozen importlib._bootstrap>(391):  --- modulename: _bootstrap_external, funcname: _get_cached\\n",\n  "<frozen importlib._bootstrap_external>(492): <frozen importlib._bootstrap_external>(493): <frozen importlib._bootstrap_external>(494):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(552):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(572): <frozen importlib._bootstrap>(671): <frozen importlib._bootstrap>(672): <frozen importlib._bootstrap>(673): <frozen importlib._bootstrap>(674): <frozen importlib._bootstrap>(675): <frozen importlib._bootstrap>(680):  --- modulename: _bootstrap_external, funcname: exec_module\\n",\n  "<frozen importlib._bootstrap_external>(846):  --- modulename: _bootstrap_external, funcname: get_code\\n",\n  "<frozen importlib._bootstrap_external>(923):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper\\n",\n  "<frozen importlib._bootstrap_external>(524): <frozen importlib._bootstrap_external>(526): <frozen importlib._bootstrap_external>(529):  --- modulename: _bootstrap_external, funcname: get_filename\\n",\n  "<frozen importlib._bootstrap_external>(1034): <frozen importlib._bootstrap_external>(924): <frozen importlib._bootstrap_external>(925): <frozen importlib._bootstrap_external>(926): <frozen importlib._bootstrap_external>(927): <frozen importlib._bootstrap_external>(928): <frozen importlib._bootstrap_external>(929): <frozen importlib._bootstrap_external>(930):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(934): <frozen importlib._bootstrap_external>(935):  --- modulename: _bootstrap_external, funcname: path_stats\\n",\n  "<frozen importlib._bootstrap_external>(1079):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1080): <frozen importlib._bootstrap_external>(939): <frozen importlib._bootstrap_external>(940): <frozen importlib._bootstrap_external>(941):  --- modulename: _bootstrap_external, funcname: get_data\\n",\n  "<frozen importlib._bootstrap_external>(1038): <frozen importlib._bootstrap_external>(1039): <frozen importlib._bootstrap_external>(1040): <frozen importlib._bootstrap_external>(946): <frozen importlib._bootstrap_external>(947): <frozen importlib._bootstrap_external>(945): <frozen importlib._bootstrap_external>(949): <frozen importlib._bootstrap_external>(950):  --- modulename: _bootstrap_external, funcname: _classify_pyc\\n",\n  "<frozen importlib._bootstrap_external>(576): <frozen importlib._bootstrap_external>(577): <frozen importlib._bootstrap_external>(581): <frozen importlib._bootstrap_external>(585):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(587): <frozen importlib._bootstrap_external>(590): <frozen importlib._bootstrap_external>(951): <frozen importlib._bootstrap_external>(952): <frozen importlib._bootstrap_external>(953): <frozen importlib._bootstrap_external>(966): <frozen importlib._bootstrap_external>(967): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969): <frozen importlib._bootstrap_external>(970): <frozen importlib._bootstrap_external>(971): <frozen importlib._bootstrap_external>(966):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(612):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(617):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(976): <frozen importlib._bootstrap_external>(977): <frozen importlib._bootstrap_external>(976):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(978): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(978):  --- modulename: _bootstrap_external, funcname: _compile_bytecode\\n",\n  "<frozen importlib._bootstrap_external>(647): <frozen importlib._bootstrap_external>(648): <frozen importlib._bootstrap_external>(649):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(650): <frozen importlib._bootstrap_external>(651): <frozen importlib._bootstrap_external>(652): <frozen importlib._bootstrap_external>(847): <frozen importlib._bootstrap_external>(850):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228):  --- modulename: sys_version_info_hack, funcname: <module>\\n",\n  "sys_version_info_hack.py(21): \\"\\"\\"Redefines sys.version_info to be python3 compatible\\"\\"\\"\\n",\n  "sys_version_info_hack.py(24): import os\\n",\n  "sys_version_info_hack.py(25): import re\\n",\n  "sys_version_info_hack.py(26): import sys\\n",\n  "sys_version_info_hack.py(36): if sys.version_info[0] < 3:\\n",\n  "sys_version_info_hack.py(71): def main(_args):\\n",\n  "sys_version_info_hack.py(76): if __name__ == \'__main__\':\\n",\n  "<frozen importlib._bootstrap>(691): <frozen importlib._bootstrap>(692): <frozen importlib._bootstrap>(693):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap>(695): <frozen importlib._bootstrap>(697): <frozen importlib._bootstrap>(987): <frozen importlib._bootstrap>(989): <frozen importlib._bootstrap>(990): <frozen importlib._bootstrap>(991): <frozen importlib._bootstrap>(992): <frozen importlib._bootstrap>(996):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(161):  --- modulename: _bootstrap, funcname: release\\n",\n  "<frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(115): <frozen importlib._bootstrap>(117): <frozen importlib._bootstrap>(118): <frozen importlib._bootstrap>(119): <frozen importlib._bootstrap>(120): <frozen importlib._bootstrap>(121):  --- modulename: _bootstrap, funcname: cb\\n",\n  "<frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(191): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(194):  --- modulename: _bootstrap, funcname: _lock_unlock_module\\n",\n  "<frozen importlib._bootstrap>(209):  --- modulename: _bootstrap, funcname: _get_module_lock\\n",\n  "<frozen importlib._bootstrap>(172): <frozen importlib._bootstrap>(173): <frozen importlib._bootstrap>(174): <frozen importlib._bootstrap>(175): <frozen importlib._bootstrap>(179): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(210): <frozen importlib._bootstrap>(211):  --- modulename: _bootstrap, funcname: acquire\\n",\n  "<frozen importlib._bootstrap>(93): <frozen importlib._bootstrap>(94): <frozen importlib._bootstrap>(95): <frozen importlib._bootstrap>(97): <frozen importlib._bootstrap>(98): <frozen importlib._bootstrap>(99): <frozen importlib._bootstrap>(100): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(217):  --- modulename: _bootstrap, funcname: release\\n",\n  "<frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(115): <frozen importlib._bootstrap>(117): <frozen importlib._bootstrap>(118): <frozen importlib._bootstrap>(119): debug.py(71): class TraceLevel(enum.IntEnum):\\n",\n  " --- modulename: enum, funcname: __prepare__\\n",\n  "enum.py(167):         metacls._check_for_existing_members(cls, bases)\\n",\n  " --- modulename: enum, funcname: _check_for_existing_members\\n",\n  "enum.py(563):         for chain in bases:\\n",\n  "enum.py(564):             for base in chain.__mro__:\\n",\n  "enum.py(565):                 if issubclass(base, Enum) and base._member_names_:\\n",\n  "enum.py(564):             for base in chain.__mro__:\\n",\n  "enum.py(565):                 if issubclass(base, Enum) and base._member_names_:\\n",\n  "enum.py(564):             for base in chain.__mro__:\\n",\n  "enum.py(565):                 if issubclass(base, Enum) and base._member_names_:\\n",\n  "enum.py(564):             for base in chain.__mro__:\\n",\n  "enum.py(565):                 if issubclass(base, Enum) and base._member_names_:\\n",\n  "enum.py(564):             for base in chain.__mro__:\\n",\n  "enum.py(563):         for chain in bases:\\n",\n  "enum.py(169):         enum_dict = _EnumDict()\\n",\n  " --- modulename: enum, funcname: __init__\\n",\n  "enum.py(82):         super().__init__()\\n",\n  "enum.py(83):         self._member_names = []\\n",\n  "enum.py(84):         self._last_values = []\\n",\n  "enum.py(85):         self._ignore = []\\n",\n  "enum.py(86):         self._auto_called = False\\n",\n  "enum.py(170):         enum_dict._cls_name = cls\\n",\n  "enum.py(172):         member_type, first_enum = metacls._get_mixins_(cls, bases)\\n",\n  " --- modulename: enum, funcname: _get_mixins_\\n",\n  "enum.py(579):         if not bases:\\n",\n  "enum.py(582):         def _find_data_type(bases):\\n",\n  "enum.py(609):         first_enum = bases[-1]\\n",\n  "enum.py(610):         if not issubclass(first_enum, Enum):\\n",\n  "enum.py(613):         member_type = _find_data_type(bases) or object\\n",\n  " --- modulename: enum, funcname: _find_data_type\\n",\n  "enum.py(583):             data_types = set()\\n",\n  "enum.py(584):             for chain in bases:\\n",\n  "enum.py(585):                 candidate = None\\n",\n  "enum.py(586):                 for base in chain.__mro__:\\n",\n  "enum.py(587):                     if base is object:\\n",\n  "enum.py(589):                     elif issubclass(base, Enum):\\n",\n  "enum.py(590):                         if base._member_type_ is not object:\\n",\n  "enum.py(591):                             data_types.add(base._member_type_)\\n",\n  "enum.py(592):                             break\\n",\n  "enum.py(584):             for chain in bases:\\n",\n  "enum.py(600):             if len(data_types) > 1:\\n",\n  "enum.py(602):             elif data_types:\\n",\n  "enum.py(603):                 return data_types.pop()\\n",\n  "enum.py(614):         if first_enum._member_names_:\\n",\n  "enum.py(616):         return member_type, first_enum\\n",\n  "enum.py(173):         if first_enum is not None:\\n",\n  "enum.py(174):             enum_dict[\'_generate_next_value_\'] = getattr(\\n",\n  "enum.py(175):                     first_enum, \'_generate_next_value_\', None,\\n",\n  "enum.py(174):             enum_dict[\'_generate_next_value_\'] = getattr(\\n",\n  " --- modulename: enum, funcname: __setitem__\\n",\n  "enum.py(97):         if _is_private(self._cls_name, key):\\n",\n  " --- modulename: enum, funcname: _is_private\\n",\n  "enum.py(46):     pattern = \'_%s__\' % (cls_name, )\\n",\n  "enum.py(48):             len(name) >= 5\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(49):             and name.startswith(pattern)\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(55):         return False\\n",\n  "enum.py(105):         if _is_sunder(key):\\n",\n  " --- modulename: enum, funcname: _is_sunder\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(39):             name[0] == name[-1] == \'_\' and\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(40):             name[1:2] != \'_\' and\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(41):             name[-2:-1] != \'_\'\\n",\n  "enum.py(37):     return (\\n",\n  "enum.py(106):             if key not in (\\n",\n  "enum.py(111):             if key == \'_generate_next_value_\':\\n",\n  "enum.py(113):                 if self._auto_called:\\n",\n  "enum.py(115):                 setattr(self, \'_generate_next_value\', value)\\n",\n  "enum.py(152):         super().__setitem__(key, value)\\n",\n  "enum.py(177):         return enum_dict\\n",\n  " --- modulename: debug, funcname: TraceLevel\\n",\n  "debug.py(71): class TraceLevel(enum.IntEnum):\\n",\n  " --- modulename: enum, funcname: __setitem__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "enum.py(97):         if _is_private(self._cls_name, key):\\n",\n  " --- modulename: enum, funcname: _is_private\\n",\n  "enum.py(46):     pattern = \'_%s__\' % (cls_name, )\\n",\n  "enum.py(48):             len(name) >= 5\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(49):             and name.startswith(pattern)\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(55):         return False\\n",\n  "enum.py(105):         if _is_sunder(key):\\n",\n  " --- modulename: enum, funcname: _is_sunder\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(39):             name[0] == name[-1] == \'_\' and\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(40):             name[1:2] != \'_\' and\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(37):     return (\\n",\n  "enum.py(128):         elif _is_dunder(key):\\n",\n  " --- modulename: enum, funcname: _is_dunder\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(28):             name[:2] == name[-2:] == \'__\' and\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(29):             name[2] != \'_\' and\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(30):             name[-3] != \'_\'\\n",\n  "enum.py(26):     return (\\n",\n  "enum.py(129):             if key == \'__order__\':\\n",\n  "enum.py(152):         super().__setitem__(key, value)\\n",\n  " --- modulename: enum, funcname: __setitem__\\n",\n  "enum.py(97):         if _is_private(self._cls_name, key):\\n",\n  " --- modulename: enum, funcname: _is_private\\n",\n  "enum.py(46):     pattern = \'_%s__\' % (cls_name, )\\n",\n  "enum.py(48):             len(name) >= 5\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(49):             and name.startswith(pattern)\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(55):         return False\\n",\n  "enum.py(105):         if _is_sunder(key):\\n",\n  " --- modulename: enum, funcname: _is_sunder\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(39):             name[0] == name[-1] == \'_\' and\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(40):             name[1:2] != \'_\' and\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(37):     return (\\n",\n  "enum.py(128):         elif _is_dunder(key):\\n",\n  " --- modulename: enum, funcname: _is_dunder\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(28):             name[:2] == name[-2:] == \'__\' and\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(29):             name[2] != \'_\' and\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(30):             name[-3] != \'_\'\\n",\n  "enum.py(26):     return (\\n",\n  "enum.py(129):             if key == \'__order__\':\\n",\n  "enum.py(152):         super().__setitem__(key, value)\\n",\n  "debug.py(72):     \\"\\"\\"Constants for use in tracing\\"\\"\\"\\n",\n  " --- modulename: enum, funcname: __setitem__\\n",\n  "enum.py(97):         if _is_private(self._cls_name, key):\\n",\n  " --- modulename: enum, funcname: _is_private\\n",\n  "enum.py(46):     pattern = \'_%s__\' % (cls_name, )\\n",\n  "enum.py(48):             len(name) >= 5\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(49):             and name.startswith(pattern)\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(55):         return False\\n",\n  "enum.py(105):         if _is_sunder(key):\\n",\n  " --- modulename: enum, funcname: _is_sunder\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(39):             name[0] == name[-1] == \'_\' and\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(40):             name[1:2] != \'_\' and\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(37):     return (\\n",\n  "enum.py(128):         elif _is_dunder(key):\\n",\n  " --- modulename: enum, funcname: _is_dunder\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(28):             name[:2] == name[-2:] == \'__\' and\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(29):             name[2] != \'_\' and\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(30):             name[-3] != \'_\'\\n",\n  "enum.py(26):     return (\\n",\n  "enum.py(129):             if key == \'__order__\':\\n",\n  "enum.py(152):         super().__setitem__(key, value)\\n",\n  "debug.py(73):     ALWAYS = 0\\n",\n  " --- modulename: enum, funcname: __setitem__\\n",\n  "enum.py(97):         if _is_private(self._cls_name, key):\\n",\n  " --- modulename: enum, funcname: _is_private\\n",\n  "enum.py(46):     pattern = \'_%s__\' % (cls_name, )\\n",\n  "enum.py(48):             len(name) >= 5\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(49):             and name.startswith(pattern)\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(55):         return False\\n",\n  "enum.py(105):         if _is_sunder(key):\\n",\n  " --- modulename: enum, funcname: _is_sunder\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(39):             name[0] == name[-1] == \'_\' and\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(37):     return (\\n",\n  "enum.py(128):         elif _is_dunder(key):\\n",\n  " --- modulename: enum, funcname: _is_dunder\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(28):             name[:2] == name[-2:] == \'__\' and\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(26):     return (\\n",\n  "enum.py(131):         elif key in self._member_names:\\n",\n  "enum.py(134):         elif key in self._ignore:\\n",\n  "enum.py(136):         elif not _is_descriptor(value):\\n",\n  " --- modulename: enum, funcname: _is_descriptor\\n",\n  "enum.py(17):             hasattr(obj, \'__get__\') or\\n",\n  "enum.py(18):             hasattr(obj, \'__set__\') or\\n",\n  "enum.py(17):             hasattr(obj, \'__get__\') or\\n",\n  "enum.py(19):             hasattr(obj, \'__delete__\')\\n",\n  "enum.py(16):     return (\\n",\n  "enum.py(137):             if key in self:\\n",\n  "enum.py(140):             if isinstance(value, auto):\\n",\n  "enum.py(150):             self._member_names.append(key)\\n",\n  "enum.py(151):             self._last_values.append(value)\\n",\n  "enum.py(152):         super().__setitem__(key, value)\\n",\n  "debug.py(74):     ERROR = 1\\n",\n  " --- modulename: enum, funcname: __setitem__\\n",\n  "enum.py(97):         if _is_private(self._cls_name, key):\\n",\n  " --- modulename: enum, funcname: _is_private\\n",\n  "enum.py(46):     pattern = \'_%s__\' % (cls_name, )\\n",\n  "enum.py(48):             len(name) >= 5\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(49):             and name.startswith(pattern)\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(55):         return False\\n",\n  "enum.py(105):         if _is_sunder(key):\\n",\n  " --- modulename: enum, funcname: _is_sunder\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(39):             name[0] == name[-1] == \'_\' and\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(37):     return (\\n",\n  "enum.py(128):         elif _is_dunder(key):\\n",\n  " --- modulename: enum, funcname: _is_dunder\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(28):             name[:2] == name[-2:] == \'__\' and\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(26):     return (\\n",\n  "enum.py(131):         elif key in self._member_names:\\n",\n  "enum.py(134):         elif key in self._ignore:\\n",\n  "enum.py(136):         elif not _is_descriptor(value):\\n",\n  " --- modulename: enum, funcname: _is_descriptor\\n",\n  "enum.py(17):             hasattr(obj, \'__get__\') or\\n",\n  "enum.py(18):             hasattr(obj, \'__set__\') or\\n",\n  "enum.py(17):             hasattr(obj, \'__get__\') or\\n",\n  "enum.py(19):             hasattr(obj, \'__delete__\')\\n",\n  "enum.py(16):     return (\\n",\n  "enum.py(137):             if key in self:\\n",\n  "enum.py(140):             if isinstance(value, auto):\\n",\n  "enum.py(150):             self._member_names.append(key)\\n",\n  "enum.py(151):             self._last_values.append(value)\\n",\n  "enum.py(152):         super().__setitem__(key, value)\\n",\n  "debug.py(75):     WARNING = 2                         # typically always shown\\n",\n  " --- modulename: enum, funcname: __setitem__\\n",\n  "enum.py(97):         if _is_private(self._cls_name, key):\\n",\n  " --- modulename: enum, funcname: _is_private\\n",\n  "enum.py(46):     pattern = \'_%s__\' % (cls_name, )\\n",\n  "enum.py(48):             len(name) >= 5\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(49):             and name.startswith(pattern)\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(55):         return False\\n",\n  "enum.py(105):         if _is_sunder(key):\\n",\n  " --- modulename: enum, funcname: _is_sunder\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(39):             name[0] == name[-1] == \'_\' and\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(37):     return (\\n",\n  "enum.py(128):         elif _is_dunder(key):\\n",\n  " --- modulename: enum, funcname: _is_dunder\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(28):             name[:2] == name[-2:] == \'__\' and\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(26):     return (\\n",\n  "enum.py(131):         elif key in self._member_names:\\n",\n  "enum.py(134):         elif key in self._ignore:\\n",\n  "enum.py(136):         elif not _is_descriptor(value):\\n",\n  " --- modulename: enum, funcname: _is_descriptor\\n",\n  "enum.py(17):             hasattr(obj, \'__get__\') or\\n",\n  "enum.py(18):             hasattr(obj, \'__set__\') or\\n",\n  "enum.py(17):             hasattr(obj, \'__get__\') or\\n",\n  "enum.py(19):             hasattr(obj, \'__delete__\')\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "enum.py(16):     return (\\n",\n  "enum.py(137):             if key in self:\\n",\n  "enum.py(140):             if isinstance(value, auto):\\n",\n  "enum.py(150):             self._member_names.append(key)\\n",\n  "enum.py(151):             self._last_values.append(value)\\n",\n  "enum.py(152):         super().__setitem__(key, value)\\n",\n  "debug.py(76):     DEFAULT = WARNING\\n",\n  " --- modulename: enum, funcname: __setitem__\\n",\n  "enum.py(97):         if _is_private(self._cls_name, key):\\n",\n  " --- modulename: enum, funcname: _is_private\\n",\n  "enum.py(46):     pattern = \'_%s__\' % (cls_name, )\\n",\n  "enum.py(48):             len(name) >= 5\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(49):             and name.startswith(pattern)\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(55):         return False\\n",\n  "enum.py(105):         if _is_sunder(key):\\n",\n  " --- modulename: enum, funcname: _is_sunder\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(39):             name[0] == name[-1] == \'_\' and\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(37):     return (\\n",\n  "enum.py(128):         elif _is_dunder(key):\\n",\n  " --- modulename: enum, funcname: _is_dunder\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(28):             name[:2] == name[-2:] == \'__\' and\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(26):     return (\\n",\n  "enum.py(131):         elif key in self._member_names:\\n",\n  "enum.py(134):         elif key in self._ignore:\\n",\n  "enum.py(136):         elif not _is_descriptor(value):\\n",\n  " --- modulename: enum, funcname: _is_descriptor\\n",\n  "enum.py(17):             hasattr(obj, \'__get__\') or\\n",\n  "enum.py(18):             hasattr(obj, \'__set__\') or\\n",\n  "enum.py(17):             hasattr(obj, \'__get__\') or\\n",\n  "enum.py(19):             hasattr(obj, \'__delete__\')\\n",\n  "enum.py(16):     return (\\n",\n  "enum.py(137):             if key in self:\\n",\n  "enum.py(140):             if isinstance(value, auto):\\n",\n  "enum.py(150):             self._member_names.append(key)\\n",\n  "enum.py(151):             self._last_values.append(value)\\n",\n  "enum.py(152):         super().__setitem__(key, value)\\n",\n  "debug.py(77):     USUAL = 3                           # usual is sense of debugging purposes\\n",\n  " --- modulename: enum, funcname: __setitem__\\n",\n  "enum.py(97):         if _is_private(self._cls_name, key):\\n",\n  " --- modulename: enum, funcname: _is_private\\n",\n  "enum.py(46):     pattern = \'_%s__\' % (cls_name, )\\n",\n  "enum.py(48):             len(name) >= 5\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(49):             and name.startswith(pattern)\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(55):         return False\\n",\n  "enum.py(105):         if _is_sunder(key):\\n",\n  " --- modulename: enum, funcname: _is_sunder\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(39):             name[0] == name[-1] == \'_\' and\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(37):     return (\\n",\n  "enum.py(128):         elif _is_dunder(key):\\n",\n  " --- modulename: enum, funcname: _is_dunder\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(28):             name[:2] == name[-2:] == \'__\' and\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(26):     return (\\n",\n  "enum.py(131):         elif key in self._member_names:\\n",\n  "enum.py(134):         elif key in self._ignore:\\n",\n  "enum.py(136):         elif not _is_descriptor(value):\\n",\n  " --- modulename: enum, funcname: _is_descriptor\\n",\n  "enum.py(17):             hasattr(obj, \'__get__\') or\\n",\n  "enum.py(18):             hasattr(obj, \'__set__\') or\\n",\n  "enum.py(17):             hasattr(obj, \'__get__\') or\\n",\n  "enum.py(19):             hasattr(obj, \'__delete__\')\\n",\n  "enum.py(16):     return (\\n",\n  "enum.py(137):             if key in self:\\n",\n  "enum.py(140):             if isinstance(value, auto):\\n",\n  "enum.py(150):             self._member_names.append(key)\\n",\n  "enum.py(151):             self._last_values.append(value)\\n",\n  "enum.py(152):         super().__setitem__(key, value)\\n",\n  "debug.py(78):     DETAILED = 4\\n",\n  " --- modulename: enum, funcname: __setitem__\\n",\n  "enum.py(97):         if _is_private(self._cls_name, key):\\n",\n  " --- modulename: enum, funcname: _is_private\\n",\n  "enum.py(46):     pattern = \'_%s__\' % (cls_name, )\\n",\n  "enum.py(48):             len(name) >= 5\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(49):             and name.startswith(pattern)\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(55):         return False\\n",\n  "enum.py(105):         if _is_sunder(key):\\n",\n  " --- modulename: enum, funcname: _is_sunder\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(39):             name[0] == name[-1] == \'_\' and\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(37):     return (\\n",\n  "enum.py(128):         elif _is_dunder(key):\\n",\n  " --- modulename: enum, funcname: _is_dunder\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(28):             name[:2] == name[-2:] == \'__\' and\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(26):     return (\\n",\n  "enum.py(131):         elif key in self._member_names:\\n",\n  "enum.py(134):         elif key in self._ignore:\\n",\n  "enum.py(136):         elif not _is_descriptor(value):\\n",\n  " --- modulename: enum, funcname: _is_descriptor\\n",\n  "enum.py(17):             hasattr(obj, \'__get__\') or\\n",\n  "enum.py(18):             hasattr(obj, \'__set__\') or\\n",\n  "enum.py(17):             hasattr(obj, \'__get__\') or\\n",\n  "enum.py(19):             hasattr(obj, \'__delete__\')\\n",\n  "enum.py(16):     return (\\n",\n  "enum.py(137):             if key in self:\\n",\n  "enum.py(140):             if isinstance(value, auto):\\n",\n  "enum.py(150):             self._member_names.append(key)\\n",\n  "enum.py(151):             self._last_values.append(value)\\n",\n  "enum.py(152):         super().__setitem__(key, value)\\n",\n  "debug.py(79):     VERBOSE = 5\\n",\n  " --- modulename: enum, funcname: __setitem__\\n",\n  "enum.py(97):         if _is_private(self._cls_name, key):\\n",\n  " --- modulename: enum, funcname: _is_private\\n",\n  "enum.py(46):     pattern = \'_%s__\' % (cls_name, )\\n",\n  "enum.py(48):             len(name) >= 5\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(49):             and name.startswith(pattern)\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(55):         return False\\n",\n  "enum.py(105):         if _is_sunder(key):\\n",\n  " --- modulename: enum, funcname: _is_sunder\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(39):             name[0] == name[-1] == \'_\' and\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(37):     return (\\n",\n  "enum.py(128):         elif _is_dunder(key):\\n",\n  " --- modulename: enum, funcname: _is_dunder\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(28):             name[:2] == name[-2:] == \'__\' and\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(26):     return (\\n",\n  "enum.py(131):         elif key in self._member_names:\\n",\n  "enum.py(134):         elif key in self._ignore:\\n",\n  "enum.py(136):         elif not _is_descriptor(value):\\n",\n  " --- modulename: enum, funcname: _is_descriptor\\n",\n  "enum.py(17):             hasattr(obj, \'__get__\') or\\n",\n  "enum.py(18):             hasattr(obj, \'__set__\') or\\n",\n  "enum.py(17):             hasattr(obj, \'__get__\') or\\n",\n  "enum.py(19):             hasattr(obj, \'__delete__\')\\n",\n  "enum.py(16):     return (\\n",\n  "enum.py(137):             if key in self:\\n",\n  "enum.py(140):             if isinstance(value, auto):\\n",\n  "enum.py(150):             self._member_names.append(key)\\n",\n  "enum.py(151):             self._last_values.append(value)\\n",\n  "enum.py(152):         super().__setitem__(key, value)\\n",\n  "debug.py(80):     QUITE_DETAILED = 6\\n",\n  " --- modulename: enum, funcname: __setitem__\\n",\n  "enum.py(97):         if _is_private(self._cls_name, key):\\n",\n  " --- modulename: enum, funcname: _is_private\\n",\n  "enum.py(46):     pattern = \'_%s__\' % (cls_name, )\\n",\n  "enum.py(48):             len(name) >= 5\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(49):             and name.startswith(pattern)\\n",\n  "enum.py(47):     if (\\n",\n  "linecache.py(59):         filenames = [filename]\\n",\n  "linecache.py(63):     for filename in filenames:\\n",\n  "linecache.py(64):         entry = cache[filename]\\n",\n  "linecache.py(65):         if len(entry) == 1:\\n",\n  "linecache.py(68):         size, mtime, lines, fullname = entry\\n",\n  "linecache.py(69):         if mtime is None:\\n",\n  "linecache.py(71):         try:\\n",\n  "linecache.py(72):             stat = os.stat(fullname)\\n",\n  "linecache.py(76):         if size != stat.st_size or mtime != stat.st_mtime:\\n",\n  "linecache.py(63):     for filename in filenames:\\n",\n  "inspect.py(829):     module = getmodule(object, file)\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(737):     try:\\n",\n  "inspect.py(738):         file = getabsfile(object, _filename)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(445):     return path, True\\n",\n  "posixpath.py(393):     return abspath(path)\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(445):     return path, True\\n",\n  "posixpath.py(393):     return abspath(path)\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(445):     return path, True\\n",\n  "posixpath.py(393):     return abspath(path)\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(445):     return path, True\\n",\n  "posixpath.py(393):     return abspath(path)\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(445):     return path, True\\n",\n  "posixpath.py(393):     return abspath(path)\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(445):     return path, True\\n",\n  "posixpath.py(393):     return abspath(path)\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(445):     return path, True\\n",\n  "posixpath.py(393):     return abspath(path)\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(445):     return path, True\\n",\n  "posixpath.py(393):     return abspath(path)\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(445):     return path, True\\n",\n  "posixpath.py(393):     return abspath(path)\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(445):     return path, True\\n",\n  "posixpath.py(393):     return abspath(path)\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(445):     return path, True\\n",\n  "posixpath.py(393):     return abspath(path)\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(445):     return path, True\\n",\n  "posixpath.py(393):     return abspath(path)\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(445):     return path, True\\n",\n  "posixpath.py(393):     return abspath(path)\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(445):     return path, True\\n",\n  "posixpath.py(393):     return abspath(path)\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(445):     return path, True\\n",\n  "posixpath.py(393):     return abspath(path)\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(445):     return path, True\\n",\n  "posixpath.py(393):     return abspath(path)\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(445):     return path, True\\n",\n  "posixpath.py(393):     return abspath(path)\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(705):         return None\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(445):     return path, True\\n",\n  "posixpath.py(393):     return abspath(path)\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(445):     return path, True\\n",\n  "posixpath.py(393):     return abspath(path)\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(705):         return None\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(445):     return path, True\\n",\n  "posixpath.py(393):     return abspath(path)\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(445):     return path, True\\n",\n  "posixpath.py(393):     return abspath(path)\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(751):             _filesbymodname[modname] = f\\n",\n  "inspect.py(752):             f = getabsfile(module)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(721):         _filename = getsourcefile(object) or getfile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(658):         if getattr(object, \'__file__\', None):\\n",\n  "inspect.py(659):             return object.__file__\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  "inspect.py(754):             modulesbyfile[f] = modulesbyfile[\\n",\n  "inspect.py(755):                 os.path.realpath(f)] = module.__name__\\n",\n  " --- modulename: posixpath, funcname: realpath\\n",\n  "posixpath.py(391):     filename = os.fspath(filename)\\n",\n  "posixpath.py(392):     path, ok = _joinrealpath(filename[:0], filename, {})\\n",\n  " --- modulename: posixpath, funcname: _joinrealpath\\n",\n  "posixpath.py(398):     if isinstance(path, bytes):\\n",\n  "posixpath.py(403):         sep = \'/\'\\n",\n  "posixpath.py(404):         curdir = \'.\'\\n",\n  "posixpath.py(405):         pardir = \'..\'\\n",\n  "posixpath.py(407):     if isabs(rest):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(408):         rest = rest[1:]\\n",\n  "posixpath.py(409):         path = sep\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(86):                 path += b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(426):         if not islink(newpath):\\n",\n  " --- modulename: posixpath, funcname: islink\\n",\n  "posixpath.py(166):     try:\\n",\n  "posixpath.py(167):         st = os.lstat(path)\\n",\n  "posixpath.py(170):     return stat.S_ISLNK(st.st_mode)\\n",\n  "posixpath.py(427):             path = newpath\\n",\n  "posixpath.py(428):             continue\\n",\n  "posixpath.py(411):     while rest:\\n",\n  "posixpath.py(412):         name, _, rest = rest.partition(sep)\\n",\n  "posixpath.py(413):         if not name or name == curdir:\\n",\n  "posixpath.py(416):         if name == pardir:\\n",\n  "posixpath.py(425):         newpath = join(path, name)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(449):         return items[0]\\n",\n  "sre_parse.py(837):             if not source.match(\\")\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(840):             if group is not None:\\n",\n  "sre_parse.py(841):                 state.closegroup(group, p)\\n",\n  " --- modulename: sre_parse, funcname: closegroup\\n",\n  "sre_parse.py(97):         self.groupwidths[gid] = p.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(198):                 i, j = av[2].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(199):                 lo = lo + i * av[0]\\n",\n  "sre_parse.py(200):                 hi = hi + j * av[1]\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(842):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(857):             group, add_flags, del_flags, p = av\\n",\n  "sre_parse.py(858):             if group is None and not add_flags and not del_flags:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(686):             start = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(687):             group = True\\n",\n  "sre_parse.py(688):             name = None\\n",\n  "sre_parse.py(689):             add_flags = 0\\n",\n  "sre_parse.py(690):             del_flags = 0\\n",\n  "sre_parse.py(691):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(829):             if group is not None:\\n",\n  "sre_parse.py(830):                 try:\\n",\n  "sre_parse.py(831):                     group = state.opengroup(name)\\n",\n  " --- modulename: sre_parse, funcname: opengroup\\n",\n  "sre_parse.py(85):         gid = self.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(86):         self.groupwidths.append(None)\\n",\n  "sre_parse.py(87):         if self.groups > MAXGROUPS:\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(89):         if name is not None:\\n",\n  "sre_parse.py(95):         return gid\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(836):             p = _parse_sub(source, state, sub_verbose, nested + 1)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(525):             code = _escape(source, this, state)\\n",\n  " --- modulename: sre_parse, funcname: _escape\\n",\n  "sre_parse.py(357):     code = CATEGORIES.get(escape)\\n",\n  "sre_parse.py(358):     if code:\\n",\n  "sre_parse.py(359):         return code\\n",\n  "sre_parse.py(526):             subpatternappend(code)\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(622):             here = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(623):             if this == \\"?\\":\\n",\n  "sre_parse.py(625):             elif this == \\"*\\":\\n",\n  "sre_parse.py(626):                 min, max = 0, MAXREPEAT\\n",\n  "sre_parse.py(663):             if subpattern:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(664):                 item = subpattern[-1:]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(166):             return SubPattern(self.state, self.data[index])\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(667):             if not item or item[0][0] is AT:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(670):             if item[0][0] in _REPEATCODES:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(673):             if item[0][0] is SUBPATTERN:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(677):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(680):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))\\n",\n  " --- modulename: sre_parse, funcname: __setitem__\\n",\n  "sre_parse.py(169):         self.data[index] = code\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(529):             subpatternappend((LITERAL, _ord(this)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(529):             subpatternappend((LITERAL, _ord(this)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(529):             subpatternappend((LITERAL, _ord(this)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(529):             subpatternappend((LITERAL, _ord(this)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(529):             subpatternappend((LITERAL, _ord(this)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(525):             code = _escape(source, this, state)\\n",\n  " --- modulename: sre_parse, funcname: _escape\\n",\n  "sre_parse.py(357):     code = CATEGORIES.get(escape)\\n",\n  "sre_parse.py(358):     if code:\\n",\n  "sre_parse.py(359):         return code\\n",\n  "sre_parse.py(526):             subpatternappend(code)\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(622):             here = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(623):             if this == \\"?\\":\\n",\n  "sre_parse.py(625):             elif this == \\"*\\":\\n",\n  "sre_parse.py(628):             elif this == \\"+\\":\\n",\n  "sre_parse.py(629):                 min, max = 1, MAXREPEAT\\n",\n  "sre_parse.py(663):             if subpattern:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(664):                 item = subpattern[-1:]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(166):             return SubPattern(self.state, self.data[index])\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(667):             if not item or item[0][0] is AT:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(670):             if item[0][0] in _REPEATCODES:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(673):             if item[0][0] is SUBPATTERN:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n",\n  "sre_compile.py(263):         elif op is BIGCHARSET:\\n",\n  "sre_compile.py(265):         elif op is CATEGORY:\\n",\n  "sre_compile.py(266):             if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(268):             elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(269):                 emit(CH_UNICODE[av])\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(149):                 emit(SUCCESS)\\n",\n  "sre_compile.py(150):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(93):                 emit(op)\\n",\n  "sre_compile.py(94):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(93):                 emit(op)\\n",\n  "sre_compile.py(94):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(93):                 emit(op)\\n",\n  "sre_compile.py(94):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(296):                 elif op is RANGE:\\n",\n  "sre_compile.py(313):                 elif op is NEGATE:\\n",\n  "sre_compile.py(316):                     tail.append((op, av))\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(339):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(355):         out += tail\\n",\n  "sre_compile.py(357):         if hascased or len(out) < len(charset):\\n",\n  "sre_compile.py(360):         return charset, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(124):                 emit(IN)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n",\n  "sre_compile.py(263):         elif op is BIGCHARSET:\\n",\n  "sre_compile.py(265):         elif op is CATEGORY:\\n",\n  "sre_compile.py(266):             if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(268):             elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(269):                 emit(CH_UNICODE[av])\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(169):             if group:\\n",\n  "sre_compile.py(170):                 emit(MARK)\\n",\n  "sre_compile.py(171):                 emit((group-1)*2+1)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(210):                 emit(JUMP)\\n",\n  "sre_compile.py(211):                 tailappend(_len(code)); emit(0)\\n",\n  "sre_compile.py(212):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(207):                 skip = _len(code); emit(0)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(209):                 _compile(code, av, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(163):             group, add_flags, del_flags, p = av\\n",\n  "sre_compile.py(164):             if group:\\n",\n  "sre_compile.py(165):                 emit(MARK)\\n",\n  "sre_compile.py(166):                 emit((group-1)*2)\\n",\n  "sre_compile.py(168):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))\\n",\n  " --- modulename: sre_compile, funcname: _combine_flags\\n",\n  "sre_compile.py(67):     if add_flags & TYPE_FLAGS:\\n",\n  "sre_compile.py(69):     return (flags | add_flags) & ~del_flags\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(138):             if flags & SRE_FLAG_TEMPLATE:\\n",\n  "sre_compile.py(140):             if _simple(av[2]):\\n",\n  " --- modulename: sre_compile, funcname: _simple\\n",\n  "sre_compile.py(425):     if len(p) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_compile.py(427):     op, av = p[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(428):     if op is SUBPATTERN:\\n",\n  "sre_compile.py(430):     return op in _UNIT_CODES\\n",\n  "sre_compile.py(141):                 if op is MAX_REPEAT:\\n",\n  "sre_compile.py(142):                     emit(REPEAT_ONE)\\n",\n  "sre_compile.py(145):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(146):                 emit(av[0])\\n",\n  "sre_compile.py(147):                 emit(av[1])\\n",\n  "sre_compile.py(148):                 _compile(code, av[2], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(133):             if flags & SRE_FLAG_DOTALL:\\n",\n  "sre_compile.py(136):                 emit(ANY)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(149):                 emit(SUCCESS)\\n",\n  "sre_compile.py(150):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(172):         elif op in SUCCESS_CODES:\\n",\n  "sre_compile.py(174):         elif op in ASSERT_CODES:\\n",\n  "sre_compile.py(175):             emit(op)\\n",\n  "sre_compile.py(176):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(177):             if av[0] >= 0:\\n",\n  "sre_compile.py(180):                 lo, hi = av[1].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_compile.py(181):                 if lo != hi:\\n",\n  "sre_compile.py(183):                 emit(lo) # look behind\\n",\n  "sre_compile.py(184):             _compile(code, av[1], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(296):                 elif op is RANGE:\\n",\n  "sre_compile.py(313):                 elif op is NEGATE:\\n",\n  "sre_compile.py(316):                     tail.append((op, av))\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(339):             break\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(355):         out += tail\\n",\n  "sre_compile.py(357):         if hascased or len(out) < len(charset):\\n",\n  "sre_compile.py(360):         return charset, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(124):                 emit(IN)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n",\n  "sre_compile.py(263):         elif op is BIGCHARSET:\\n",\n  "sre_compile.py(265):         elif op is CATEGORY:\\n",\n  "sre_compile.py(266):             if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(268):             elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(269):                 emit(CH_UNICODE[av])\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(185):             emit(SUCCESS)\\n",\n  "sre_compile.py(186):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(93):                 emit(op)\\n",\n  "sre_compile.py(94):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(93):                 emit(op)\\n",\n  "sre_compile.py(94):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(93):                 emit(op)\\n",\n  "sre_compile.py(94):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(93):                 emit(op)\\n",\n  "sre_compile.py(94):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(93):                 emit(op)\\n",\n  "sre_compile.py(94):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(93):                 emit(op)\\n",\n  "sre_compile.py(94):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(163):             group, add_flags, del_flags, p = av\\n",\n  "sre_compile.py(164):             if group:\\n",\n  "sre_compile.py(165):                 emit(MARK)\\n",\n  "sre_compile.py(166):                 emit((group-1)*2)\\n",\n  "sre_compile.py(168):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))\\n",\n  " --- modulename: sre_compile, funcname: _combine_flags\\n",\n  "sre_compile.py(67):     if add_flags & TYPE_FLAGS:\\n",\n  "sre_compile.py(69):     return (flags | add_flags) & ~del_flags\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(296):                 elif op is RANGE:\\n",\n  "sre_compile.py(313):                 elif op is NEGATE:\\n",\n  "sre_compile.py(316):                     tail.append((op, av))\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(339):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(351):             if q - p == 1:\\n",\n  "sre_compile.py(352):                 out.append((LITERAL, p))\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(355):         out += tail\\n",\n  "sre_compile.py(357):         if hascased or len(out) < len(charset):\\n",\n  "sre_compile.py(360):         return charset, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(124):                 emit(IN)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(257):             emit(av)\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n",\n  "sre_compile.py(263):         elif op is BIGCHARSET:\\n",\n  "sre_compile.py(265):         elif op is CATEGORY:\\n",\n  "sre_compile.py(266):             if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(268):             elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(269):                 emit(CH_UNICODE[av])\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(169):             if group:\\n",\n  "sre_compile.py(170):                 emit(MARK)\\n",\n  "sre_compile.py(171):                 emit((group-1)*2+1)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(169):             if group:\\n",\n  "sre_compile.py(170):                 emit(MARK)\\n",\n  "sre_compile.py(171):                 emit((group-1)*2+1)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(210):                 emit(JUMP)\\n",\n  "sre_compile.py(211):                 tailappend(_len(code)); emit(0)\\n",\n  "sre_compile.py(212):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(207):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(209):                 _compile(code, av, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(172):         elif op in SUCCESS_CODES:\\n",\n  "sre_compile.py(174):         elif op in ASSERT_CODES:\\n",\n  "sre_compile.py(187):         elif op is CALL:\\n",\n  "sre_compile.py(193):         elif op is AT:\\n",\n  "sre_compile.py(194):             emit(op)\\n",\n  "sre_compile.py(195):             if flags & SRE_FLAG_MULTILINE:\\n",\n  "sre_compile.py(197):             if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(199):             elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(200):                 av = AT_UNICODE.get(av, av)\\n",\n  "sre_compile.py(201):             emit(av)\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(756):     if file in modulesbyfile:\\n",\n  "inspect.py(759):     main = sys.modules[\'__main__\']\\n",\n  "inspect.py(760):     if not hasattr(object, \'__name__\'):\\n",\n  "inspect.py(761):         return None\\n",\n  "inspect.py(712):     if filename in linecache.cache:\\n",\n  "inspect.py(818):     if file:\\n",\n  "inspect.py(822):         file = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(826):         if not (file.startswith(\'<\') and file.endswith(\'>\')):\\n",\n  "inspect.py(829):     module = getmodule(object, file)\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(737):     try:\\n",\n  "inspect.py(738):         file = getabsfile(object, _filename)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(377):         if isinstance(path, bytes):\\n",\n  "posixpath.py(380):             cwd = os.getcwd()\\n",\n  "posixpath.py(381):         path = join(cwd, path)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(377):         if isinstance(path, bytes):\\n",\n  "posixpath.py(380):             cwd = os.getcwd()\\n",\n  "posixpath.py(381):         path = join(cwd, path)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(756):     if file in modulesbyfile:\\n",\n  "inspect.py(759):     main = sys.modules[\'__main__\']\\n",\n  "inspect.py(760):     if not hasattr(object, \'__name__\'):\\n",\n  "inspect.py(761):         return None\\n",\n  "inspect.py(712):     if filename in linecache.cache:\\n",\n  "inspect.py(818):     if file:\\n",\n  "inspect.py(822):         file = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(826):         if not (file.startswith(\'<\') and file.endswith(\'>\')):\\n",\n  "inspect.py(829):     module = getmodule(object, file)\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(737):     try:\\n",\n  "inspect.py(738):         file = getabsfile(object, _filename)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(377):         if isinstance(path, bytes):\\n",\n  "posixpath.py(380):             cwd = os.getcwd()\\n",\n  "posixpath.py(381):         path = join(cwd, path)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(756):     if file in modulesbyfile:\\n",\n  "inspect.py(759):     main = sys.modules[\'__main__\']\\n",\n  "inspect.py(760):     if not hasattr(object, \'__name__\'):\\n",\n  "inspect.py(761):         return None\\n",\n  "inspect.py(712):     if filename in linecache.cache:\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(1502):     if context > 0:\\n",\n  "inspect.py(1503):         start = lineno - 1 - context//2\\n",\n  "inspect.py(1504):         try:\\n",\n  "inspect.py(1505):             lines, lnum = findsource(frame)\\n",\n  " --- modulename: inspect, funcname: findsource\\n",\n  "inspect.py(817):     file = getsourcefile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(20):     except (OSError, ValueError):\\n",\n  "genericpath.py(21):         return False\\n",\n  "inspect.py(709):     if getattr(getmodule(object, filename), \'__loader__\', None) is not None:\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(737):     try:\\n",\n  "inspect.py(738):         file = getabsfile(object, _filename)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(377):         if isinstance(path, bytes):\\n",\n  "posixpath.py(380):             cwd = os.getcwd()\\n",\n  "posixpath.py(381):         path = join(cwd, path)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(756):     if file in modulesbyfile:\\n",\n  "inspect.py(759):     main = sys.modules[\'__main__\']\\n",\n  "inspect.py(760):     if not hasattr(object, \'__name__\'):\\n",\n  "inspect.py(761):         return None\\n",\n  "inspect.py(830):     if module:\\n",\n  "inspect.py(833):         lines = linecache.getlines(file)\\n",\n  " --- modulename: linecache, funcname: getlines\\n",\n  "linecache.py(40):     if filename in cache:\\n",\n  "linecache.py(45):     try:\\n",\n  "linecache.py(46):         return updatecache(filename, module_globals)\\n",\n  " --- modulename: linecache, funcname: updatecache\\n",\n  "linecache.py(85):     if filename in cache:\\n",\n  "linecache.py(88):     if not filename or (filename.startswith(\'<\') and filename.endswith(\'>\')):\\n",\n  "linecache.py(89):         return []\\n",\n  "inspect.py(834):     if not lines:\\n",\n  "inspect.py(835):         raise OSError(\'could not get source code\')\\n",\n  "inspect.py(1506):         except OSError:\\n",\n  "inspect.py(1507):             lines = index = None\\n",\n  "inspect.py(1515):     return Traceback(filename, lineno, frame.f_code.co_name, lines, index)\\n",\n  "inspect.py(1532):         framelist.append(FrameInfo(*frameinfo))\\n",\n  "inspect.py(1533):         frame = frame.f_back\\n",\n  "inspect.py(1530):     while frame:\\n",\n  "inspect.py(1531):         frameinfo = (frame,) + getframeinfo(frame, context)\\n",\n  " --- modulename: inspect, funcname: getframeinfo\\n",\n  "inspect.py(1493):     if istraceback(frame):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(1497):         lineno = frame.f_lineno\\n",\n  "inspect.py(1498):     if not isframe(frame):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(1501):     filename = getsourcefile(frame) or getfile(frame)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(20):     except (OSError, ValueError):\\n",\n  "genericpath.py(21):         return False\\n",\n  "inspect.py(709):     if getattr(getmodule(object, filename), \'__loader__\', None) is not None:\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(737):     try:\\n",\n  "inspect.py(738):         file = getabsfile(object, _filename)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(377):         if isinstance(path, bytes):\\n",\n  "posixpath.py(380):             cwd = os.getcwd()\\n",\n  "posixpath.py(381):         path = join(cwd, path)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(756):     if file in modulesbyfile:\\n",\n  "inspect.py(759):     main = sys.modules[\'__main__\']\\n",\n  "inspect.py(760):     if not hasattr(object, \'__name__\'):\\n",\n  "inspect.py(761):         return None\\n",\n  "inspect.py(712):     if filename in linecache.cache:\\n",\n  "inspect.py(818):     if file:\\n",\n  "inspect.py(822):         file = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(826):         if not (file.startswith(\'<\') and file.endswith(\'>\')):\\n",\n  "inspect.py(829):     module = getmodule(object, file)\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(737):     try:\\n",\n  "inspect.py(738):         file = getabsfile(object, _filename)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(377):         if isinstance(path, bytes):\\n",\n  "posixpath.py(380):             cwd = os.getcwd()\\n",\n  "posixpath.py(381):         path = join(cwd, path)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(756):     if file in modulesbyfile:\\n",\n  "inspect.py(759):     main = sys.modules[\'__main__\']\\n",\n  "inspect.py(760):     if not hasattr(object, \'__name__\'):\\n",\n  "inspect.py(761):         return None\\n",\n  "inspect.py(712):     if filename in linecache.cache:\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(1502):     if context > 0:\\n",\n  "inspect.py(1503):         start = lineno - 1 - context//2\\n",\n  "inspect.py(1504):         try:\\n",\n  "inspect.py(1505):             lines, lnum = findsource(frame)\\n",\n  " --- modulename: inspect, funcname: findsource\\n",\n  "inspect.py(817):     file = getsourcefile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(20):     except (OSError, ValueError):\\n",\n  "genericpath.py(21):         return False\\n",\n  "inspect.py(709):     if getattr(getmodule(object, filename), \'__loader__\', None) is not None:\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(737):     try:\\n",\n  "inspect.py(738):         file = getabsfile(object, _filename)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(377):         if isinstance(path, bytes):\\n",\n  "posixpath.py(380):             cwd = os.getcwd()\\n",\n  "posixpath.py(381):         path = join(cwd, path)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(756):     if file in modulesbyfile:\\n",\n  "inspect.py(759):     main = sys.modules[\'__main__\']\\n",\n  "inspect.py(760):     if not hasattr(object, \'__name__\'):\\n",\n  "inspect.py(761):         return None\\n",\n  "inspect.py(712):     if filename in linecache.cache:\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(1502):     if context > 0:\\n",\n  "inspect.py(1503):         start = lineno - 1 - context//2\\n",\n  "inspect.py(1504):         try:\\n",\n  "inspect.py(1505):             lines, lnum = findsource(frame)\\n",\n  " --- modulename: inspect, funcname: findsource\\n",\n  "inspect.py(817):     file = getsourcefile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(20):     except (OSError, ValueError):\\n",\n  "genericpath.py(21):         return False\\n",\n  "inspect.py(709):     if getattr(getmodule(object, filename), \'__loader__\', None) is not None:\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(737):     try:\\n",\n  "inspect.py(738):         file = getabsfile(object, _filename)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(377):         if isinstance(path, bytes):\\n",\n  "posixpath.py(380):             cwd = os.getcwd()\\n",\n  "posixpath.py(381):         path = join(cwd, path)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(756):     if file in modulesbyfile:\\n",\n  "inspect.py(759):     main = sys.modules[\'__main__\']\\n",\n  "inspect.py(760):     if not hasattr(object, \'__name__\'):\\n",\n  "inspect.py(761):         return None\\n",\n  "inspect.py(830):     if module:\\n",\n  "inspect.py(833):         lines = linecache.getlines(file)\\n",\n  " --- modulename: linecache, funcname: getlines\\n",\n  "linecache.py(40):     if filename in cache:\\n",\n  "linecache.py(41):         entry = cache[filename]\\n",\n  "linecache.py(42):         if len(entry) != 1:\\n",\n  "linecache.py(43):             return cache[filename][2]\\n",\n  "inspect.py(834):     if not lines:\\n",\n  "inspect.py(837):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(840):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(853):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(855):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(857):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(859):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(860):         object = object.f_code\\n",\n  "inspect.py(861):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(862):         if not hasattr(object, \'co_firstlineno\'):\\n",\n  "inspect.py(864):         lnum = object.co_firstlineno - 1\\n",\n  "inspect.py(865):         pat = re.compile(r\'^(\\\\s*def\\\\s)|(\\\\s*async\\\\s+def\\\\s)|(.*(?<!\\\\w)lambda(:|\\\\s))|^(\\\\s*@)\')\\n",\n  " --- modulename: re, funcname: compile\\n",\n  "re.py(252):     return _compile(pattern, flags)\\n",\n  " --- modulename: re, funcname: _compile\\n",\n  "re.py(291):     if isinstance(flags, RegexFlag):\\n",\n  "re.py(293):     try:\\n",\n  "re.py(294):         return _cache[type(pattern), pattern, flags]\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(874):         return lines, lnum\\n",\n  "inspect.py(1509):             start = max(0, min(start, len(lines) - context))\\n",\n  "inspect.py(1510):             lines = lines[start:start+context]\\n",\n  "inspect.py(1511):             index = lineno - 1 - start\\n",\n  "inspect.py(1515):     return Traceback(filename, lineno, frame.f_code.co_name, lines, index)\\n",\n  "inspect.py(1532):         framelist.append(FrameInfo(*frameinfo))\\n",\n  "inspect.py(1533):         frame = frame.f_back\\n",\n  "inspect.py(1530):     while frame:\\n",\n  "inspect.py(1531):         frameinfo = (frame,) + getframeinfo(frame, context)\\n",\n  " --- modulename: inspect, funcname: getframeinfo\\n",\n  "inspect.py(1493):     if istraceback(frame):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(1497):         lineno = frame.f_lineno\\n",\n  "inspect.py(1498):     if not isframe(frame):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(1501):     filename = getsourcefile(frame) or getfile(frame)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(1502):     if context > 0:\\n",\n  "inspect.py(1503):         start = lineno - 1 - context//2\\n",\n  "inspect.py(1504):         try:\\n",\n  "inspect.py(1505):             lines, lnum = findsource(frame)\\n",\n  " --- modulename: inspect, funcname: findsource\\n",\n  "inspect.py(817):     file = getsourcefile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(818):     if file:\\n",\n  "inspect.py(820):         linecache.checkcache(file)\\n",\n  " --- modulename: linecache, funcname: checkcache\\n",\n  "linecache.py(56):     if filename is None:\\n",\n  "linecache.py(58):     elif filename in cache:\\n",\n  "linecache.py(61):         return\\n",\n  "inspect.py(829):     module = getmodule(object, file)\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(735):         return sys.modules.get(modulesbyfile[_filename])\\n",\n  "inspect.py(830):     if module:\\n",\n  "inspect.py(831):         lines = linecache.getlines(file, module.__dict__)\\n",\n  " --- modulename: linecache, funcname: getlines\\n",\n  "linecache.py(40):     if filename in cache:\\n",\n  "linecache.py(45):     try:\\n",\n  "linecache.py(46):         return updatecache(filename, module_globals)\\n",\n  " --- modulename: linecache, funcname: updatecache\\n",\n  "linecache.py(85):     if filename in cache:\\n",\n  "linecache.py(88):     if not filename or (filename.startswith(\'<\') and filename.endswith(\'>\')):\\n",\n  "linecache.py(91):     fullname = filename\\n",\n  "linecache.py(92):     try:\\n",\n  "linecache.py(93):         stat = os.stat(fullname)\\n",\n  "linecache.py(135):     try:\\n",\n  "linecache.py(136):         with tokenize.open(fullname) as fp:\\n",\n  " --- modulename: tokenize, funcname: open\\n",\n  "tokenize.py(392):     buffer = _builtin_open(filename, \'rb\')\\n",\n  "tokenize.py(393):     try:\\n",\n  "tokenize.py(394):         encoding, lines = detect_encoding(buffer.readline)\\n",\n  " --- modulename: tokenize, funcname: detect_encoding\\n",\n  "tokenize.py(312):     try:\\n",\n  "tokenize.py(313):         filename = readline.__self__.name\\n",\n  "tokenize.py(316):     bom_found = False\\n",\n  "tokenize.py(317):     encoding = None\\n",\n  "tokenize.py(318):     default = \'utf-8\'\\n",\n  "tokenize.py(319):     def read_or_stop():\\n",\n  "tokenize.py(325):     def find_cookie(line):\\n",\n  "tokenize.py(363):     first = read_or_stop()\\n",\n  " --- modulename: tokenize, funcname: read_or_stop\\n",\n  "tokenize.py(320):         try:\\n",\n  "tokenize.py(321):             return readline()\\n",\n  "tokenize.py(364):     if first.startswith(BOM_UTF8):\\n",\n  "tokenize.py(368):     if not first:\\n",\n  "tokenize.py(371):     encoding = find_cookie(first)\\n",\n  " --- modulename: tokenize, funcname: find_cookie\\n",\n  "tokenize.py(326):         try:\\n",\n  "tokenize.py(330):             line_string = line.decode(\'utf-8\')\\n",\n  "tokenize.py(337):         match = cookie_re.match(line_string)\\n",\n  "tokenize.py(338):         if not match:\\n",\n  "tokenize.py(339):             return None\\n",\n  "tokenize.py(372):     if encoding:\\n",\n  "tokenize.py(374):     if not blank_re.match(first):\\n",\n  "tokenize.py(377):     second = read_or_stop()\\n",\n  " --- modulename: tokenize, funcname: read_or_stop\\n",\n  "tokenize.py(320):         try:\\n",\n  "tokenize.py(321):             return readline()\\n",\n  "tokenize.py(378):     if not second:\\n",\n  "tokenize.py(381):     encoding = find_cookie(second)\\n",\n  " --- modulename: tokenize, funcname: find_cookie\\n",\n  "tokenize.py(326):         try:\\n",\n  "tokenize.py(330):             line_string = line.decode(\'utf-8\')\\n",\n  "tokenize.py(337):         match = cookie_re.match(line_string)\\n",\n  "tokenize.py(338):         if not match:\\n",\n  "tokenize.py(339):             return None\\n",\n  "tokenize.py(382):     if encoding:\\n",\n  "tokenize.py(385):     return default, [first, second]\\n",\n  "tokenize.py(395):         buffer.seek(0)\\n",\n  "tokenize.py(396):         text = TextIOWrapper(buffer, encoding, line_buffering=True)\\n",\n  " --- modulename: codecs, funcname: __init__\\n",\n  "codecs.py(310):         IncrementalDecoder.__init__(self, errors)\\n",\n  " --- modulename: codecs, funcname: __init__\\n",\n  "codecs.py(268):         self.errors = errors\\n",\n  "codecs.py(312):         self.buffer = b\\"\\"\\n",\n  "tokenize.py(397):         text.mode = \'r\'\\n",\n  "tokenize.py(398):         return text\\n",\n  "linecache.py(137):             lines = fp.readlines()\\n",\n  " --- modulename: codecs, funcname: decode\\n",\n  "codecs.py(321):         data = self.buffer + input\\n",\n  "codecs.py(322):         (result, consumed) = self._buffer_decode(data, self.errors, final)\\n",\n  "codecs.py(324):         self.buffer = data[consumed:]\\n",\n  "codecs.py(325):         return result\\n",\n  " --- modulename: codecs, funcname: decode\\n",\n  "codecs.py(321):         data = self.buffer + input\\n",\n  "codecs.py(322):         (result, consumed) = self._buffer_decode(data, self.errors, final)\\n",\n  "codecs.py(324):         self.buffer = data[consumed:]\\n",\n  "codecs.py(325):         return result\\n",\n  " --- modulename: codecs, funcname: decode\\n",\n  "codecs.py(321):         data = self.buffer + input\\n",\n  "codecs.py(322):         (result, consumed) = self._buffer_decode(data, self.errors, final)\\n",\n  "codecs.py(324):         self.buffer = data[consumed:]\\n",\n  "codecs.py(325):         return result\\n",\n  " --- modulename: codecs, funcname: decode\\n",\n  "codecs.py(321):         data = self.buffer + input\\n",\n  "codecs.py(322):         (result, consumed) = self._buffer_decode(data, self.errors, final)\\n",\n  "codecs.py(324):         self.buffer = data[consumed:]\\n",\n  "codecs.py(325):         return result\\n",\n  " --- modulename: codecs, funcname: decode\\n",\n  "codecs.py(321):         data = self.buffer + input\\n",\n  "codecs.py(322):         (result, consumed) = self._buffer_decode(data, self.errors, final)\\n",\n  "codecs.py(324):         self.buffer = data[consumed:]\\n",\n  "codecs.py(325):         return result\\n",\n  " --- modulename: codecs, funcname: decode\\n",\n  "codecs.py(321):         data = self.buffer + input\\n",\n  "codecs.py(322):         (result, consumed) = self._buffer_decode(data, self.errors, final)\\n",\n  "codecs.py(324):         self.buffer = data[consumed:]\\n",\n  "codecs.py(325):         return result\\n",\n  "linecache.py(140):     if lines and not lines[-1].endswith(\'\\\\n\'):\\n",\n  "linecache.py(142):     size, mtime = stat.st_size, stat.st_mtime\\n",\n  "linecache.py(143):     cache[filename] = size, mtime, lines, fullname\\n",\n  "linecache.py(144):     return lines\\n",\n  "inspect.py(834):     if not lines:\\n",\n  "inspect.py(837):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(840):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(853):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(855):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(857):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(859):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(860):         object = object.f_code\\n",\n  "inspect.py(861):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(862):         if not hasattr(object, \'co_firstlineno\'):\\n",\n  "inspect.py(864):         lnum = object.co_firstlineno - 1\\n",\n  "inspect.py(865):         pat = re.compile(r\'^(\\\\s*def\\\\s)|(\\\\s*async\\\\s+def\\\\s)|(.*(?<!\\\\w)lambda(:|\\\\s))|^(\\\\s*@)\')\\n",\n  " --- modulename: re, funcname: compile\\n",\n  "re.py(252):     return _compile(pattern, flags)\\n",\n  " --- modulename: re, funcname: _compile\\n",\n  "re.py(291):     if isinstance(flags, RegexFlag):\\n",\n  "re.py(293):     try:\\n",\n  "re.py(294):         return _cache[type(pattern), pattern, flags]\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(872):                 break\\n",\n  "inspect.py(874):         return lines, lnum\\n",\n  "inspect.py(1509):             start = max(0, min(start, len(lines) - context))\\n",\n  "inspect.py(1510):             lines = lines[start:start+context]\\n",\n  "inspect.py(1511):             index = lineno - 1 - start\\n",\n  "inspect.py(1515):     return Traceback(filename, lineno, frame.f_code.co_name, lines, index)\\n",\n  "inspect.py(1532):         framelist.append(FrameInfo(*frameinfo))\\n",\n  "inspect.py(1533):         frame = frame.f_back\\n",\n  "inspect.py(1530):     while frame:\\n",\n  "inspect.py(1531):         frameinfo = (frame,) + getframeinfo(frame, context)\\n",\n  " --- modulename: inspect, funcname: getframeinfo\\n",\n  "inspect.py(1493):     if istraceback(frame):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(1497):         lineno = frame.f_lineno\\n",\n  "inspect.py(1498):     if not isframe(frame):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(1501):     filename = getsourcefile(frame) or getfile(frame)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(1502):     if context > 0:\\n",\n  "inspect.py(1503):         start = lineno - 1 - context//2\\n",\n  "inspect.py(1504):         try:\\n",\n  "inspect.py(1505):             lines, lnum = findsource(frame)\\n",\n  " --- modulename: inspect, funcname: findsource\\n",\n  "inspect.py(817):     file = getsourcefile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(818):     if file:\\n",\n  "inspect.py(820):         linecache.checkcache(file)\\n",\n  " --- modulename: linecache, funcname: checkcache\\n",\n  "linecache.py(56):     if filename is None:\\n",\n  "linecache.py(58):     elif filename in cache:\\n",\n  "linecache.py(59):         filenames = [filename]\\n",\n  "linecache.py(63):     for filename in filenames:\\n",\n  "linecache.py(64):         entry = cache[filename]\\n",\n  "linecache.py(65):         if len(entry) == 1:\\n",\n  "linecache.py(68):         size, mtime, lines, fullname = entry\\n",\n  "linecache.py(69):         if mtime is None:\\n",\n  "linecache.py(71):         try:\\n",\n  "linecache.py(72):             stat = os.stat(fullname)\\n",\n  "linecache.py(76):         if size != stat.st_size or mtime != stat.st_mtime:\\n",\n  "linecache.py(63):     for filename in filenames:\\n",\n  "inspect.py(829):     module = getmodule(object, file)\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(735):         return sys.modules.get(modulesbyfile[_filename])\\n",\n  "inspect.py(830):     if module:\\n",\n  "inspect.py(831):         lines = linecache.getlines(file, module.__dict__)\\n",\n  " --- modulename: linecache, funcname: getlines\\n",\n  "linecache.py(40):     if filename in cache:\\n",\n  "linecache.py(41):         entry = cache[filename]\\n",\n  "linecache.py(42):         if len(entry) != 1:\\n",\n  "linecache.py(43):             return cache[filename][2]\\n",\n  "inspect.py(834):     if not lines:\\n",\n  "inspect.py(837):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(840):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(853):     if ismethod(object):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(855):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(857):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(859):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(860):         object = object.f_code\\n",\n  "inspect.py(861):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(862):         if not hasattr(object, \'co_firstlineno\'):\\n",\n  "inspect.py(864):         lnum = object.co_firstlineno - 1\\n",\n  "inspect.py(865):         pat = re.compile(r\'^(\\\\s*def\\\\s)|(\\\\s*async\\\\s+def\\\\s)|(.*(?<!\\\\w)lambda(:|\\\\s))|^(\\\\s*@)\')\\n",\n  " --- modulename: re, funcname: compile\\n",\n  "re.py(252):     return _compile(pattern, flags)\\n",\n  " --- modulename: re, funcname: _compile\\n",\n  "re.py(291):     if isinstance(flags, RegexFlag):\\n",\n  "re.py(293):     try:\\n",\n  "re.py(294):         return _cache[type(pattern), pattern, flags]\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(872):                 break\\n",\n  "inspect.py(874):         return lines, lnum\\n",\n  "inspect.py(1509):             start = max(0, min(start, len(lines) - context))\\n",\n  "inspect.py(1510):             lines = lines[start:start+context]\\n",\n  "inspect.py(1511):             index = lineno - 1 - start\\n",\n  "inspect.py(1515):     return Traceback(filename, lineno, frame.f_code.co_name, lines, index)\\n",\n  "inspect.py(1532):         framelist.append(FrameInfo(*frameinfo))\\n",\n  "inspect.py(1533):         frame = frame.f_back\\n",\n  "inspect.py(1530):     while frame:\\n",\n  "inspect.py(1531):         frameinfo = (frame,) + getframeinfo(frame, context)\\n",\n  " --- modulename: inspect, funcname: getframeinfo\\n",\n  "inspect.py(1493):     if istraceback(frame):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(1497):         lineno = frame.f_lineno\\n",\n  "inspect.py(1498):     if not isframe(frame):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(1501):     filename = getsourcefile(frame) or getfile(frame)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(1502):     if context > 0:\\n",\n  "inspect.py(1503):         start = lineno - 1 - context//2\\n",\n  "inspect.py(1504):         try:\\n",\n  "inspect.py(1505):             lines, lnum = findsource(frame)\\n",\n  " --- modulename: inspect, funcname: findsource\\n",\n  "inspect.py(817):     file = getsourcefile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(818):     if file:\\n",\n  "inspect.py(820):         linecache.checkcache(file)\\n",\n  " --- modulename: linecache, funcname: checkcache\\n",\n  "linecache.py(56):     if filename is None:\\n",\n  "linecache.py(58):     elif filename in cache:\\n",\n  "linecache.py(59):         filenames = [filename]\\n",\n  "linecache.py(63):     for filename in filenames:\\n",\n  "linecache.py(64):         entry = cache[filename]\\n",\n  "linecache.py(65):         if len(entry) == 1:\\n",\n  "linecache.py(68):         size, mtime, lines, fullname = entry\\n",\n  "linecache.py(69):         if mtime is None:\\n",\n  "linecache.py(71):         try:\\n",\n  "linecache.py(72):             stat = os.stat(fullname)\\n",\n  "linecache.py(76):         if size != stat.st_size or mtime != stat.st_mtime:\\n",\n  "linecache.py(63):     for filename in filenames:\\n",\n  "inspect.py(829):     module = getmodule(object, file)\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(735):         return sys.modules.get(modulesbyfile[_filename])\\n",\n  "inspect.py(830):     if module:\\n",\n  "inspect.py(831):         lines = linecache.getlines(file, module.__dict__)\\n",\n  " --- modulename: linecache, funcname: getlines\\n",\n  "linecache.py(40):     if filename in cache:\\n",\n  "linecache.py(41):         entry = cache[filename]\\n",\n  "linecache.py(42):         if len(entry) != 1:\\n",\n  "linecache.py(43):             return cache[filename][2]\\n",\n  "inspect.py(834):     if not lines:\\n",\n  "inspect.py(837):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(840):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(853):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(855):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(857):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(859):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(860):         object = object.f_code\\n",\n  "inspect.py(861):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(862):         if not hasattr(object, \'co_firstlineno\'):\\n",\n  "inspect.py(864):         lnum = object.co_firstlineno - 1\\n",\n  "inspect.py(865):         pat = re.compile(r\'^(\\\\s*def\\\\s)|(\\\\s*async\\\\s+def\\\\s)|(.*(?<!\\\\w)lambda(:|\\\\s))|^(\\\\s*@)\')\\n",\n  " --- modulename: re, funcname: compile\\n",\n  "re.py(252):     return _compile(pattern, flags)\\n",\n  " --- modulename: re, funcname: _compile\\n",\n  "re.py(291):     if isinstance(flags, RegexFlag):\\n",\n  "re.py(293):     try:\\n",\n  "re.py(294):         return _cache[type(pattern), pattern, flags]\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(428):     if op is SUBPATTERN:\\n",\n  "sre_compile.py(430):     return op in _UNIT_CODES\\n",\n  "sre_compile.py(141):                 if op is MAX_REPEAT:\\n",\n  "sre_compile.py(142):                     emit(REPEAT_ONE)\\n",\n  "sre_compile.py(145):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(146):                 emit(av[0])\\n",\n  "sre_compile.py(147):                 emit(av[1])\\n",\n  "sre_compile.py(148):                 _compile(code, av[2], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(296):                 elif op is RANGE:\\n",\n  "sre_compile.py(313):                 elif op is NEGATE:\\n",\n  "sre_compile.py(316):                     tail.append((op, av))\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(339):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(355):         out += tail\\n",\n  "sre_compile.py(357):         if hascased or len(out) < len(charset):\\n",\n  "sre_compile.py(360):         return charset, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(124):                 emit(IN)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n",\n  "sre_compile.py(263):         elif op is BIGCHARSET:\\n",\n  "sre_compile.py(265):         elif op is CATEGORY:\\n",\n  "sre_compile.py(266):             if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(268):             elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(269):                 emit(CH_UNICODE[av])\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(149):                 emit(SUCCESS)\\n",\n  "sre_compile.py(150):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(169):             if group:\\n",\n  "sre_compile.py(170):                 emit(MARK)\\n",\n  "sre_compile.py(171):                 emit((group-1)*2+1)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(93):                 emit(op)\\n",\n  "sre_compile.py(94):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(609):     code.append(SUCCESS)\\n",\n  "sre_compile.py(611):     return code\\n",\n  "sre_compile.py(770):     if flags & SRE_FLAG_DEBUG:\\n",\n  "sre_compile.py(775):     groupindex = p.state.groupdict\\n",\n  "sre_compile.py(776):     indexgroup = [None] * p.state.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(777):     for k, i in groupindex.items():\\n",\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "sre_compile.py(781):         pattern, flags | p.state.flags, code,\\n",\n  "sre_compile.py(782):         p.state.groups-1,\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(783):         groupindex, tuple(indexgroup)\\n",\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "re.py(305):     if not (flags & DEBUG):\\n",\n  " --- modulename: enum, funcname: __and__\\n",\n  "enum.py(978):         if not isinstance(other, (self.__class__, int)):\\n",\n  "enum.py(980):         return self.__class__(self._value_ & self.__class__(other)._value_)\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  "re.py(306):         if len(_cache) >= _MAXCACHE:\\n",\n  "re.py(312):         _cache[type(pattern), pattern, flags] = p\\n",\n  "re.py(313):     return p\\n",\n  "debug.py(471):                 if (match and match.group(1) in kwargs):\\n",\n  "debug.py(473):                 assertion((not ((value is not None) and (expression is None))),\\n",\n  "debug.py(474):                           \\"Warning: Likely problem resolving expression text (try reworking trace_expr call)\\")\\n",\n  "debug.py(473):                 assertion((not ((value is not None) and (expression is None))),\\n",\n  " --- modulename: debug, funcname: assertion\\n",\n  "debug.py(554):         if (not expression):\\n",\n  "debug.py(575):         return\\n",\n  "debug.py(475):                 value_spec = format_value(repr(value) if use_repr else value,\\n",\n  "debug.py(476):                                           max_len=max_len)\\n",\n  "debug.py(475):                 value_spec = format_value(repr(value) if use_repr else value,\\n",\n  " --- modulename: debug, funcname: format_value\\n",\n  "debug.py(719):     trace(MOST_VERBOSE, f\\"format_value({value}, max_len={max_len})\\")\\n",\n  " --- modulename: debug, funcname: trace\\n",\n  "debug.py(201):         if (trace_level >= level):\\n",\n  "debug.py(224):         if empty_arg is not None:\\n",\n  "debug.py(226):         return\\n",\n  "debug.py(720):     if max_len is None:\\n",\n  "debug.py(721):         max_len = max_trace_value_len\\n",\n  "debug.py(722):     result = value if isinstance(value, str) else str(value)\\n",\n  "debug.py(723):     if len(result) > max_len:\\n",\n  "debug.py(725):     result = re.sub(\\"\\\\n\\", r\\"\\\\\\\\n\\", result)\\n",\n  " --- modulename: re, funcname: sub\\n",\n  "re.py(210):     return _compile(pattern, flags).sub(repl, string, count)\\n",\n  " --- modulename: re, funcname: _compile\\n",\n  "re.py(291):     if isinstance(flags, RegexFlag):\\n",\n  "re.py(293):     try:\\n",\n  "re.py(294):         return _cache[type(pattern), pattern, flags]\\n",\n  "re.py(295):     except KeyError:\\n",\n  "re.py(296):         pass\\n",\n  "re.py(297):     if isinstance(pattern, Pattern):\\n",\n  "re.py(302):     if not sre_compile.isstring(pattern):\\n",\n  " --- modulename: sre_compile, funcname: isstring\\n",\n  "sre_compile.py(596):     return isinstance(obj, (str, bytes))\\n",\n  "re.py(304):     p = sre_compile.compile(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: compile\\n",\n  "sre_compile.py(762):     if isstring(p):\\n",\n  " --- modulename: sre_compile, funcname: isstring\\n",\n  "sre_compile.py(596):     return isinstance(obj, (str, bytes))\\n",\n  "sre_compile.py(763):         pattern = p\\n",\n  "sre_compile.py(764):         p = sre_parse.parse(p, flags)\\n",\n  " --- modulename: sre_parse, funcname: parse\\n",\n  "sre_parse.py(942):     source = Tokenizer(str)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(225):         self.istext = isinstance(string, str)\\n",\n  "sre_parse.py(226):         self.string = string\\n",\n  "sre_parse.py(227):         if not self.istext:\\n",\n  "sre_parse.py(229):         self.decoded_string = string\\n",\n  "sre_parse.py(230):         self.index = 0\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(231):         self.next = None\\n",\n  "sre_parse.py(232):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(944):     if state is None:\\n",\n  "sre_parse.py(945):         state = State()\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(77):         self.flags = 0\\n",\n  "sre_parse.py(78):         self.groupdict = {}\\n",\n  "sre_parse.py(79):         self.groupwidths = [None]  # group 0\\n",\n  "sre_parse.py(80):         self.lookbehindgroups = None\\n",\n  "sre_parse.py(946):     state.flags = flags\\n",\n  "sre_parse.py(947):     state.str = str\\n",\n  "sre_parse.py(949):     try:\\n",\n  "sre_parse.py(950):         p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(237):         except IndexError:\\n",\n  "sre_parse.py(238):             self.next = None\\n",\n  "sre_parse.py(239):             return\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(529):             subpatternappend((LITERAL, _ord(this)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(508):             break # end of pattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(449):         return items[0]\\n",\n  "sre_parse.py(960):     p.state.flags = fix_flags(str, p.state.flags)\\n",\n  " --- modulename: sre_parse, funcname: fix_flags\\n",\n  "sre_parse.py(925):     if isinstance(src, str):\\n",\n  "sre_parse.py(926):         if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_parse.py(928):         if not flags & SRE_FLAG_ASCII:\\n",\n  "sre_parse.py(929):             flags |= SRE_FLAG_UNICODE\\n",\n  "sre_parse.py(937):     return flags\\n",\n  "sre_parse.py(962):     if source.next is not None:\\n",\n  "sre_parse.py(966):     if flags & SRE_FLAG_DEBUG:\\n",\n  "sre_parse.py(969):     return p\\n",\n  "sre_compile.py(768):     code = _code(p, flags)\\n",\n  " --- modulename: sre_compile, funcname: _code\\n",\n  "sre_compile.py(600):     flags = p.state.flags | flags\\n",\n  "sre_compile.py(601):     code = []\\n",\n  "sre_compile.py(604):     _compile_info(code, p, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile_info\\n",\n  "sre_compile.py(540):     lo, hi = pattern.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_compile.py(541):     if hi > MAXCODE:\\n",\n  "sre_compile.py(543):     if lo == 0:\\n",\n  "sre_compile.py(547):     prefix = []\\n",\n  "sre_compile.py(548):     prefix_skip = 0\\n",\n  "sre_compile.py(549):     charset = [] # not used\\n",\n  "sre_compile.py(550):     if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):\\n",\n  "sre_compile.py(552):         prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_literal_prefix\\n",\n  "sre_compile.py(463):     prefix = []\\n",\n  "sre_compile.py(464):     prefixappend = prefix.append\\n",\n  "sre_compile.py(465):     prefix_skip = None\\n",\n  "sre_compile.py(466):     iscased = _get_iscased(flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_iscased\\n",\n  "sre_compile.py(454):     if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(455):         return None\\n",\n  "sre_compile.py(467):     for op, av in pattern.data:\\n",\n  "sre_compile.py(468):         if op is LITERAL:\\n",\n  "sre_compile.py(469):             if iscased and iscased(av):\\n",\n  "sre_compile.py(471):             prefixappend(av)\\n",\n  "sre_compile.py(467):     for op, av in pattern.data:\\n",\n  "sre_compile.py(489):         return prefix, prefix_skip, True\\n",\n  "sre_compile.py(554):         if not prefix:\\n",\n  "sre_compile.py(561):     emit = code.append\\n",\n  "sre_compile.py(562):     emit(INFO)\\n",\n  "sre_compile.py(563):     skip = len(code); emit(0)\\n",\n  "sre_compile.py(565):     mask = 0\\n",\n  "sre_compile.py(566):     if prefix:\\n",\n  "sre_compile.py(567):         mask = SRE_INFO_PREFIX\\n",\n  "sre_compile.py(568):         if prefix_skip is None and got_all:\\n",\n  "sre_compile.py(569):             mask = mask | SRE_INFO_LITERAL\\n",\n  "sre_compile.py(572):     emit(mask)\\n",\n  "sre_compile.py(574):     if lo < MAXCODE:\\n",\n  "sre_compile.py(575):         emit(lo)\\n",\n  "sre_compile.py(579):     emit(min(hi, MAXCODE))\\n",\n  "sre_compile.py(581):     if prefix:\\n",\n  "sre_compile.py(582):         emit(len(prefix)) # length\\n",\n  "sre_compile.py(583):         if prefix_skip is None:\\n",\n  "sre_compile.py(584):             prefix_skip =  len(prefix)\\n",\n  "sre_compile.py(585):         emit(prefix_skip) # skip\\n",\n  "sre_compile.py(586):         code.extend(prefix)\\n",\n  "sre_compile.py(588):         code.extend(_generate_overlap_table(prefix))\\n",\n  " --- modulename: sre_compile, funcname: _generate_overlap_table\\n",\n  "sre_compile.py(441):     table = [0] * len(prefix)\\n",\n  "sre_compile.py(442):     for i in range(1, len(prefix)):\\n",\n  "sre_compile.py(451):     return table\\n",\n  "sre_compile.py(593):     code[skip] = len(code) - skip\\n",\n  "sre_compile.py(607):     _compile(code, p.data, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(93):                 emit(op)\\n",\n  "sre_compile.py(94):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(609):     code.append(SUCCESS)\\n",\n  "sre_compile.py(611):     return code\\n",\n  "sre_compile.py(770):     if flags & SRE_FLAG_DEBUG:\\n",\n  "sre_compile.py(775):     groupindex = p.state.groupdict\\n",\n  "sre_compile.py(776):     indexgroup = [None] * p.state.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(777):     for k, i in groupindex.items():\\n",\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "sre_compile.py(781):         pattern, flags | p.state.flags, code,\\n",\n  "sre_compile.py(782):         p.state.groups-1,\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(783):         groupindex, tuple(indexgroup)\\n",\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "re.py(305):     if not (flags & DEBUG):\\n",\n  " --- modulename: enum, funcname: __and__\\n",\n  "enum.py(978):         if not isinstance(other, (self.__class__, int)):\\n",\n  "enum.py(980):         return self.__class__(self._value_ & self.__class__(other)._value_)\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  "re.py(306):         if len(_cache) >= _MAXCACHE:\\n",\n  "re.py(312):         _cache[type(pattern), pattern, flags] = p\\n",\n  "re.py(313):     return p\\n",\n  " --- modulename: re, funcname: _subx\\n",\n  "re.py(327):     template = _compile_repl(template, pattern)\\n",\n  " --- modulename: re, funcname: _compile_repl\\n",\n  "re.py(318):     return sre_parse.parse_template(repl, pattern)\\n",\n  " --- modulename: sre_parse, funcname: parse_template\\n",\n  "sre_parse.py(974):     s = Tokenizer(source)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(225):         self.istext = isinstance(string, str)\\n",\n  "sre_parse.py(226):         self.string = string\\n",\n  "sre_parse.py(227):         if not self.istext:\\n",\n  "sre_parse.py(229):         self.decoded_string = string\\n",\n  "sre_parse.py(230):         self.index = 0\\n",\n  "sre_parse.py(231):         self.next = None\\n",\n  "sre_parse.py(232):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(975):     sget = s.get\\n",\n  "sre_parse.py(976):     groups = []\\n",\n  "sre_parse.py(977):     literals = []\\n",\n  "sre_parse.py(978):     literal = []\\n",\n  "sre_parse.py(979):     lappend = literal.append\\n",\n  "sre_parse.py(980):     def addgroup(index, pos):\\n",\n  "sre_parse.py(988):     groupindex = state.groupindex\\n",\n  "sre_parse.py(990):         this = sget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(991):         if this is None:\\n",\n  "sre_parse.py(993):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(995):             c = this[1]\\n",\n  "sre_parse.py(996):             if c == \\"g\\":\\n",\n  "sre_parse.py(1018):             elif c == \\"0\\":\\n",\n  "sre_parse.py(1024):             elif c in DIGITS:\\n",\n  "sre_parse.py(1040):                 try:\\n",\n  "sre_parse.py(1041):                     this = chr(ESCAPES[this][1])\\n",\n  "sre_parse.py(1045):                 lappend(this)\\n",\n  "sre_parse.py(990):         this = sget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(237):         except IndexError:\\n",\n  "sre_parse.py(238):             self.next = None\\n",\n  "sre_parse.py(239):             return\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(991):         if this is None:\\n",\n  "sre_parse.py(993):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(1047):             lappend(this)\\n",\n  "sre_parse.py(990):         this = sget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(237):         except IndexError:\\n",\n  "sre_parse.py(238):             self.next = None\\n",\n  "sre_parse.py(239):             return\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(991):         if this is None:\\n",\n  "sre_parse.py(992):             break # end of replacement string\\n",\n  "sre_parse.py(1048):     if literal:\\n",\n  "sre_parse.py(1049):         literals.append(\'\'.join(literal))\\n",\n  "sre_parse.py(1050):     if not isinstance(source, str):\\n",\n  "sre_parse.py(1054):     return groups, literals\\n",\n  "re.py(328):     if not template[0] and len(template[1]) == 1:\\n",\n  "re.py(330):         return template[1][0]\\n",\n  "debug.py(726):     return result\\n",\n  "debug.py(477):                 trace(level, f\\"{expression}={value_spec}{delim}\\", no_eol=no_eol)\\n",\n  " --- modulename: debug, funcname: trace\\n",\n  "debug.py(201):         if (trace_level >= level):\\n",\n  "debug.py(224):         if empty_arg is not None:\\n",\n  "debug.py(226):         return\\n",\n  "debug.py(467):         for expression, value in zip_longest(expressions, values):\\n",\n  "debug.py(468):             try:\\n",\n  "debug.py(470):                 match = re.search(r\\"^(\\\\w+)=\\", str(expression))\\n",\n  " --- modulename: re, funcname: search\\n",\n  "re.py(201):     return _compile(pattern, flags).search(string)\\n",\n  " --- modulename: re, funcname: _compile\\n",\n  "re.py(291):     if isinstance(flags, RegexFlag):\\n",\n  "re.py(293):     try:\\n",\n  "re.py(294):         return _cache[type(pattern), pattern, flags]\\n",\n  "debug.py(471):                 if (match and match.group(1) in kwargs):\\n",\n  "debug.py(473):                 assertion((not ((value is not None) and (expression is None))),\\n",\n  "debug.py(474):                           \\"Warning: Likely problem resolving expression text (try reworking trace_expr call)\\")\\n",\n  "debug.py(473):                 assertion((not ((value is not None) and (expression is None))),\\n",\n  " --- modulename: debug, funcname: assertion\\n",\n  "debug.py(554):         if (not expression):\\n",\n  "debug.py(575):         return\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(874):         return lines, lnum\\n",\n  "inspect.py(1509):             start = max(0, min(start, len(lines) - context))\\n",\n  "inspect.py(1510):             lines = lines[start:start+context]\\n",\n  "inspect.py(1511):             index = lineno - 1 - start\\n",\n  "inspect.py(1515):     return Traceback(filename, lineno, frame.f_code.co_name, lines, index)\\n",\n  "inspect.py(1532):         framelist.append(FrameInfo(*frameinfo))\\n",\n  "inspect.py(1533):         frame = frame.f_back\\n",\n  "inspect.py(1530):     while frame:\\n",\n  "inspect.py(1531):         frameinfo = (frame,) + getframeinfo(frame, context)\\n",\n  " --- modulename: inspect, funcname: getframeinfo\\n",\n  "inspect.py(1493):     if istraceback(frame):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(1497):         lineno = frame.f_lineno\\n",\n  "inspect.py(1498):     if not isframe(frame):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(1501):     filename = getsourcefile(frame) or getfile(frame)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(20):     except (OSError, ValueError):\\n",\n  "genericpath.py(21):         return False\\n",\n  "inspect.py(709):     if getattr(getmodule(object, filename), \'__loader__\', None) is not None:\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(737):     try:\\n",\n  "inspect.py(738):         file = getabsfile(object, _filename)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(377):         if isinstance(path, bytes):\\n",\n  "posixpath.py(380):             cwd = os.getcwd()\\n",\n  "posixpath.py(381):         path = join(cwd, path)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(756):     if file in modulesbyfile:\\n",\n  "inspect.py(759):     main = sys.modules[\'__main__\']\\n",\n  "inspect.py(760):     if not hasattr(object, \'__name__\'):\\n",\n  "inspect.py(761):         return None\\n",\n  "inspect.py(712):     if filename in linecache.cache:\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(1502):     if context > 0:\\n",\n  "inspect.py(1503):         start = lineno - 1 - context//2\\n",\n  "inspect.py(1504):         try:\\n",\n  "inspect.py(1505):             lines, lnum = findsource(frame)\\n",\n  " --- modulename: inspect, funcname: findsource\\n",\n  "inspect.py(817):     file = getsourcefile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(20):     except (OSError, ValueError):\\n",\n  "genericpath.py(21):         return False\\n",\n  "inspect.py(709):     if getattr(getmodule(object, filename), \'__loader__\', None) is not None:\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(737):     try:\\n",\n  "inspect.py(738):         file = getabsfile(object, _filename)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(377):         if isinstance(path, bytes):\\n",\n  "posixpath.py(380):             cwd = os.getcwd()\\n",\n  "posixpath.py(381):         path = join(cwd, path)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(756):     if file in modulesbyfile:\\n",\n  "inspect.py(759):     main = sys.modules[\'__main__\']\\n",\n  "inspect.py(760):     if not hasattr(object, \'__name__\'):\\n",\n  "inspect.py(761):         return None\\n",\n  "inspect.py(712):     if filename in linecache.cache:\\n",\n  "inspect.py(818):     if file:\\n",\n  "inspect.py(822):         file = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(826):         if not (file.startswith(\'<\') and file.endswith(\'>\')):\\n",\n  "inspect.py(829):     module = getmodule(object, file)\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(737):     try:\\n",\n  "inspect.py(738):         file = getabsfile(object, _filename)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(377):         if isinstance(path, bytes):\\n",\n  "posixpath.py(380):             cwd = os.getcwd()\\n",\n  "posixpath.py(381):         path = join(cwd, path)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(1515):     return Traceback(filename, lineno, frame.f_code.co_name, lines, index)\\n",\n  "inspect.py(1532):         framelist.append(FrameInfo(*frameinfo))\\n",\n  "inspect.py(1533):         frame = frame.f_back\\n",\n  "inspect.py(1530):     while frame:\\n",\n  "inspect.py(1531):         frameinfo = (frame,) + getframeinfo(frame, context)\\n",\n  " --- modulename: inspect, funcname: getframeinfo\\n",\n  "inspect.py(1493):     if istraceback(frame):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(1497):         lineno = frame.f_lineno\\n",\n  "inspect.py(1498):     if not isframe(frame):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(1501):     filename = getsourcefile(frame) or getfile(frame)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(20):     except (OSError, ValueError):\\n",\n  "genericpath.py(21):         return False\\n",\n  "inspect.py(709):     if getattr(getmodule(object, filename), \'__loader__\', None) is not None:\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(737):     try:\\n",\n  "inspect.py(738):         file = getabsfile(object, _filename)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(377):         if isinstance(path, bytes):\\n",\n  "posixpath.py(380):             cwd = os.getcwd()\\n",\n  "posixpath.py(381):         path = join(cwd, path)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(747):             f = module.__file__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(756):     if file in modulesbyfile:\\n",\n  "inspect.py(759):     main = sys.modules[\'__main__\']\\n",\n  "inspect.py(760):     if not hasattr(object, \'__name__\'):\\n",\n  "inspect.py(761):         return None\\n",\n  "inspect.py(830):     if module:\\n",\n  "inspect.py(833):         lines = linecache.getlines(file)\\n",\n  " --- modulename: linecache, funcname: getlines\\n",\n  "linecache.py(40):     if filename in cache:\\n",\n  "linecache.py(45):     try:\\n",\n  "linecache.py(46):         return updatecache(filename, module_globals)\\n",\n  " --- modulename: linecache, funcname: updatecache\\n",\n  "linecache.py(85):     if filename in cache:\\n",\n  "linecache.py(88):     if not filename or (filename.startswith(\'<\') and filename.endswith(\'>\')):\\n",\n  "linecache.py(89):         return []\\n",\n  "inspect.py(834):     if not lines:\\n",\n  "inspect.py(835):         raise OSError(\'could not get source code\')\\n",\n  "inspect.py(1506):         except OSError:\\n",\n  "inspect.py(1507):             lines = index = None\\n",\n  "inspect.py(1515):     return Traceback(filename, lineno, frame.f_code.co_name, lines, index)\\n",\n  "inspect.py(1532):         framelist.append(FrameInfo(*frameinfo))\\n",\n  "inspect.py(1533):         frame = frame.f_back\\n",\n  "inspect.py(1530):     while frame:\\n",\n  "inspect.py(1531):         frameinfo = (frame,) + getframeinfo(frame, context)\\n",\n  " --- modulename: inspect, funcname: getframeinfo\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(1493):     if istraceback(frame):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(1497):         lineno = frame.f_lineno\\n",\n  "inspect.py(1498):     if not isframe(frame):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(1501):     filename = getsourcefile(frame) or getfile(frame)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(20):     except (OSError, ValueError):\\n",\n  "genericpath.py(21):         return False\\n",\n  "inspect.py(709):     if getattr(getmodule(object, filename), \'__loader__\', None) is not None:\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(737):     try:\\n",\n  "inspect.py(738):         file = getabsfile(object, _filename)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(377):         if isinstance(path, bytes):\\n",\n  "posixpath.py(380):             cwd = os.getcwd()\\n",\n  "posixpath.py(381):         path = join(cwd, path)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(756):     if file in modulesbyfile:\\n",\n  "inspect.py(759):     main = sys.modules[\'__main__\']\\n",\n  "inspect.py(760):     if not hasattr(object, \'__name__\'):\\n",\n  "inspect.py(761):         return None\\n",\n  "inspect.py(830):     if module:\\n",\n  "inspect.py(833):         lines = linecache.getlines(file)\\n",\n  " --- modulename: linecache, funcname: getlines\\n",\n  "linecache.py(40):     if filename in cache:\\n",\n  "linecache.py(45):     try:\\n",\n  "linecache.py(46):         return updatecache(filename, module_globals)\\n",\n  " --- modulename: linecache, funcname: updatecache\\n",\n  "linecache.py(85):     if filename in cache:\\n",\n  "linecache.py(88):     if not filename or (filename.startswith(\'<\') and filename.endswith(\'>\')):\\n",\n  "linecache.py(89):         return []\\n",\n  "inspect.py(834):     if not lines:\\n",\n  "inspect.py(835):         raise OSError(\'could not get source code\')\\n",\n  "inspect.py(1506):         except OSError:\\n",\n  "inspect.py(1507):             lines = index = None\\n",\n  "inspect.py(1515):     return Traceback(filename, lineno, frame.f_code.co_name, lines, index)\\n",\n  "inspect.py(1532):         framelist.append(FrameInfo(*frameinfo))\\n",\n  "inspect.py(1533):         frame = frame.f_back\\n",\n  "inspect.py(1530):     while frame:\\n",\n  "inspect.py(1531):         frameinfo = (frame,) + getframeinfo(frame, context)\\n",\n  " --- modulename: inspect, funcname: getframeinfo\\n",\n  "inspect.py(1493):     if istraceback(frame):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(1497):         lineno = frame.f_lineno\\n",\n  "inspect.py(1498):     if not isframe(frame):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(1501):     filename = getsourcefile(frame) or getfile(frame)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(20):     except (OSError, ValueError):\\n",\n  "genericpath.py(21):         return False\\n",\n  "inspect.py(709):     if getattr(getmodule(object, filename), \'__loader__\', None) is not None:\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(737):     try:\\n",\n  "inspect.py(738):         file = getabsfile(object, _filename)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(377):         if isinstance(path, bytes):\\n",\n  "posixpath.py(380):             cwd = os.getcwd()\\n",\n  "posixpath.py(381):         path = join(cwd, path)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(756):     if file in modulesbyfile:\\n",\n  "inspect.py(759):     main = sys.modules[\'__main__\']\\n",\n  "inspect.py(760):     if not hasattr(object, \'__name__\'):\\n",\n  "inspect.py(761):         return None\\n",\n  "inspect.py(830):     if module:\\n",\n  "inspect.py(833):         lines = linecache.getlines(file)\\n",\n  " --- modulename: linecache, funcname: getlines\\n",\n  "linecache.py(40):     if filename in cache:\\n",\n  "linecache.py(45):     try:\\n",\n  "linecache.py(46):         return updatecache(filename, module_globals)\\n",\n  " --- modulename: linecache, funcname: updatecache\\n",\n  "linecache.py(85):     if filename in cache:\\n",\n  "linecache.py(88):     if not filename or (filename.startswith(\'<\') and filename.endswith(\'>\')):\\n",\n  "linecache.py(89):         return []\\n",\n  "inspect.py(834):     if not lines:\\n",\n  "inspect.py(835):         raise OSError(\'could not get source code\')\\n",\n  "inspect.py(1506):         except OSError:\\n",\n  "inspect.py(1507):             lines = index = None\\n",\n  "inspect.py(1515):     return Traceback(filename, lineno, frame.f_code.co_name, lines, index)\\n",\n  "inspect.py(1532):         framelist.append(FrameInfo(*frameinfo))\\n",\n  "inspect.py(1533):         frame = frame.f_back\\n",\n  "inspect.py(1530):     while frame:\\n",\n  "inspect.py(1531):         frameinfo = (frame,) + getframeinfo(frame, context)\\n",\n  " --- modulename: inspect, funcname: getframeinfo\\n",\n  "inspect.py(1493):     if istraceback(frame):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(1497):         lineno = frame.f_lineno\\n",\n  "inspect.py(1498):     if not isframe(frame):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(1501):     filename = getsourcefile(frame) or getfile(frame)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(20):     except (OSError, ValueError):\\n",\n  "genericpath.py(21):         return False\\n",\n  "inspect.py(709):     if getattr(getmodule(object, filename), \'__loader__\', None) is not None:\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(737):     try:\\n",\n  "inspect.py(738):         file = getabsfile(object, _filename)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(377):         if isinstance(path, bytes):\\n",\n  "posixpath.py(380):             cwd = os.getcwd()\\n",\n  "posixpath.py(381):         path = join(cwd, path)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(756):     if file in modulesbyfile:\\n",\n  "inspect.py(759):     main = sys.modules[\'__main__\']\\n",\n  "inspect.py(760):     if not hasattr(object, \'__name__\'):\\n",\n  "inspect.py(761):         return None\\n",\n  "inspect.py(712):     if filename in linecache.cache:\\n",\n  "inspect.py(818):     if file:\\n",\n  "inspect.py(822):         file = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(826):         if not (file.startswith(\'<\') and file.endswith(\'>\')):\\n",\n  "inspect.py(829):     module = getmodule(object, file)\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(737):     try:\\n",\n  "inspect.py(738):         file = getabsfile(object, _filename)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(377):         if isinstance(path, bytes):\\n",\n  "posixpath.py(380):             cwd = os.getcwd()\\n",\n  "posixpath.py(381):         path = join(cwd, path)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "linecache.py(59):         filenames = [filename]\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "linecache.py(63):     for filename in filenames:\\n",\n  "linecache.py(64):         entry = cache[filename]\\n",\n  "linecache.py(65):         if len(entry) == 1:\\n",\n  "linecache.py(68):         size, mtime, lines, fullname = entry\\n",\n  "linecache.py(69):         if mtime is None:\\n",\n  "linecache.py(71):         try:\\n",\n  "linecache.py(72):             stat = os.stat(fullname)\\n",\n  "linecache.py(76):         if size != stat.st_size or mtime != stat.st_mtime:\\n",\n  "linecache.py(63):     for filename in filenames:\\n",\n  "inspect.py(829):     module = getmodule(object, file)\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(735):         return sys.modules.get(modulesbyfile[_filename])\\n",\n  "inspect.py(830):     if module:\\n",\n  "inspect.py(831):         lines = linecache.getlines(file, module.__dict__)\\n",\n  " --- modulename: linecache, funcname: getlines\\n",\n  "linecache.py(40):     if filename in cache:\\n",\n  "linecache.py(41):         entry = cache[filename]\\n",\n  "linecache.py(42):         if len(entry) != 1:\\n",\n  "linecache.py(43):             return cache[filename][2]\\n",\n  "inspect.py(834):     if not lines:\\n",\n  "inspect.py(837):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(840):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(853):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(855):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(857):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(859):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(860):         object = object.f_code\\n",\n  "inspect.py(861):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(862):         if not hasattr(object, \'co_firstlineno\'):\\n",\n  "inspect.py(864):         lnum = object.co_firstlineno - 1\\n",\n  "inspect.py(865):         pat = re.compile(r\'^(\\\\s*def\\\\s)|(\\\\s*async\\\\s+def\\\\s)|(.*(?<!\\\\w)lambda(:|\\\\s))|^(\\\\s*@)\')\\n",\n  " --- modulename: re, funcname: compile\\n",\n  "re.py(252):     return _compile(pattern, flags)\\n",\n  " --- modulename: re, funcname: _compile\\n",\n  "re.py(291):     if isinstance(flags, RegexFlag):\\n",\n  "re.py(293):     try:\\n",\n  "re.py(294):         return _cache[type(pattern), pattern, flags]\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(873):             lnum = lnum - 1\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(874):         return lines, lnum\\n",\n  "inspect.py(1509):             start = max(0, min(start, len(lines) - context))\\n",\n  "inspect.py(1510):             lines = lines[start:start+context]\\n",\n  "inspect.py(1511):             index = lineno - 1 - start\\n",\n  "inspect.py(1515):     return Traceback(filename, lineno, frame.f_code.co_name, lines, index)\\n",\n  "inspect.py(1532):         framelist.append(FrameInfo(*frameinfo))\\n",\n  "inspect.py(1533):         frame = frame.f_back\\n",\n  "inspect.py(1530):     while frame:\\n",\n  "inspect.py(1531):         frameinfo = (frame,) + getframeinfo(frame, context)\\n",\n  " --- modulename: inspect, funcname: getframeinfo\\n",\n  "inspect.py(1493):     if istraceback(frame):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(1497):         lineno = frame.f_lineno\\n",\n  "inspect.py(1498):     if not isframe(frame):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(1501):     filename = getsourcefile(frame) or getfile(frame)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(1502):     if context > 0:\\n",\n  "inspect.py(1503):         start = lineno - 1 - context//2\\n",\n  "inspect.py(1504):         try:\\n",\n  "inspect.py(1505):             lines, lnum = findsource(frame)\\n",\n  " --- modulename: inspect, funcname: findsource\\n",\n  "inspect.py(817):     file = getsourcefile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(818):     if file:\\n",\n  "inspect.py(820):         linecache.checkcache(file)\\n",\n  " --- modulename: linecache, funcname: checkcache\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "linecache.py(56):     if filename is None:\\n",\n  "linecache.py(58):     elif filename in cache:\\n",\n  "linecache.py(59):         filenames = [filename]\\n",\n  "linecache.py(63):     for filename in filenames:\\n",\n  "linecache.py(64):         entry = cache[filename]\\n",\n  "linecache.py(65):         if len(entry) == 1:\\n",\n  "linecache.py(68):         size, mtime, lines, fullname = entry\\n",\n  "linecache.py(69):         if mtime is None:\\n",\n  "linecache.py(71):         try:\\n",\n  "linecache.py(72):             stat = os.stat(fullname)\\n",\n  "linecache.py(76):         if size != stat.st_size or mtime != stat.st_mtime:\\n",\n  "linecache.py(63):     for filename in filenames:\\n",\n  "inspect.py(829):     module = getmodule(object, file)\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(735):         return sys.modules.get(modulesbyfile[_filename])\\n",\n  "inspect.py(830):     if module:\\n",\n  "inspect.py(831):         lines = linecache.getlines(file, module.__dict__)\\n",\n  " --- modulename: linecache, funcname: getlines\\n",\n  "linecache.py(40):     if filename in cache:\\n",\n  "linecache.py(41):         entry = cache[filename]\\n",\n  "linecache.py(42):         if len(entry) != 1:\\n",\n  "linecache.py(43):             return cache[filename][2]\\n",\n  "inspect.py(834):     if not lines:\\n",\n  "inspect.py(837):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(840):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(853):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(855):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(857):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(859):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(860):         object = object.f_code\\n",\n  "inspect.py(861):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(862):         if not hasattr(object, \'co_firstlineno\'):\\n",\n  "inspect.py(864):         lnum = object.co_firstlineno - 1\\n",\n  "inspect.py(865):         pat = re.compile(r\'^(\\\\s*def\\\\s)|(\\\\s*async\\\\s+def\\\\s)|(.*(?<!\\\\w)lambda(:|\\\\s))|^(\\\\s*@)\')\\n",\n  " --- modulename: re, funcname: compile\\n",\n  "re.py(252):     return _compile(pattern, flags)\\n",\n  " --- modulename: re, funcname: _compile\\n",\n  "re.py(291):     if isinstance(flags, RegexFlag):\\n",\n  "re.py(293):     try:\\n",\n  "re.py(294):         return _cache[type(pattern), pattern, flags]\\n",\n  "inspect.py(866):         while lnum > 0:\\n",\n  "inspect.py(867):             try:\\n",\n  "inspect.py(868):                 line = lines[lnum]\\n",\n  "inspect.py(871):             if pat.match(line):\\n",\n  "inspect.py(872):                 break\\n",\n  "inspect.py(874):         return lines, lnum\\n",\n  "inspect.py(1509):             start = max(0, min(start, len(lines) - context))\\n",\n  "inspect.py(1510):             lines = lines[start:start+context]\\n",\n  "inspect.py(1511):             index = lineno - 1 - start\\n",\n  "inspect.py(1515):     return Traceback(filename, lineno, frame.f_code.co_name, lines, index)\\n",\n  "inspect.py(1532):         framelist.append(FrameInfo(*frameinfo))\\n",\n  "inspect.py(1533):         frame = frame.f_back\\n",\n  "inspect.py(1530):     while frame:\\n",\n  "inspect.py(1531):         frameinfo = (frame,) + getframeinfo(frame, context)\\n",\n  " --- modulename: inspect, funcname: getframeinfo\\n",\n  "inspect.py(1493):     if istraceback(frame):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(1497):         lineno = frame.f_lineno\\n",\n  "inspect.py(1498):     if not isframe(frame):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(1501):     filename = getsourcefile(frame) or getfile(frame)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(22):     return True\\n",\n  "inspect.py(707):         return filename\\n",\n  "inspect.py(1502):     if context > 0:\\n",\n  "inspect.py(1503):         start = lineno - 1 - context//2\\n",\n  "inspect.py(1504):         try:\\n",\n  "inspect.py(1505):             lines, lnum = findsource(frame)\\n",\n  " --- modulename: inspect, funcname: findsource\\n",\n  "inspect.py(817):     file = getsourcefile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(756):     if file in modulesbyfile:\\n",\n  "inspect.py(759):     main = sys.modules[\'__main__\']\\n",\n  "inspect.py(760):     if not hasattr(object, \'__name__\'):\\n",\n  "inspect.py(761):         return None\\n",\n  "inspect.py(712):     if filename in linecache.cache:\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(1502):     if context > 0:\\n",\n  "inspect.py(1503):         start = lineno - 1 - context//2\\n",\n  "inspect.py(1504):         try:\\n",\n  "inspect.py(1505):             lines, lnum = findsource(frame)\\n",\n  " --- modulename: inspect, funcname: findsource\\n",\n  "inspect.py(817):     file = getsourcefile(object)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(20):     except (OSError, ValueError):\\n",\n  "genericpath.py(21):         return False\\n",\n  "inspect.py(709):     if getattr(getmodule(object, filename), \'__loader__\', None) is not None:\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(737):     try:\\n",\n  "inspect.py(738):         file = getabsfile(object, _filename)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(377):         if isinstance(path, bytes):\\n",\n  "posixpath.py(380):             cwd = os.getcwd()\\n",\n  "posixpath.py(381):         path = join(cwd, path)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(756):     if file in modulesbyfile:\\n",\n  "inspect.py(759):     main = sys.modules[\'__main__\']\\n",\n  "inspect.py(760):     if not hasattr(object, \'__name__\'):\\n",\n  "inspect.py(761):         return None\\n",\n  "inspect.py(830):     if module:\\n",\n  "inspect.py(833):         lines = linecache.getlines(file)\\n",\n  " --- modulename: linecache, funcname: getlines\\n",\n  "linecache.py(40):     if filename in cache:\\n",\n  "linecache.py(45):     try:\\n",\n  "linecache.py(46):         return updatecache(filename, module_globals)\\n",\n  " --- modulename: linecache, funcname: updatecache\\n",\n  "linecache.py(85):     if filename in cache:\\n",\n  "linecache.py(88):     if not filename or (filename.startswith(\'<\') and filename.endswith(\'>\')):\\n",\n  "linecache.py(89):         return []\\n",\n  "inspect.py(834):     if not lines:\\n",\n  "inspect.py(835):         raise OSError(\'could not get source code\')\\n",\n  "inspect.py(1506):         except OSError:\\n",\n  "inspect.py(1507):             lines = index = None\\n",\n  "inspect.py(1515):     return Traceback(filename, lineno, frame.f_code.co_name, lines, index)\\n",\n  "inspect.py(1532):         framelist.append(FrameInfo(*frameinfo))\\n",\n  "inspect.py(1533):         frame = frame.f_back\\n",\n  "inspect.py(1530):     while frame:\\n",\n  "inspect.py(1531):         frameinfo = (frame,) + getframeinfo(frame, context)\\n",\n  " --- modulename: inspect, funcname: getframeinfo\\n",\n  "inspect.py(1493):     if istraceback(frame):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(1497):         lineno = frame.f_lineno\\n",\n  "inspect.py(1498):     if not isframe(frame):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(1501):     filename = getsourcefile(frame) or getfile(frame)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(20):     except (OSError, ValueError):\\n",\n  "genericpath.py(21):         return False\\n",\n  "inspect.py(709):     if getattr(getmodule(object, filename), \'__loader__\', None) is not None:\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(737):     try:\\n",\n  "inspect.py(738):         file = getabsfile(object, _filename)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(377):         if isinstance(path, bytes):\\n",\n  "posixpath.py(380):             cwd = os.getcwd()\\n",\n  "posixpath.py(381):         path = join(cwd, path)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(756):     if file in modulesbyfile:\\n",\n  "inspect.py(759):     main = sys.modules[\'__main__\']\\n",\n  "inspect.py(760):     if not hasattr(object, \'__name__\'):\\n",\n  "inspect.py(761):         return None\\n",\n  "inspect.py(830):     if module:\\n",\n  "inspect.py(833):         lines = linecache.getlines(file)\\n",\n  " --- modulename: linecache, funcname: getlines\\n",\n  "linecache.py(40):     if filename in cache:\\n",\n  "linecache.py(45):     try:\\n",\n  "linecache.py(46):         return updatecache(filename, module_globals)\\n",\n  " --- modulename: linecache, funcname: updatecache\\n",\n  "linecache.py(85):     if filename in cache:\\n",\n  "linecache.py(88):     if not filename or (filename.startswith(\'<\') and filename.endswith(\'>\')):\\n",\n  "linecache.py(89):         return []\\n",\n  "inspect.py(834):     if not lines:\\n",\n  "inspect.py(835):         raise OSError(\'could not get source code\')\\n",\n  "inspect.py(1506):         except OSError:\\n",\n  "inspect.py(1507):             lines = index = None\\n",\n  "inspect.py(1515):     return Traceback(filename, lineno, frame.f_code.co_name, lines, index)\\n",\n  "inspect.py(1532):         framelist.append(FrameInfo(*frameinfo))\\n",\n  "inspect.py(1533):         frame = frame.f_back\\n",\n  "inspect.py(1530):     while frame:\\n",\n  "inspect.py(1531):         frameinfo = (frame,) + getframeinfo(frame, context)\\n",\n  " --- modulename: inspect, funcname: getframeinfo\\n",\n  "inspect.py(1493):     if istraceback(frame):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(1497):         lineno = frame.f_lineno\\n",\n  "inspect.py(1498):     if not isframe(frame):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(1501):     filename = getsourcefile(frame) or getfile(frame)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(20):     except (OSError, ValueError):\\n",\n  "genericpath.py(21):         return False\\n",\n  "inspect.py(709):     if getattr(getmodule(object, filename), \'__loader__\', None) is not None:\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(737):     try:\\n",\n  "inspect.py(738):         file = getabsfile(object, _filename)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(377):         if isinstance(path, bytes):\\n",\n  "posixpath.py(380):             cwd = os.getcwd()\\n",\n  "posixpath.py(381):         path = join(cwd, path)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(756):     if file in modulesbyfile:\\n",\n  "inspect.py(759):     main = sys.modules[\'__main__\']\\n",\n  "inspect.py(760):     if not hasattr(object, \'__name__\'):\\n",\n  "inspect.py(761):         return None\\n",\n  "inspect.py(712):     if filename in linecache.cache:\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(756):     if file in modulesbyfile:\\n",\n  "inspect.py(759):     main = sys.modules[\'__main__\']\\n",\n  "inspect.py(760):     if not hasattr(object, \'__name__\'):\\n",\n  "inspect.py(761):         return None\\n",\n  "inspect.py(712):     if filename in linecache.cache:\\n",\n  "inspect.py(818):     if file:\\n",\n  "inspect.py(822):         file = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(826):         if not (file.startswith(\'<\') and file.endswith(\'>\')):\\n",\n  "inspect.py(829):     module = getmodule(object, file)\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(737):     try:\\n",\n  "inspect.py(738):         file = getabsfile(object, _filename)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(377):         if isinstance(path, bytes):\\n",\n  "posixpath.py(380):             cwd = os.getcwd()\\n",\n  "posixpath.py(381):         path = join(cwd, path)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(756):     if file in modulesbyfile:\\n",\n  "inspect.py(759):     main = sys.modules[\'__main__\']\\n",\n  "inspect.py(760):     if not hasattr(object, \'__name__\'):\\n",\n  "inspect.py(761):         return None\\n",\n  "inspect.py(712):     if filename in linecache.cache:\\n",\n  "inspect.py(818):     if file:\\n",\n  "inspect.py(822):         file = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(826):         if not (file.startswith(\'<\') and file.endswith(\'>\')):\\n",\n  "inspect.py(829):     module = getmodule(object, file)\\n",\n  " --- modulename: inspect, funcname: getmodule\\n",\n  "inspect.py(729):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(731):     if hasattr(object, \'__module__\'):\\n",\n  "inspect.py(734):     if _filename is not None and _filename in modulesbyfile:\\n",\n  "inspect.py(737):     try:\\n",\n  "inspect.py(738):         file = getabsfile(object, _filename)\\n",\n  " --- modulename: inspect, funcname: getabsfile\\n",\n  "inspect.py(720):     if _filename is None:\\n",\n  "inspect.py(722):     return os.path.normcase(os.path.abspath(_filename))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(377):         if isinstance(path, bytes):\\n",\n  "posixpath.py(380):             cwd = os.getcwd()\\n",\n  "posixpath.py(381):         path = join(cwd, path)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  " --- modulename: posixpath, funcname: normcase\\n",\n  "posixpath.py(54):     return os.fspath(s)\\n",\n  "inspect.py(741):     if file in modulesbyfile:\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(746):         if ismodule(module) and hasattr(module, \'__file__\'):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(747):             f = module.__file__\\n",\n  "inspect.py(748):             if f == _filesbymodname.get(modname, None):\\n",\n  "inspect.py(750):                 continue\\n",\n  "inspect.py(745):     for modname, module in sys.modules.copy().items():\\n",\n  "inspect.py(756):     if file in modulesbyfile:\\n",\n  "inspect.py(759):     main = sys.modules[\'__main__\']\\n",\n  "inspect.py(760):     if not hasattr(object, \'__name__\'):\\n",\n  "inspect.py(761):         return None\\n",\n  "inspect.py(830):     if module:\\n",\n  "inspect.py(833):         lines = linecache.getlines(file)\\n",\n  " --- modulename: linecache, funcname: getlines\\n",\n  "linecache.py(40):     if filename in cache:\\n",\n  "linecache.py(45):     try:\\n",\n  "linecache.py(46):         return updatecache(filename, module_globals)\\n",\n  " --- modulename: linecache, funcname: updatecache\\n",\n  "linecache.py(85):     if filename in cache:\\n",\n  "linecache.py(88):     if not filename or (filename.startswith(\'<\') and filename.endswith(\'>\')):\\n",\n  "linecache.py(89):         return []\\n",\n  "inspect.py(834):     if not lines:\\n",\n  "inspect.py(835):         raise OSError(\'could not get source code\')\\n",\n  "inspect.py(1506):         except OSError:\\n",\n  "inspect.py(1507):             lines = index = None\\n",\n  "inspect.py(1515):     return Traceback(filename, lineno, frame.f_code.co_name, lines, index)\\n",\n  "inspect.py(1532):         framelist.append(FrameInfo(*frameinfo))\\n",\n  "inspect.py(1533):         frame = frame.f_back\\n",\n  "inspect.py(1530):     while frame:\\n",\n  "inspect.py(1531):         frameinfo = (frame,) + getframeinfo(frame, context)\\n",\n  " --- modulename: inspect, funcname: getframeinfo\\n",\n  "inspect.py(1493):     if istraceback(frame):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(1497):         lineno = frame.f_lineno\\n",\n  "inspect.py(1498):     if not isframe(frame):\\n",\n  " --- modulename: inspect, funcname: isframe\\n",\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(1501):     filename = getsourcefile(frame) or getfile(frame)\\n",\n  " --- modulename: inspect, funcname: getsourcefile\\n",\n  "inspect.py(697):     filename = getfile(object)\\n",\n  " --- modulename: inspect, funcname: getfile\\n",\n  "inspect.py(657):     if ismodule(object):\\n",\n  " --- modulename: inspect, funcname: ismodule\\n",\n  "inspect.py(71):     return isinstance(object, types.ModuleType)\\n",\n  "inspect.py(661):     if isclass(object):\\n",\n  " --- modulename: inspect, funcname: isclass\\n",\n  "inspect.py(79):     return isinstance(object, type)\\n",\n  "inspect.py(667):     if ismethod(object):\\n",\n  " --- modulename: inspect, funcname: ismethod\\n",\n  "inspect.py(89):     return isinstance(object, types.MethodType)\\n",\n  "inspect.py(669):     if isfunction(object):\\n",\n  " --- modulename: inspect, funcname: isfunction\\n",\n  "inspect.py(170):     return isinstance(object, types.FunctionType)\\n",\n  "inspect.py(671):     if istraceback(object):\\n",\n  " --- modulename: inspect, funcname: istraceback\\n",\n  "inspect.py(245):     return isinstance(object, types.TracebackType)\\n",\n  "inspect.py(673):     if isframe(object):\\n",\n  " --- modulename: inspect, funcname: isframe\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "inspect.py(259):     return isinstance(object, types.FrameType)\\n",\n  "inspect.py(674):         object = object.f_code\\n",\n  "inspect.py(675):     if iscode(object):\\n",\n  " --- modulename: inspect, funcname: iscode\\n",\n  "inspect.py(284):     return isinstance(object, types.CodeType)\\n",\n  "inspect.py(676):         return object.co_filename\\n",\n  "inspect.py(698):     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(699):     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(700):     if any(filename.endswith(s) for s in all_bytecode_suffixes):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(704):                  importlib.machinery.EXTENSION_SUFFIXES):\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  " --- modulename: inspect, funcname: <genexpr>\\n",\n  "inspect.py(703):     elif any(filename.endswith(s) for s in\\n",\n  "inspect.py(706):     if os.path.exists(filename):\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(552):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(572): <frozen importlib._bootstrap>(671): <frozen importlib._bootstrap>(672): <frozen importlib._bootstrap>(673): <frozen importlib._bootstrap>(674): <frozen importlib._bootstrap>(675): <frozen importlib._bootstrap>(680):  --- modulename: _bootstrap_external, funcname: exec_module\\n",\n  "<frozen importlib._bootstrap_external>(846):  --- modulename: _bootstrap_external, funcname: get_code\\n",\n  "<frozen importlib._bootstrap_external>(923):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper\\n",\n  "<frozen importlib._bootstrap_external>(524): <frozen importlib._bootstrap_external>(526): <frozen importlib._bootstrap_external>(529):  --- modulename: _bootstrap_external, funcname: get_filename\\n",\n  "<frozen importlib._bootstrap_external>(1034): <frozen importlib._bootstrap_external>(924): <frozen importlib._bootstrap_external>(925): <frozen importlib._bootstrap_external>(926): <frozen importlib._bootstrap_external>(927): <frozen importlib._bootstrap_external>(928): <frozen importlib._bootstrap_external>(929): <frozen importlib._bootstrap_external>(930):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(934): <frozen importlib._bootstrap_external>(935):  --- modulename: _bootstrap_external, funcname: path_stats\\n",\n  "<frozen importlib._bootstrap_external>(1079):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1080): <frozen importlib._bootstrap_external>(939): <frozen importlib._bootstrap_external>(940): <frozen importlib._bootstrap_external>(941):  --- modulename: _bootstrap_external, funcname: get_data\\n",\n  "<frozen importlib._bootstrap_external>(1038): <frozen importlib._bootstrap_external>(1039): <frozen importlib._bootstrap_external>(1040): <frozen importlib._bootstrap_external>(946): <frozen importlib._bootstrap_external>(947): <frozen importlib._bootstrap_external>(945): <frozen importlib._bootstrap_external>(949): <frozen importlib._bootstrap_external>(950):  --- modulename: _bootstrap_external, funcname: _classify_pyc\\n",\n  "<frozen importlib._bootstrap_external>(576): <frozen importlib._bootstrap_external>(577): <frozen importlib._bootstrap_external>(581): <frozen importlib._bootstrap_external>(585):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(587): <frozen importlib._bootstrap_external>(590): <frozen importlib._bootstrap_external>(951): <frozen importlib._bootstrap_external>(952): <frozen importlib._bootstrap_external>(953): <frozen importlib._bootstrap_external>(966): <frozen importlib._bootstrap_external>(967): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969): <frozen importlib._bootstrap_external>(970): <frozen importlib._bootstrap_external>(971): <frozen importlib._bootstrap_external>(966):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc\\n",\n  "<frozen importlib._bootstrap_external>(612):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(617):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(976): <frozen importlib._bootstrap_external>(977): <frozen importlib._bootstrap_external>(976):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(978): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(978):  --- modulename: _bootstrap_external, funcname: _compile_bytecode\\n",\n  "<frozen importlib._bootstrap_external>(647): <frozen importlib._bootstrap_external>(648): <frozen importlib._bootstrap_external>(649):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(650): <frozen importlib._bootstrap_external>(651): <frozen importlib._bootstrap_external>(652): <frozen importlib._bootstrap_external>(847): <frozen importlib._bootstrap_external>(850):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228):  --- modulename: glob, funcname: <module>\\n",\n  "glob.py(1): \\"\\"\\"Filename globbing utility.\\"\\"\\"\\n",\n  "glob.py(3): import contextlib\\n",\n  "glob.py(4): import os\\n",\n  "glob.py(5): import re\\n",\n  "glob.py(6): import fnmatch\\n",\n  "glob.py(7): import sys\\n",\n  "glob.py(9): __all__ = [\\"glob\\", \\"iglob\\", \\"escape\\"]\\n",\n  "glob.py(11): def glob(pathname, *, recursive=False):\\n",\n  "glob.py(24): def iglob(pathname, *, recursive=False):\\n",\n  "glob.py(42): def _iglob(pathname, recursive, dironly):\\n",\n  "glob.py(82): def _glob1(dirname, pattern, dironly):\\n",\n  "glob.py(88): def _glob0(dirname, basename, dironly):\\n",\n  "glob.py(101): def glob0(dirname, pattern):\\n",\n  "glob.py(104): def glob1(dirname, pattern):\\n",\n  "glob.py(110): def _glob2(dirname, pattern, dironly):\\n",\n  "glob.py(117): def _iterdir(dirname, dironly):\\n",\n  "glob.py(134): def _listdir(dirname, dironly):\\n",\n  "glob.py(139): def _rlistdir(dirname, dironly):\\n",\n  "glob.py(149): magic_check = re.compile(\'([*?[])\')\\n",\n  " --- modulename: re, funcname: compile\\n",\n  "re.py(252):     return _compile(pattern, flags)\\n",\n  " --- modulename: re, funcname: _compile\\n",\n  "re.py(291):     if isinstance(flags, RegexFlag):\\n",\n  "re.py(293):     try:\\n",\n  "re.py(294):         return _cache[type(pattern), pattern, flags]\\n",\n  "re.py(295):     except KeyError:\\n",\n  "re.py(296):         pass\\n",\n  "re.py(297):     if isinstance(pattern, Pattern):\\n",\n  "re.py(302):     if not sre_compile.isstring(pattern):\\n",\n  " --- modulename: sre_compile, funcname: isstring\\n",\n  "sre_compile.py(596):     return isinstance(obj, (str, bytes))\\n",\n  "re.py(304):     p = sre_compile.compile(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: compile\\n",\n  "sre_compile.py(762):     if isstring(p):\\n",\n  " --- modulename: sre_compile, funcname: isstring\\n",\n  "sre_compile.py(596):     return isinstance(obj, (str, bytes))\\n",\n  "sre_compile.py(763):         pattern = p\\n",\n  "sre_compile.py(764):         p = sre_parse.parse(p, flags)\\n",\n  " --- modulename: sre_parse, funcname: parse\\n",\n  "sre_parse.py(942):     source = Tokenizer(str)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(225):         self.istext = isinstance(string, str)\\n",\n  "sre_parse.py(226):         self.string = string\\n",\n  "sre_parse.py(227):         if not self.istext:\\n",\n  "sre_parse.py(229):         self.decoded_string = string\\n",\n  "sre_parse.py(230):         self.index = 0\\n",\n  "sre_parse.py(231):         self.next = None\\n",\n  "sre_parse.py(232):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(944):     if state is None:\\n",\n  "sre_parse.py(945):         state = State()\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(77):         self.flags = 0\\n",\n  "sre_parse.py(78):         self.groupdict = {}\\n",\n  "sre_parse.py(79):         self.groupwidths = [None]  # group 0\\n",\n  "sre_parse.py(80):         self.lookbehindgroups = None\\n",\n  "sre_parse.py(946):     state.flags = flags\\n",\n  "sre_parse.py(947):     state.str = str\\n",\n  "sre_parse.py(949):     try:\\n",\n  "sre_parse.py(950):         p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(686):             start = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(687):             group = True\\n",\n  "sre_parse.py(688):             name = None\\n",\n  "sre_parse.py(689):             add_flags = 0\\n",\n  "sre_parse.py(690):             del_flags = 0\\n",\n  "sre_parse.py(691):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(829):             if group is not None:\\n",\n  "sre_parse.py(830):                 try:\\n",\n  "sre_parse.py(831):                     group = state.opengroup(name)\\n",\n  " --- modulename: sre_parse, funcname: opengroup\\n",\n  "sre_parse.py(85):         gid = self.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(86):         self.groupwidths.append(None)\\n",\n  "sre_parse.py(87):         if self.groups > MAXGROUPS:\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(89):         if name is not None:\\n",\n  "sre_parse.py(95):         return gid\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(836):             p = _parse_sub(source, state, sub_verbose, nested + 1)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(532):             here = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(534):             set = []\\n",\n  "sre_parse.py(535):             setappend = set.append\\n",\n  "sre_parse.py(538):             if source.next == \'[\':\\n",\n  "sre_parse.py(544):             negate = sourcematch(\\"^\\")\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(552):                     break\\n",\n  "sre_parse.py(605):             set = _uniq(set)\\n",\n  " --- modulename: sre_parse, funcname: _uniq\\n",\n  "sre_parse.py(433):     return list(dict.fromkeys(items))\\n",\n  "sre_parse.py(607):             if _len(set) == 1 and set[0][0] is LITERAL:\\n",\n  "sre_parse.py(614):                 if negate:\\n",\n  "sre_parse.py(618):                 subpatternappend((IN, set))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(449):         return items[0]\\n",\n  "sre_parse.py(837):             if not source.match(\\")\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(237):         except IndexError:\\n",\n  "sre_parse.py(238):             self.next = None\\n",\n  "sre_parse.py(239):             return\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(840):             if group is not None:\\n",\n  "sre_parse.py(841):                 state.closegroup(group, p)\\n",\n  " --- modulename: sre_parse, funcname: closegroup\\n",\n  "sre_parse.py(97):         self.groupwidths[gid] = p.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(842):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(508):             break # end of pattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(857):             group, add_flags, del_flags, p = av\\n",\n  "sre_parse.py(858):             if group is None and not add_flags and not del_flags:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(449):         return items[0]\\n",\n  "sre_parse.py(960):     p.state.flags = fix_flags(str, p.state.flags)\\n",\n  " --- modulename: sre_parse, funcname: fix_flags\\n",\n  "sre_parse.py(925):     if isinstance(src, str):\\n",\n  "sre_parse.py(926):         if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_parse.py(928):         if not flags & SRE_FLAG_ASCII:\\n",\n  "sre_parse.py(929):             flags |= SRE_FLAG_UNICODE\\n",\n  "sre_parse.py(937):     return flags\\n",\n  "sre_parse.py(962):     if source.next is not None:\\n",\n  "sre_parse.py(966):     if flags & SRE_FLAG_DEBUG:\\n",\n  "sre_parse.py(969):     return p\\n",\n  "sre_compile.py(768):     code = _code(p, flags)\\n",\n  " --- modulename: sre_compile, funcname: _code\\n",\n  "sre_compile.py(600):     flags = p.state.flags | flags\\n",\n  "sre_compile.py(601):     code = []\\n",\n  "sre_compile.py(604):     _compile_info(code, p, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile_info\\n",\n  "sre_compile.py(540):     lo, hi = pattern.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(194):                 i, j = av[-1].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(177):             return self.width\\n",\n  "sre_parse.py(195):                 lo = lo + i\\n",\n  "sre_parse.py(196):                 hi = hi + j\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_compile.py(541):     if hi > MAXCODE:\\n",\n  "sre_compile.py(543):     if lo == 0:\\n",\n  "sre_compile.py(547):     prefix = []\\n",\n  "sre_compile.py(548):     prefix_skip = 0\\n",\n  "sre_compile.py(549):     charset = [] # not used\\n",\n  "sre_compile.py(550):     if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):\\n",\n  "sre_compile.py(552):         prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_literal_prefix\\n",\n  "sre_compile.py(463):     prefix = []\\n",\n  "sre_compile.py(464):     prefixappend = prefix.append\\n",\n  "sre_compile.py(465):     prefix_skip = None\\n",\n  "sre_compile.py(466):     iscased = _get_iscased(flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_iscased\\n",\n  "sre_compile.py(454):     if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(455):         return None\\n",\n  "sre_compile.py(467):     for op, av in pattern.data:\\n",\n  "sre_compile.py(468):         if op is LITERAL:\\n",\n  "sre_compile.py(472):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(473):             group, add_flags, del_flags, p = av\\n",\n  "sre_compile.py(474):             flags1 = _combine_flags(flags, add_flags, del_flags)\\n",\n  " --- modulename: sre_compile, funcname: _combine_flags\\n",\n  "sre_compile.py(67):     if add_flags & TYPE_FLAGS:\\n",\n  "sre_compile.py(69):     return (flags | add_flags) & ~del_flags\\n",\n  "sre_compile.py(475):             if flags1 & SRE_FLAG_IGNORECASE and flags1 & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(477):             prefix1, prefix_skip1, got_all = _get_literal_prefix(p, flags1)\\n",\n  " --- modulename: sre_compile, funcname: _get_literal_prefix\\n",\n  "sre_compile.py(463):     prefix = []\\n",\n  "sre_compile.py(464):     prefixappend = prefix.append\\n",\n  "sre_compile.py(465):     prefix_skip = None\\n",\n  "sre_compile.py(466):     iscased = _get_iscased(flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_iscased\\n",\n  "sre_compile.py(454):     if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(455):         return None\\n",\n  "sre_compile.py(467):     for op, av in pattern.data:\\n",\n  "sre_compile.py(468):         if op is LITERAL:\\n",\n  "sre_compile.py(472):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(487):             break\\n",\n  "sre_compile.py(490):     return prefix, prefix_skip, False\\n",\n  "sre_compile.py(478):             if prefix_skip is None:\\n",\n  "sre_compile.py(479):                 if group is not None:\\n",\n  "sre_compile.py(480):                     prefix_skip = len(prefix)\\n",\n  "sre_compile.py(483):             prefix.extend(prefix1)\\n",\n  "sre_compile.py(484):             if not got_all:\\n",\n  "sre_compile.py(485):                 break\\n",\n  "sre_compile.py(490):     return prefix, prefix_skip, False\\n",\n  "sre_compile.py(554):         if not prefix:\\n",\n  "sre_compile.py(555):             charset = _get_charset_prefix(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_charset_prefix\\n",\n  "sre_compile.py(494):         if not pattern.data:\\n",\n  "sre_compile.py(496):         op, av = pattern.data[0]\\n",\n  "sre_compile.py(497):         if op is not SUBPATTERN:\\n",\n  "sre_compile.py(499):         group, add_flags, del_flags, pattern = av\\n",\n  "sre_compile.py(500):         flags = _combine_flags(flags, add_flags, del_flags)\\n",\n  " --- modulename: sre_compile, funcname: _combine_flags\\n",\n  "sre_compile.py(67):     if add_flags & TYPE_FLAGS:\\n",\n  "sre_compile.py(69):     return (flags | add_flags) & ~del_flags\\n",\n  "sre_compile.py(501):         if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(494):         if not pattern.data:\\n",\n  "sre_compile.py(496):         op, av = pattern.data[0]\\n",\n  "sre_compile.py(497):         if op is not SUBPATTERN:\\n",\n  "sre_compile.py(498):             break\\n",\n  "sre_compile.py(504):     iscased = _get_iscased(flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_iscased\\n",\n  "sre_compile.py(454):     if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(455):         return None\\n",\n  "sre_compile.py(505):     if op is LITERAL:\\n",\n  "sre_compile.py(509):     elif op is BRANCH:\\n",\n  "sre_compile.py(521):     elif op is IN:\\n",\n  "sre_compile.py(522):         charset = av\\n",\n  "sre_compile.py(523):         if iscased:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(533):         return charset\\n",\n  "sre_compile.py(561):     emit = code.append\\n",\n  "sre_compile.py(562):     emit(INFO)\\n",\n  "sre_compile.py(563):     skip = len(code); emit(0)\\n",\n  "sre_compile.py(565):     mask = 0\\n",\n  "sre_compile.py(566):     if prefix:\\n",\n  "sre_compile.py(570):     elif charset:\\n",\n  "sre_compile.py(571):         mask = mask | SRE_INFO_CHARSET\\n",\n  "sre_compile.py(572):     emit(mask)\\n",\n  "sre_compile.py(574):     if lo < MAXCODE:\\n",\n  "sre_compile.py(575):         emit(lo)\\n",\n  "sre_compile.py(579):     emit(min(hi, MAXCODE))\\n",\n  "sre_compile.py(581):     if prefix:\\n",\n  "sre_compile.py(589):     elif charset:\\n",\n  "sre_compile.py(590):         charset, hascased = _optimize_charset(charset)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(341):             runs = None\\n",\n  "sre_compile.py(342):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(363):     if len(charmap) == 256:\\n",\n  "sre_compile.py(364):         data = _mk_bitmap(charmap)\\n",\n  " --- modulename: sre_compile, funcname: _mk_bitmap\\n",\n  "sre_compile.py(412):     s = bits.translate(_BITS_TRANS)[::-1]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  " --- modulename: sre_compile, funcname: <listcomp>\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(365):         out.append((CHARSET, data))\\n",\n  "sre_compile.py(366):         out += tail\\n",\n  "sre_compile.py(367):         return out, hascased\\n",\n  "sre_compile.py(591):         assert not hascased\\n",\n  "sre_compile.py(592):         _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n",\n  "sre_compile.py(262):             code.extend(av)\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(593):     code[skip] = len(code) - skip\\n",\n  "sre_compile.py(607):     _compile(code, p.data, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(163):             group, add_flags, del_flags, p = av\\n",\n  "sre_compile.py(164):             if group:\\n",\n  "sre_compile.py(165):                 emit(MARK)\\n",\n  "sre_compile.py(166):                 emit((group-1)*2)\\n",\n  "sre_compile.py(168):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))\\n",\n  " --- modulename: sre_compile, funcname: _combine_flags\\n",\n  "sre_compile.py(67):     if add_flags & TYPE_FLAGS:\\n",\n  "sre_compile.py(69):     return (flags | add_flags) & ~del_flags\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(341):             runs = None\\n",\n  "sre_compile.py(342):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(363):     if len(charmap) == 256:\\n",\n  "sre_compile.py(364):         data = _mk_bitmap(charmap)\\n",\n  " --- modulename: sre_compile, funcname: _mk_bitmap\\n",\n  "sre_compile.py(412):     s = bits.translate(_BITS_TRANS)[::-1]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  " --- modulename: sre_compile, funcname: <listcomp>\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(365):         out.append((CHARSET, data))\\n",\n  "sre_compile.py(366):         out += tail\\n",\n  "sre_compile.py(367):         return out, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(124):                 emit(IN)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n",\n  "sre_compile.py(262):             code.extend(av)\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(169):             if group:\\n",\n  "sre_compile.py(170):                 emit(MARK)\\n",\n  "sre_compile.py(171):                 emit((group-1)*2+1)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(609):     code.append(SUCCESS)\\n",\n  "sre_compile.py(611):     return code\\n",\n  "sre_compile.py(770):     if flags & SRE_FLAG_DEBUG:\\n",\n  "sre_compile.py(775):     groupindex = p.state.groupdict\\n",\n  "sre_compile.py(776):     indexgroup = [None] * p.state.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(777):     for k, i in groupindex.items():\\n",\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "sre_compile.py(781):         pattern, flags | p.state.flags, code,\\n",\n  "sre_compile.py(782):         p.state.groups-1,\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(783):         groupindex, tuple(indexgroup)\\n",\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "re.py(305):     if not (flags & DEBUG):\\n",\n  " --- modulename: enum, funcname: __and__\\n",\n  "enum.py(978):         if not isinstance(other, (self.__class__, int)):\\n",\n  "enum.py(980):         return self.__class__(self._value_ & self.__class__(other)._value_)\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  "re.py(306):         if len(_cache) >= _MAXCACHE:\\n",\n  "re.py(312):         _cache[type(pattern), pattern, flags] = p\\n",\n  "re.py(313):     return p\\n",\n  "glob.py(150): magic_check_bytes = re.compile(b\'([*?[])\')\\n",\n  " --- modulename: re, funcname: compile\\n",\n  "re.py(252):     return _compile(pattern, flags)\\n",\n  " --- modulename: re, funcname: _compile\\n",\n  "re.py(291):     if isinstance(flags, RegexFlag):\\n",\n  "re.py(293):     try:\\n",\n  "re.py(294):         return _cache[type(pattern), pattern, flags]\\n",\n  "re.py(295):     except KeyError:\\n",\n  "re.py(296):         pass\\n",\n  "re.py(297):     if isinstance(pattern, Pattern):\\n",\n  "re.py(302):     if not sre_compile.isstring(pattern):\\n",\n  " --- modulename: sre_compile, funcname: isstring\\n",\n  "sre_compile.py(596):     return isinstance(obj, (str, bytes))\\n",\n  "re.py(304):     p = sre_compile.compile(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: compile\\n",\n  "sre_compile.py(762):     if isstring(p):\\n",\n  " --- modulename: sre_compile, funcname: isstring\\n",\n  "sre_compile.py(596):     return isinstance(obj, (str, bytes))\\n",\n  "sre_compile.py(763):         pattern = p\\n",\n  "sre_compile.py(764):         p = sre_parse.parse(p, flags)\\n",\n  " --- modulename: sre_parse, funcname: parse\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(942):     source = Tokenizer(str)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(225):         self.istext = isinstance(string, str)\\n",\n  "sre_parse.py(226):         self.string = string\\n",\n  "sre_parse.py(227):         if not self.istext:\\n",\n  "sre_parse.py(228):             string = str(string, \'latin1\')\\n",\n  "sre_parse.py(229):         self.decoded_string = string\\n",\n  "sre_parse.py(230):         self.index = 0\\n",\n  "sre_parse.py(231):         self.next = None\\n",\n  "sre_parse.py(232):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(944):     if state is None:\\n",\n  "sre_parse.py(945):         state = State()\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(77):         self.flags = 0\\n",\n  "sre_parse.py(78):         self.groupdict = {}\\n",\n  "sre_parse.py(79):         self.groupwidths = [None]  # group 0\\n",\n  "sre_parse.py(80):         self.lookbehindgroups = None\\n",\n  "sre_parse.py(946):     state.flags = flags\\n",\n  "sre_parse.py(947):     state.str = str\\n",\n  "sre_parse.py(949):     try:\\n",\n  "sre_parse.py(950):         p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(686):             start = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(687):             group = True\\n",\n  "sre_parse.py(688):             name = None\\n",\n  "sre_parse.py(689):             add_flags = 0\\n",\n  "sre_parse.py(690):             del_flags = 0\\n",\n  "sre_parse.py(691):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(829):             if group is not None:\\n",\n  "sre_parse.py(830):                 try:\\n",\n  "sre_parse.py(831):                     group = state.opengroup(name)\\n",\n  " --- modulename: sre_parse, funcname: opengroup\\n",\n  "sre_parse.py(85):         gid = self.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(86):         self.groupwidths.append(None)\\n",\n  "sre_parse.py(87):         if self.groups > MAXGROUPS:\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(89):         if name is not None:\\n",\n  "sre_parse.py(95):         return gid\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(836):             p = _parse_sub(source, state, sub_verbose, nested + 1)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(532):             here = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(534):             set = []\\n",\n  "sre_parse.py(535):             setappend = set.append\\n",\n  "sre_parse.py(538):             if source.next == \'[\':\\n",\n  "sre_parse.py(544):             negate = sourcematch(\\"^\\")\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "enum.py(641):                     if target not in {\\n",\n  "enum.py(639):                 for possible in (member_type, first_enum):\\n",\n  "enum.py(649):                 if __new__ is not None:\\n",\n  "enum.py(638):             for method in (\'__new_member__\', \'__new__\'):\\n",\n  "enum.py(639):                 for possible in (member_type, first_enum):\\n",\n  "enum.py(640):                     target = getattr(possible, method, None)\\n",\n  "enum.py(641):                     if target not in {\\n",\n  "enum.py(642):                             None,\\n",\n  "enum.py(643):                             None.__new__,\\n",\n  "enum.py(644):                             object.__new__,\\n",\n  "enum.py(645):                             Enum.__new__,\\n",\n  "enum.py(641):                     if target not in {\\n",\n  "enum.py(647):                         __new__ = target\\n",\n  "enum.py(648):                         break\\n",\n  "enum.py(649):                 if __new__ is not None:\\n",\n  "enum.py(650):                     break\\n",\n  "enum.py(657):         if __new__ is object.__new__:\\n",\n  "enum.py(660):             use_args = True\\n",\n  "enum.py(661):         return __new__, save_new, use_args\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  " --- modulename: enum, funcname: <dictcomp>\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(197):         enum_members = {k: classdict[k] for k in classdict._member_names}\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(199):             del classdict[name]\\n",\n  "enum.py(198):         for name in classdict._member_names:\\n",\n  "enum.py(202):         _order_ = classdict.pop(\'_order_\', None)\\n",\n  "enum.py(205):         invalid_names = set(enum_members) & {\'mro\', \'\'}\\n",\n  "enum.py(206):         if invalid_names:\\n",\n  "enum.py(211):         if \'__doc__\' not in classdict:\\n",\n  "enum.py(212):             classdict[\'__doc__\'] = \'An enumeration.\'\\n",\n  " --- modulename: enum, funcname: __setitem__\\n",\n  "enum.py(97):         if _is_private(self._cls_name, key):\\n",\n  " --- modulename: enum, funcname: _is_private\\n",\n  "enum.py(46):     pattern = \'_%s__\' % (cls_name, )\\n",\n  "enum.py(48):             len(name) >= 5\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(49):             and name.startswith(pattern)\\n",\n  "enum.py(47):     if (\\n",\n  "enum.py(55):         return False\\n",\n  "enum.py(105):         if _is_sunder(key):\\n",\n  " --- modulename: enum, funcname: _is_sunder\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(39):             name[0] == name[-1] == \'_\' and\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(40):             name[1:2] != \'_\' and\\n",\n  "enum.py(38):             len(name) > 2 and\\n",\n  "enum.py(37):     return (\\n",\n  "enum.py(128):         elif _is_dunder(key):\\n",\n  " --- modulename: enum, funcname: _is_dunder\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(28):             name[:2] == name[-2:] == \'__\' and\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(29):             name[2] != \'_\' and\\n",\n  "enum.py(27):             len(name) > 4 and\\n",\n  "enum.py(30):             name[-3] != \'_\'\\n",\n  "enum.py(26):     return (\\n",\n  "enum.py(129):             if key == \'__order__\':\\n",\n  "enum.py(152):         super().__setitem__(key, value)\\n",\n  "enum.py(214):         enum_class = super().__new__(metacls, cls, bases, classdict, **kwds)\\n",\n  "enum.py(215):         enum_class._member_names_ = []               # names in definition order\\n",\n  " --- modulename: enum, funcname: __setattr__\\n",\n  "enum.py(470):         member_map = cls.__dict__.get(\'_member_map_\', {})\\n",\n  "enum.py(471):         if name in member_map:\\n",\n  "enum.py(473):         super().__setattr__(name, value)\\n",\n  "enum.py(216):         enum_class._member_map_ = {}                 # name->value map\\n",\n  " --- modulename: enum, funcname: __setattr__\\n",\n  "enum.py(470):         member_map = cls.__dict__.get(\'_member_map_\', {})\\n",\n  "enum.py(471):         if name in member_map:\\n",\n  "enum.py(473):         super().__setattr__(name, value)\\n",\n  "enum.py(217):         enum_class._member_type_ = member_type\\n",\n  " --- modulename: enum, funcname: __setattr__\\n",\n  "enum.py(470):         member_map = cls.__dict__.get(\'_member_map_\', {})\\n",\n  "enum.py(471):         if name in member_map:\\n",\n  "enum.py(473):         super().__setattr__(name, value)\\n",\n  "enum.py(221):         dynamic_attributes = {\\n",\n  "enum.py(222):                 k for c in enum_class.mro()\\n",\n  "enum.py(221):         dynamic_attributes = {\\n",\n  " --- modulename: enum, funcname: <setcomp>\\n",\n  "enum.py(221):         dynamic_attributes = {\\n",\n  "enum.py(222):                 k for c in enum_class.mro()\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(221):         dynamic_attributes = {\\n",\n  "enum.py(222):                 k for c in enum_class.mro()\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(221):         dynamic_attributes = {\\n",\n  "enum.py(222):                 k for c in enum_class.mro()\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(221):         dynamic_attributes = {\\n",\n  "enum.py(222):                 k for c in enum_class.mro()\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(222):                 k for c in enum_class.mro()\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(222):                 k for c in enum_class.mro()\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(221):         dynamic_attributes = {\\n",\n  "enum.py(222):                 k for c in enum_class.mro()\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(224):                 if isinstance(v, DynamicClassAttribute)\\n",\n  "enum.py(223):                 for k, v in c.__dict__.items()\\n",\n  "enum.py(221):         dynamic_attributes = {\\n",\n  "enum.py(228):         enum_class._value2member_map_ = {}\\n",\n  " --- modulename: enum, funcname: __setattr__\\n",\n  "enum.py(470):         member_map = cls.__dict__.get(\'_member_map_\', {})\\n",\n  "enum.py(471):         if name in member_map:\\n",\n  "enum.py(473):         super().__setattr__(name, value)\\n",\n  "enum.py(240):         if \'__reduce_ex__\' not in classdict:\\n",\n  "enum.py(241):             if member_type is not object:\\n",\n  "enum.py(242):                 methods = (\'__getnewargs_ex__\', \'__getnewargs__\',\\n",\n  "enum.py(244):                 if not any(m in member_type.__dict__ for m in methods):\\n",\n  " --- modulename: enum, funcname: <genexpr>\\n",\n  "enum.py(244):                 if not any(m in member_type.__dict__ for m in methods):\\n",\n  " --- modulename: enum, funcname: <genexpr>\\n",\n  "enum.py(244):                 if not any(m in member_type.__dict__ for m in methods):\\n",\n  " --- modulename: enum, funcname: <genexpr>\\n",\n  "enum.py(275):         for member_name in classdict._member_names:\\n",\n  "enum.py(276):             value = enum_members[member_name]\\n",\n  "enum.py(277):             if not isinstance(value, tuple):\\n",\n  "enum.py(278):                 args = (value, )\\n",\n  "enum.py(281):             if member_type is tuple:   # special case for tuple enums\\n",\n  "enum.py(283):             if not use_args:\\n",\n  "enum.py(288):                 enum_member = __new__(enum_class, *args)\\n",\n  "enum.py(289):                 if not hasattr(enum_member, \'_value_\'):\\n",\n  "enum.py(290):                     if member_type is object:\\n",\n  "enum.py(293):                         enum_member._value_ = member_type(*args)\\n",\n  "enum.py(294):             value = enum_member._value_\\n",\n  "enum.py(295):             enum_member._name_ = member_name\\n",\n  "enum.py(296):             enum_member.__objclass__ = enum_class\\n",\n  "enum.py(297):             enum_member.__init__(*args)\\n",\n  "enum.py(300):             for name, canonical_member in enum_class._member_map_.items():\\n",\n  "enum.py(306):                 enum_class._member_names_.append(member_name)\\n",\n  "enum.py(309):             if member_name not in dynamic_attributes:\\n",\n  "enum.py(310):                 setattr(enum_class, member_name, enum_member)\\n",\n  " --- modulename: enum, funcname: __setattr__\\n",\n  "enum.py(470):         member_map = cls.__dict__.get(\'_member_map_\', {})\\n",\n  "enum.py(471):         if name in member_map:\\n",\n  "enum.py(473):         super().__setattr__(name, value)\\n",\n  "enum.py(312):             enum_class._member_map_[member_name] = enum_member\\n",\n  "enum.py(313):             try:\\n",\n  "enum.py(317):                 enum_class._value2member_map_[value] = enum_member\\n",\n  "enum.py(275):         for member_name in classdict._member_names:\\n",\n  "enum.py(276):             value = enum_members[member_name]\\n",\n  "enum.py(277):             if not isinstance(value, tuple):\\n",\n  "enum.py(278):                 args = (value, )\\n",\n  "enum.py(281):             if member_type is tuple:   # special case for tuple enums\\n",\n  "enum.py(283):             if not use_args:\\n",\n  "enum.py(288):                 enum_member = __new__(enum_class, *args)\\n",\n  "enum.py(289):                 if not hasattr(enum_member, \'_value_\'):\\n",\n  "enum.py(290):                     if member_type is object:\\n",\n  "enum.py(293):                         enum_member._value_ = member_type(*args)\\n",\n  "enum.py(294):             value = enum_member._value_\\n",\n  "enum.py(295):             enum_member._name_ = member_name\\n",\n  "enum.py(296):             enum_member.__objclass__ = enum_class\\n",\n  "enum.py(297):             enum_member.__init__(*args)\\n",\n  "enum.py(300):             for name, canonical_member in enum_class._member_map_.items():\\n",\n  "enum.py(301):                 if canonical_member._value_ == enum_member._value_:\\n",\n  "enum.py(300):             for name, canonical_member in enum_class._member_map_.items():\\n",\n  "enum.py(306):                 enum_class._member_names_.append(member_name)\\n",\n  "enum.py(309):             if member_name not in dynamic_attributes:\\n",\n  "enum.py(310):                 setattr(enum_class, member_name, enum_member)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: enum, funcname: __setattr__\\n",\n  "enum.py(470):         member_map = cls.__dict__.get(\'_member_map_\', {})\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1555):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n",\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(151): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1557): <frozen importlib._bootstrap_external>(1556):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1510):  --- modulename: _bootstrap_external, funcname: __init__\\n",\n  "<frozen importlib._bootstrap_external>(1156): <frozen importlib._bootstrap_external>(1157):  --- modulename: _bootstrap_external, funcname: _path_isabs\\n",\n  "<frozen importlib._bootstrap_external>(177): <frozen importlib._bootstrap_external>(1162): <frozen importlib._bootstrap_external>(1511): <frozen importlib._bootstrap_external>(1512): <frozen importlib._bootstrap_external>(1511):  --- modulename: _bootstrap_external, funcname: spec_from_file_location\\n",\n  "<frozen importlib._bootstrap_external>(708): <frozen importlib._bootstrap_external>(720): <frozen importlib._bootstrap_external>(728):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(353): <frozen importlib._bootstrap>(354): <frozen importlib._bootstrap>(355): <frozen importlib._bootstrap>(356): <frozen importlib._bootstrap>(357): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap_external>(729): <frozen importlib._bootstrap_external>(732): <frozen importlib._bootstrap_external>(742): <frozen importlib._bootstrap_external>(753): <frozen importlib._bootstrap_external>(754): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1400): <frozen importlib._bootstrap_external>(1401): <frozen importlib._bootstrap_external>(1424): <frozen importlib._bootstrap_external>(1426): <frozen importlib._bootstrap_external>(1437):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(928): <frozen importlib._bootstrap>(943): <frozen importlib._bootstrap>(983): <frozen importlib._bootstrap>(986):  --- modulename: _bootstrap, funcname: _load_unlocked\\n",\n  "<frozen importlib._bootstrap>(661): <frozen importlib._bootstrap>(663): <frozen importlib._bootstrap>(666):  --- modulename: _bootstrap, funcname: module_from_spec\\n",\n  "<frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(562): <frozen importlib._bootstrap>(565):  --- modulename: _bootstrap_external, funcname: create_module\\n",\n  "<frozen importlib._bootstrap_external>(1173): <frozen importlib._bootstrap_external>(1174): <frozen importlib._bootstrap_external>(1173):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228): <frozen importlib._bootstrap_external>(1175): <frozen importlib._bootstrap_external>(1176): <frozen importlib._bootstrap_external>(1175):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1177): <frozen importlib._bootstrap>(569): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap, funcname: _init_module_attrs\\n",\n  "<frozen importlib._bootstrap>(490): <frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(497): <frozen importlib._bootstrap>(498): <frozen importlib._bootstrap>(519): <frozen importlib._bootstrap>(520): <frozen importlib._bootstrap>(524): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526):  --- modulename: _bootstrap, funcname: parent\\n",\n  "<frozen importlib._bootstrap>(401): <frozen importlib._bootstrap>(402): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(535): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(542):  --- modulename: _bootstrap, funcname: has_location\\n",\n  "<frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(543): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(388): <frozen importlib._bootstrap>(389): <frozen importlib._bootstrap>(391):  --- modulename: _bootstrap_external, funcname: _get_cached\\n",\n  "<frozen importlib._bootstrap_external>(492): <frozen importlib._bootstrap_external>(497): <frozen importlib._bootstrap_external>(500): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(572): <frozen importlib._bootstrap>(671): <frozen importlib._bootstrap>(672): <frozen importlib._bootstrap>(673): <frozen importlib._bootstrap>(674): <frozen importlib._bootstrap>(675): <frozen importlib._bootstrap>(680):  --- modulename: _bootstrap_external, funcname: exec_module\\n",\n  "<frozen importlib._bootstrap_external>(1181):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228): <frozen importlib._bootstrap_external>(1182): <frozen importlib._bootstrap_external>(1183): <frozen importlib._bootstrap_external>(1182):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap>(691): <frozen importlib._bootstrap>(692): <frozen importlib._bootstrap>(693):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap>(695): <frozen importlib._bootstrap>(697): <frozen importlib._bootstrap>(987): <frozen importlib._bootstrap>(996):  --- modulename: _bootstrap, funcname: __exit__\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(161):  --- modulename: _bootstrap, funcname: release\\n",\n  "<frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(115): <frozen importlib._bootstrap>(117): <frozen importlib._bootstrap>(118): <frozen importlib._bootstrap>(119): <frozen importlib._bootstrap>(120): <frozen importlib._bootstrap>(121):  --- modulename: _bootstrap, funcname: cb\\n",\n  "<frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(191): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(194): subprocess.py(80):     import selectors\\n",\n  " --- modulename: _bootstrap, funcname: _find_and_load\\n",\n  "<frozen importlib._bootstrap>(1004):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(153): <frozen importlib._bootstrap>(154):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(157):  --- modulename: _bootstrap, funcname: _get_module_lock\\n",\n  "<frozen importlib._bootstrap>(172): <frozen importlib._bootstrap>(173): <frozen importlib._bootstrap>(174): <frozen importlib._bootstrap>(175): <frozen importlib._bootstrap>(176): <frozen importlib._bootstrap>(177): <frozen importlib._bootstrap>(179): <frozen importlib._bootstrap>(180): <frozen importlib._bootstrap>(183):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(59): <frozen importlib._bootstrap>(60): <frozen importlib._bootstrap>(61): <frozen importlib._bootstrap>(62): <frozen importlib._bootstrap>(63): <frozen importlib._bootstrap>(64): <frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(196): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(158):  --- modulename: _bootstrap, funcname: acquire\\n",\n  "<frozen importlib._bootstrap>(93): <frozen importlib._bootstrap>(94): <frozen importlib._bootstrap>(95): <frozen importlib._bootstrap>(97): <frozen importlib._bootstrap>(98): <frozen importlib._bootstrap>(99): <frozen importlib._bootstrap>(100): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(1005): <frozen importlib._bootstrap>(1006): <frozen importlib._bootstrap>(1007):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked\\n",\n  "<frozen importlib._bootstrap>(968): <frozen importlib._bootstrap>(969): <frozen importlib._bootstrap>(970): <frozen importlib._bootstrap>(982):  --- modulename: _bootstrap, funcname: _find_spec\\n",\n  "<frozen importlib._bootstrap>(903): <frozen importlib._bootstrap>(904): <frozen importlib._bootstrap>(909): <frozen importlib._bootstrap>(915): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: __init__, funcname: find_spec\\n",\n  "__init__.py(85):         if path is not None:\\n",\n  "__init__.py(88):         method_name = \'spec_for_{fullname}\'.format(**locals())\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  "__init__.py(90):         return method()\\n",\n  " --- modulename: __init__, funcname: <lambda>\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  " --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(738): <frozen importlib._bootstrap>(740): <frozen importlib._bootstrap>(743):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(813): <frozen importlib._bootstrap>(816):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1421): <frozen importlib._bootstrap_external>(1422): <frozen importlib._bootstrap_external>(1423):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1388): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1555):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n",\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(151): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1557): <frozen importlib._bootstrap_external>(1556):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1510):  --- modulename: _bootstrap_external, funcname: __init__\\n",\n  "<frozen importlib._bootstrap_external>(1009): <frozen importlib._bootstrap_external>(1010): <frozen importlib._bootstrap_external>(1511): <frozen importlib._bootstrap_external>(1512): <frozen importlib._bootstrap_external>(1511):  --- modulename: _bootstrap_external, funcname: spec_from_file_location\\n",\n  "<frozen importlib._bootstrap_external>(708): <frozen importlib._bootstrap_external>(720): <frozen importlib._bootstrap_external>(728):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(353): <frozen importlib._bootstrap>(354): <frozen importlib._bootstrap>(355): <frozen importlib._bootstrap>(356): <frozen importlib._bootstrap>(357): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap_external>(729): <frozen importlib._bootstrap_external>(732): <frozen importlib._bootstrap_external>(742): <frozen importlib._bootstrap_external>(753): <frozen importlib._bootstrap_external>(754): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1400): <frozen importlib._bootstrap_external>(1401): <frozen importlib._bootstrap_external>(1424): <frozen importlib._bootstrap_external>(1426): <frozen importlib._bootstrap_external>(1437):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(928): <frozen importlib._bootstrap>(943): <frozen importlib._bootstrap>(983): <frozen importlib._bootstrap>(986):  --- modulename: _bootstrap, funcname: _load_unlocked\\n",\n  "<frozen importlib._bootstrap>(661): <frozen importlib._bootstrap>(663): <frozen importlib._bootstrap>(666):  --- modulename: _bootstrap, funcname: module_from_spec\\n",\n  "<frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(562): <frozen importlib._bootstrap>(565):  --- modulename: _bootstrap_external, funcname: create_module\\n",\n  "<frozen importlib._bootstrap_external>(842): <frozen importlib._bootstrap>(569): <frozen importlib._bootstrap>(570):  --- modulename: _bootstrap, funcname: _new_module\\n",\n  "<frozen importlib._bootstrap>(36): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap, funcname: _init_module_attrs\\n",\n  "<frozen importlib._bootstrap>(490): <frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(497): <frozen importlib._bootstrap>(498): <frozen importlib._bootstrap>(519): <frozen importlib._bootstrap>(520): <frozen importlib._bootstrap>(524): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526):  --- modulename: _bootstrap, funcname: parent\\n",\n  "<frozen importlib._bootstrap>(401): <frozen importlib._bootstrap>(402): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(535): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(542):  --- modulename: _bootstrap, funcname: has_location\\n",\n  "<frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(543): <frozen importlib._bootstrap>(544): <frozen importlib._bootstrap>(545): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(388): <frozen importlib._bootstrap>(389): <frozen importlib._bootstrap>(391):  --- modulename: _bootstrap_external, funcname: _get_cached\\n",\n  "<frozen importlib._bootstrap_external>(492): <frozen importlib._bootstrap_external>(493): <frozen importlib._bootstrap_external>(494):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(552):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(572): <frozen importlib._bootstrap>(671): <frozen importlib._bootstrap>(672): <frozen importlib._bootstrap>(673): <frozen importlib._bootstrap>(674): <frozen importlib._bootstrap>(675): <frozen importlib._bootstrap>(680):  --- modulename: _bootstrap_external, funcname: exec_module\\n",\n  "<frozen importlib._bootstrap_external>(846):  --- modulename: _bootstrap_external, funcname: get_code\\n",\n  "<frozen importlib._bootstrap_external>(923):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper\\n",\n  "<frozen importlib._bootstrap_external>(524): <frozen importlib._bootstrap_external>(526): <frozen importlib._bootstrap_external>(529):  --- modulename: _bootstrap_external, funcname: get_filename\\n",\n  "<frozen importlib._bootstrap_external>(1034): <frozen importlib._bootstrap_external>(924): <frozen importlib._bootstrap_external>(925): <frozen importlib._bootstrap_external>(926): <frozen importlib._bootstrap_external>(927): <frozen importlib._bootstrap_external>(928): <frozen importlib._bootstrap_external>(929): <frozen importlib._bootstrap_external>(930):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(934): <frozen importlib._bootstrap_external>(935):  --- modulename: _bootstrap_external, funcname: path_stats\\n",\n  "<frozen importlib._bootstrap_external>(1079):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1080): <frozen importlib._bootstrap_external>(939): <frozen importlib._bootstrap_external>(940): <frozen importlib._bootstrap_external>(941):  --- modulename: _bootstrap_external, funcname: get_data\\n",\n  "<frozen importlib._bootstrap_external>(1038): <frozen importlib._bootstrap_external>(1039): <frozen importlib._bootstrap_external>(1040): <frozen importlib._bootstrap_external>(946): <frozen importlib._bootstrap_external>(947): <frozen importlib._bootstrap_external>(945): <frozen importlib._bootstrap_external>(949): <frozen importlib._bootstrap_external>(950):  --- modulename: _bootstrap_external, funcname: _classify_pyc\\n",\n  "<frozen importlib._bootstrap_external>(576): <frozen importlib._bootstrap_external>(577): <frozen importlib._bootstrap_external>(581): <frozen importlib._bootstrap_external>(585):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(587): <frozen importlib._bootstrap_external>(590): <frozen importlib._bootstrap_external>(951): <frozen importlib._bootstrap_external>(952): <frozen importlib._bootstrap_external>(953): <frozen importlib._bootstrap_external>(966): <frozen importlib._bootstrap_external>(967): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969): <frozen importlib._bootstrap_external>(970): <frozen importlib._bootstrap_external>(971): <frozen importlib._bootstrap_external>(966):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc\\n",\n  "<frozen importlib._bootstrap_external>(612):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(617):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(976): <frozen importlib._bootstrap_external>(977): <frozen importlib._bootstrap_external>(976):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(978): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(978):  --- modulename: _bootstrap_external, funcname: _compile_bytecode\\n",\n  "<frozen importlib._bootstrap_external>(647): <frozen importlib._bootstrap_external>(648): <frozen importlib._bootstrap_external>(649):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(650): <frozen importlib._bootstrap_external>(651): <frozen importlib._bootstrap_external>(652): <frozen importlib._bootstrap_external>(847): <frozen importlib._bootstrap_external>(850):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228):  --- modulename: selectors, funcname: <module>\\n",\n  "selectors.py(1): \\"\\"\\"Selectors module.\\n",\n  "selectors.py(8): from abc import ABCMeta, abstractmethod\\n",\n  "selectors.py(9): from collections import namedtuple\\n",\n  " --- modulename: _bootstrap, funcname: _handle_fromlist\\n",\n  "<frozen importlib._bootstrap>(1043): <frozen importlib._bootstrap>(1044): <frozen importlib._bootstrap>(1051): <frozen importlib._bootstrap>(1055): <frozen importlib._bootstrap>(1043): <frozen importlib._bootstrap>(1067): selectors.py(10): from collections.abc import Mapping\\n",\n  "selectors.py(11): import math\\n",\n  "selectors.py(12): import select\\n",\n  "selectors.py(13): import sys\\n",\n  "selectors.py(17): EVENT_READ = (1 << 0)\\n",\n  "selectors.py(18): EVENT_WRITE = (1 << 1)\\n",\n  "selectors.py(21): def _fileobj_to_fd(fileobj):\\n",\n  "selectors.py(46): SelectorKey = namedtuple(\'SelectorKey\', [\'fileobj\', \'fd\', \'events\', \'data\'])\\n",\n  " --- modulename: __init__, funcname: namedtuple\\n",\n  "__init__.py(371):     if isinstance(field_names, str):\\n",\n  "__init__.py(373):     field_names = list(map(str, field_names))\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "__init__.py(374):     typename = _sys.intern(str(typename))\\n",\n  "__init__.py(376):     if rename:\\n",\n  "__init__.py(386):     for name in [typename] + field_names:\\n",\n  "__init__.py(387):         if type(name) is not str:\\n",\n  "__init__.py(389):         if not name.isidentifier():\\n",\n  "__init__.py(392):         if _iskeyword(name):\\n",\n  "__init__.py(386):     for name in [typename] + field_names:\\n",\n  "__init__.py(387):         if type(name) is not str:\\n",\n  "__init__.py(389):         if not name.isidentifier():\\n",\n  "__init__.py(392):         if _iskeyword(name):\\n",\n  "__init__.py(386):     for name in [typename] + field_names:\\n",\n  "__init__.py(387):         if type(name) is not str:\\n",\n  "__init__.py(389):         if not name.isidentifier():\\n",\n  "__init__.py(392):         if _iskeyword(name):\\n",\n  "__init__.py(386):     for name in [typename] + field_names:\\n",\n  "__init__.py(387):         if type(name) is not str:\\n",\n  "__init__.py(389):         if not name.isidentifier():\\n",\n  "__init__.py(392):         if _iskeyword(name):\\n",\n  "__init__.py(386):     for name in [typename] + field_names:\\n",\n  "__init__.py(387):         if type(name) is not str:\\n",\n  "__init__.py(389):         if not name.isidentifier():\\n",\n  "__init__.py(392):         if _iskeyword(name):\\n",\n  "__init__.py(386):     for name in [typename] + field_names:\\n",\n  "__init__.py(396):     seen = set()\\n",\n  "__init__.py(397):     for name in field_names:\\n",\n  "__init__.py(398):         if name.startswith(\'_\') and not rename:\\n",\n  "__init__.py(401):         if name in seen:\\n",\n  "__init__.py(403):         seen.add(name)\\n",\n  "__init__.py(397):     for name in field_names:\\n",\n  "__init__.py(398):         if name.startswith(\'_\') and not rename:\\n",\n  "__init__.py(401):         if name in seen:\\n",\n  "__init__.py(403):         seen.add(name)\\n",\n  "__init__.py(397):     for name in field_names:\\n",\n  "__init__.py(398):         if name.startswith(\'_\') and not rename:\\n",\n  "__init__.py(401):         if name in seen:\\n",\n  "__init__.py(403):         seen.add(name)\\n",\n  "__init__.py(397):     for name in field_names:\\n",\n  "__init__.py(398):         if name.startswith(\'_\') and not rename:\\n",\n  "__init__.py(401):         if name in seen:\\n",\n  "__init__.py(403):         seen.add(name)\\n",\n  "__init__.py(397):     for name in field_names:\\n",\n  "__init__.py(405):     field_defaults = {}\\n",\n  "__init__.py(406):     if defaults is not None:\\n",\n  "__init__.py(414):     field_names = tuple(map(_sys.intern, field_names))\\n",\n  "__init__.py(415):     num_fields = len(field_names)\\n",\n  "__init__.py(416):     arg_list = \', \'.join(field_names)\\n",\n  "__init__.py(417):     if num_fields == 1:\\n",\n  "__init__.py(419):     repr_fmt = \'(\' + \', \'.join(f\'{name}=%r\' for name in field_names) + \')\'\\n",\n  " --- modulename: __init__, funcname: <genexpr>\\n",\n  "__init__.py(419):     repr_fmt = \'(\' + \', \'.join(f\'{name}=%r\' for name in field_names) + \')\'\\n",\n  " --- modulename: __init__, funcname: <genexpr>\\n",\n  "__init__.py(419):     repr_fmt = \'(\' + \', \'.join(f\'{name}=%r\' for name in field_names) + \')\'\\n",\n  " --- modulename: __init__, funcname: <genexpr>\\n",\n  "__init__.py(419):     repr_fmt = \'(\' + \', \'.join(f\'{name}=%r\' for name in field_names) + \')\'\\n",\n  " --- modulename: __init__, funcname: <genexpr>\\n",\n  "__init__.py(419):     repr_fmt = \'(\' + \', \'.join(f\'{name}=%r\' for name in field_names) + \')\'\\n",\n  " --- modulename: __init__, funcname: <genexpr>\\n",\n  "__init__.py(419):     repr_fmt = \'(\' + \', \'.join(f\'{name}=%r\' for name in field_names) + \')\'\\n",\n  "__init__.py(420):     tuple_new = tuple.__new__\\n",\n  "__init__.py(421):     _dict, _tuple, _len, _map, _zip = dict, tuple, len, map, zip\\n",\n  "__init__.py(426):         \'_tuple_new\': tuple_new,\\n",\n  "__init__.py(427):         \'__builtins__\': {},\\n",\n  "__init__.py(428):         \'__name__\': f\'namedtuple_{typename}\',\\n",\n  "__init__.py(425):     namespace = {\\n",\n  "__init__.py(430):     code = f\'lambda _cls, {arg_list}: _tuple_new(_cls, ({arg_list}))\'\\n",\n  "__init__.py(431):     __new__ = eval(code, namespace)\\n",\n  "__init__.py(432):     __new__.__name__ = \'__new__\'\\n",\n  "__init__.py(433):     __new__.__doc__ = f\'Create new instance of {typename}({arg_list})\'\\n",\n  "__init__.py(434):     if defaults is not None:\\n",\n  "__init__.py(437):     @classmethod\\n",\n  "__init__.py(438):     def _make(cls, iterable):\\n",\n  "__init__.py(444):     _make.__func__.__doc__ = (f\'Make a new {typename} object from a sequence \'\\n",\n  "__init__.py(447):     def _replace(self, /, **kwds):\\n",\n  "__init__.py(453):     _replace.__doc__ = (f\'Return a new {typename} object replacing specified \'\\n",\n  "__init__.py(456):     def __repr__(self):\\n",\n  "__init__.py(460):     def _asdict(self):\\n",\n  "__init__.py(464):     def __getnewargs__(self):\\n",\n  "__init__.py(470):         __new__,\\n",\n  "__init__.py(471):         _make.__func__,\\n",\n  "__init__.py(472):         _replace,\\n",\n  "__init__.py(473):         __repr__,\\n",\n  "__init__.py(474):         _asdict,\\n",\n  "__init__.py(475):         __getnewargs__,\\n",\n  "__init__.py(469):     for method in (\\n",\n  "__init__.py(477):         method.__qualname__ = f\'{typename}.{method.__name__}\'\\n",\n  "__init__.py(469):     for method in (\\n",\n  "__init__.py(477):         method.__qualname__ = f\'{typename}.{method.__name__}\'\\n",\n  "__init__.py(469):     for method in (\\n",\n  "__init__.py(477):         method.__qualname__ = f\'{typename}.{method.__name__}\'\\n",\n  "__init__.py(469):     for method in (\\n",\n  "__init__.py(477):         method.__qualname__ = f\'{typename}.{method.__name__}\'\\n",\n  "__init__.py(469):     for method in (\\n",\n  "__init__.py(477):         method.__qualname__ = f\'{typename}.{method.__name__}\'\\n",\n  "__init__.py(469):     for method in (\\n",\n  "__init__.py(477):         method.__qualname__ = f\'{typename}.{method.__name__}\'\\n",\n  "__init__.py(469):     for method in (\\n",\n  "__init__.py(482):         \'__doc__\': f\'{typename}({arg_list})\',\\n",\n  "__init__.py(483):         \'__slots__\': (),\\n",\n  "__init__.py(484):         \'_fields\': field_names,\\n",\n  "__init__.py(485):         \'_field_defaults\': field_defaults,\\n",\n  "__init__.py(486):         \'__new__\': __new__,\\n",\n  "__init__.py(487):         \'_make\': _make,\\n",\n  "__init__.py(488):         \'_replace\': _replace,\\n",\n  "__init__.py(489):         \'__repr__\': __repr__,\\n",\n  "__init__.py(490):         \'_asdict\': _asdict,\\n",\n  "__init__.py(491):         \'__getnewargs__\': __getnewargs__,\\n",\n  "__init__.py(481):     class_namespace = {\\n",\n  "__init__.py(493):     for index, name in enumerate(field_names):\\n",\n  "__init__.py(494):         doc = _sys.intern(f\'Alias for field number {index}\')\\n",\n  "__init__.py(495):         class_namespace[name] = _tuplegetter(index, doc)\\n",\n  "__init__.py(493):     for index, name in enumerate(field_names):\\n",\n  "__init__.py(494):         doc = _sys.intern(f\'Alias for field number {index}\')\\n",\n  "__init__.py(495):         class_namespace[name] = _tuplegetter(index, doc)\\n",\n  "__init__.py(493):     for index, name in enumerate(field_names):\\n",\n  "__init__.py(494):         doc = _sys.intern(f\'Alias for field number {index}\')\\n",\n  "__init__.py(495):         class_namespace[name] = _tuplegetter(index, doc)\\n",\n  "__init__.py(493):     for index, name in enumerate(field_names):\\n",\n  "__init__.py(494):         doc = _sys.intern(f\'Alias for field number {index}\')\\n",\n  "__init__.py(495):         class_namespace[name] = _tuplegetter(index, doc)\\n",\n  "__init__.py(493):     for index, name in enumerate(field_names):\\n",\n  "__init__.py(497):     result = type(typename, (tuple,), class_namespace)\\n",\n  "__init__.py(504):     if module is None:\\n",\n  "__init__.py(505):         try:\\n",\n  "__init__.py(506):             module = _sys._getframe(1).f_globals.get(\'__name__\', \'__main__\')\\n",\n  "__init__.py(509):     if module is not None:\\n",\n  "__init__.py(510):         result.__module__ = module\\n",\n  "__init__.py(512):     return result\\n",\n  "selectors.py(48): SelectorKey.__doc__ = \\"\\"\\"SelectorKey(fileobj, fd, events, data)\\n",\n  "selectors.py(53): if sys.version_info >= (3, 5):\\n",\n  "selectors.py(54):     SelectorKey.fileobj.__doc__ = \'File object registered.\'\\n",\n  "selectors.py(55):     SelectorKey.fd.__doc__ = \'Underlying file descriptor.\'\\n",\n  "selectors.py(56):     SelectorKey.events.__doc__ = \'Events that must be waited for on this file object.\'\\n",\n  "selectors.py(57):     SelectorKey.data.__doc__ = (\'\'\'Optional opaque data associated to this file object.\\n",\n  "selectors.py(61): class _SelectorMapping(Mapping):\\n",\n  " --- modulename: selectors, funcname: _SelectorMapping\\n",\n  "selectors.py(61): class _SelectorMapping(Mapping):\\n",\n  "selectors.py(62):     \\"\\"\\"Mapping of file objects to selector keys.\\"\\"\\"\\n",\n  "selectors.py(64):     def __init__(self, selector):\\n",\n  "selectors.py(67):     def __len__(self):\\n",\n  "selectors.py(70):     def __getitem__(self, fileobj):\\n",\n  "selectors.py(77):     def __iter__(self):\\n",\n  " --- modulename: abc, funcname: __new__\\n",\n  "abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)\\n",\n  "abc.py(107):             _abc_init(cls)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "abc.py(108):             return cls\\n",\n  "selectors.py(81): class BaseSelector(metaclass=ABCMeta):\\n",\n  " --- modulename: selectors, funcname: BaseSelector\\n",\n  "selectors.py(81): class BaseSelector(metaclass=ABCMeta):\\n",\n  "selectors.py(82):     \\"\\"\\"Selector abstract base class.\\n",\n  "selectors.py(96):     @abstractmethod\\n",\n  "selectors.py(97):     def register(self, fileobj, events, data=None):\\n",\n  " --- modulename: abc, funcname: abstractmethod\\n",\n  "abc.py(24):     funcobj.__isabstractmethod__ = True\\n",\n  "abc.py(25):     return funcobj\\n",\n  "selectors.py(119):     @abstractmethod\\n",\n  "selectors.py(120):     def unregister(self, fileobj):\\n",\n  " --- modulename: abc, funcname: abstractmethod\\n",\n  "abc.py(24):     funcobj.__isabstractmethod__ = True\\n",\n  "abc.py(25):     return funcobj\\n",\n  "selectors.py(138):     def modify(self, fileobj, events, data=None):\\n",\n  "selectors.py(155):     @abstractmethod\\n",\n  "selectors.py(156):     def select(self, timeout=None):\\n",\n  " --- modulename: abc, funcname: abstractmethod\\n",\n  "abc.py(24):     funcobj.__isabstractmethod__ = True\\n",\n  "abc.py(25):     return funcobj\\n",\n  "selectors.py(174):     def close(self):\\n",\n  "selectors.py(181):     def get_key(self, fileobj):\\n",\n  "selectors.py(195):     @abstractmethod\\n",\n  "selectors.py(196):     def get_map(self):\\n",\n  " --- modulename: abc, funcname: abstractmethod\\n",\n  "abc.py(24):     funcobj.__isabstractmethod__ = True\\n",\n  "abc.py(25):     return funcobj\\n",\n  "selectors.py(200):     def __enter__(self):\\n",\n  "selectors.py(203):     def __exit__(self, *args):\\n",\n  " --- modulename: abc, funcname: __new__\\n",\n  "abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)\\n",\n  "abc.py(107):             _abc_init(cls)\\n",\n  "abc.py(108):             return cls\\n",\n  "selectors.py(207): class _BaseSelectorImpl(BaseSelector):\\n",\n  " --- modulename: selectors, funcname: _BaseSelectorImpl\\n",\n  "selectors.py(207): class _BaseSelectorImpl(BaseSelector):\\n",\n  "selectors.py(208):     \\"\\"\\"Base selector implementation.\\"\\"\\"\\n",\n  "selectors.py(210):     def __init__(self):\\n",\n  "selectors.py(216):     def _fileobj_lookup(self, fileobj):\\n",\n  "selectors.py(235):     def register(self, fileobj, events, data=None):\\n",\n  "selectors.py(248):     def unregister(self, fileobj):\\n",\n  "selectors.py(255):     def modify(self, fileobj, events, data=None):\\n",\n  "selectors.py(269):     def close(self):\\n",\n  "selectors.py(273):     def get_map(self):\\n",\n  "selectors.py(276):     def _key_from_fd(self, fd):\\n",\n  " --- modulename: abc, funcname: __new__\\n",\n  "abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)\\n",\n  "abc.py(107):             _abc_init(cls)\\n",\n  "abc.py(108):             return cls\\n",\n  "selectors.py(291): class SelectSelector(_BaseSelectorImpl):\\n",\n  " --- modulename: selectors, funcname: SelectSelector\\n",\n  "selectors.py(291): class SelectSelector(_BaseSelectorImpl):\\n",\n  "selectors.py(292):     \\"\\"\\"Select-based selector.\\"\\"\\"\\n",\n  "selectors.py(294):     def __init__(self):\\n",\n  "selectors.py(299):     def register(self, fileobj, events, data=None):\\n",\n  "selectors.py(307):     def unregister(self, fileobj):\\n",\n  "selectors.py(313):     if sys.platform == \'win32\':\\n",\n  "selectors.py(318):         _select = select.select\\n",\n  "selectors.py(320):     def select(self, timeout=None):\\n",\n  " --- modulename: abc, funcname: __new__\\n",\n  "abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)\\n",\n  "abc.py(107):             _abc_init(cls)\\n",\n  "abc.py(108):             return cls\\n",\n  "selectors.py(342): class _PollLikeSelector(_BaseSelectorImpl):\\n",\n  " --- modulename: selectors, funcname: _PollLikeSelector\\n",\n  "selectors.py(342): class _PollLikeSelector(_BaseSelectorImpl):\\n",\n  "selectors.py(343):     \\"\\"\\"Base class shared between poll, epoll and devpoll selectors.\\"\\"\\"\\n",\n  "selectors.py(344):     _selector_cls = None\\n",\n  "selectors.py(345):     _EVENT_READ = None\\n",\n  "selectors.py(346):     _EVENT_WRITE = None\\n",\n  "selectors.py(348):     def __init__(self):\\n",\n  "selectors.py(352):     def register(self, fileobj, events, data=None):\\n",\n  "selectors.py(366):     def unregister(self, fileobj):\\n",\n  "selectors.py(376):     def modify(self, fileobj, events, data=None):\\n",\n  "selectors.py(403):     def select(self, timeout=None):\\n",\n  " --- modulename: abc, funcname: __new__\\n",\n  "abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)\\n",\n  "abc.py(107):             _abc_init(cls)\\n",\n  "abc.py(108):             return cls\\n",\n  "selectors.py(432): if hasattr(select, \'poll\'):\\n",\n  "selectors.py(434):     class PollSelector(_PollLikeSelector):\\n",\n  " --- modulename: selectors, funcname: PollSelector\\n",\n  "selectors.py(434):     class PollSelector(_PollLikeSelector):\\n",\n  "selectors.py(435):         \\"\\"\\"Poll-based selector.\\"\\"\\"\\n",\n  "selectors.py(436):         _selector_cls = select.poll\\n",\n  "selectors.py(437):         _EVENT_READ = select.POLLIN\\n",\n  "selectors.py(438):         _EVENT_WRITE = select.POLLOUT\\n",\n  " --- modulename: abc, funcname: __new__\\n",\n  "abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)\\n",\n  "abc.py(107):             _abc_init(cls)\\n",\n  "abc.py(108):             return cls\\n",\n  "selectors.py(441): if hasattr(select, \'epoll\'):\\n",\n  "selectors.py(443):     class EpollSelector(_PollLikeSelector):\\n",\n  " --- modulename: selectors, funcname: EpollSelector\\n",\n  "selectors.py(443):     class EpollSelector(_PollLikeSelector):\\n",\n  "selectors.py(444):         \\"\\"\\"Epoll-based selector.\\"\\"\\"\\n",\n  "selectors.py(445):         _selector_cls = select.epoll\\n",\n  "selectors.py(446):         _EVENT_READ = select.EPOLLIN\\n",\n  "selectors.py(447):         _EVENT_WRITE = select.EPOLLOUT\\n",\n  "selectors.py(449):         def fileno(self):\\n",\n  "selectors.py(452):         def select(self, timeout=None):\\n",\n  "selectors.py(484):         def close(self):\\n",\n  " --- modulename: abc, funcname: __new__\\n",\n  "abc.py(106):             cls = super().__new__(mcls, name, bases, namespace, **kwargs)\\n",\n  "abc.py(107):             _abc_init(cls)\\n",\n  "abc.py(108):             return cls\\n",\n  "selectors.py(489): if hasattr(select, \'devpoll\'):\\n",\n  "selectors.py(505): if hasattr(select, \'kqueue\'):\\n",\n  "selectors.py(584): def _can_use(method):\\n",\n  "selectors.py(610): if _can_use(\'kqueue\'):\\n",\n  " --- modulename: selectors, funcname: _can_use\\n",\n  "selectors.py(588):     selector = getattr(select, method, None)\\n",\n  "selectors.py(589):     if selector is None:\\n",\n  "selectors.py(591):         return False\\n",\n  "selectors.py(612): elif _can_use(\'epoll\'):\\n",\n  " --- modulename: selectors, funcname: _can_use\\n",\n  "selectors.py(588):     selector = getattr(select, method, None)\\n",\n  "selectors.py(589):     if selector is None:\\n",\n  "selectors.py(594):     try:\\n",\n  "selectors.py(595):         selector_obj = selector()\\n",\n  "selectors.py(596):         if method == \'poll\':\\n",\n  "selectors.py(601):             selector_obj.close()\\n",\n  "selectors.py(602):         return True\\n",\n  "selectors.py(613):     DefaultSelector = EpollSelector\\n",\n  "<frozen importlib._bootstrap>(691): <frozen importlib._bootstrap>(692): <frozen importlib._bootstrap>(693):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap>(695): <frozen importlib._bootstrap>(697): <frozen importlib._bootstrap>(987): <frozen importlib._bootstrap>(996):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(161):  --- modulename: _bootstrap, funcname: release\\n",\n  "<frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(115): <frozen importlib._bootstrap>(117): <frozen importlib._bootstrap>(118): <frozen importlib._bootstrap>(119): <frozen importlib._bootstrap>(120): <frozen importlib._bootstrap>(121):  --- modulename: _bootstrap, funcname: cb\\n",\n  "<frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(191): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(194): subprocess.py(105): class SubprocessError(Exception): pass\\n",\n  " --- modulename: subprocess, funcname: SubprocessError\\n",\n  "subprocess.py(105): class SubprocessError(Exception): pass\\n",\n  "subprocess.py(108): class CalledProcessError(SubprocessError):\\n",\n  " --- modulename: subprocess, funcname: CalledProcessError\\n",\n  "subprocess.py(108): class CalledProcessError(SubprocessError):\\n",\n  "subprocess.py(109):     \\"\\"\\"Raised when run() is called with check=True and the process\\n",\n  "subprocess.py(115):     def __init__(self, returncode, cmd, output=None, stderr=None):\\n",\n  "subprocess.py(121):     def __str__(self):\\n",\n  "subprocess.py(133):     @property\\n",\n  "subprocess.py(134):     def stdout(self):\\n",\n  "subprocess.py(138):     @stdout.setter\\n",\n  "subprocess.py(139):     def stdout(self, value):\\n",\n  "subprocess.py(145): class TimeoutExpired(SubprocessError):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: subprocess, funcname: TimeoutExpired\\n",\n  "subprocess.py(145): class TimeoutExpired(SubprocessError):\\n",\n  "subprocess.py(146):     \\"\\"\\"This exception is raised when the timeout expires while waiting for a\\n",\n  "subprocess.py(152):     def __init__(self, cmd, timeout, output=None, stderr=None):\\n",\n  "subprocess.py(158):     def __str__(self):\\n",\n  "subprocess.py(162):     @property\\n",\n  "subprocess.py(163):     def stdout(self):\\n",\n  "subprocess.py(166):     @stdout.setter\\n",\n  "subprocess.py(167):     def stdout(self, value):\\n",\n  "subprocess.py(173): if _mswindows:\\n",\n  "subprocess.py(219):     _PIPE_BUF = getattr(select, \'PIPE_BUF\', 512)\\n",\n  "subprocess.py(224):     if hasattr(selectors, \'PollSelector\'):\\n",\n  "subprocess.py(225):         _PopenSelector = selectors.PollSelector\\n",\n  "subprocess.py(230): if _mswindows:\\n",\n  "subprocess.py(248):     _active = []\\n",\n  "subprocess.py(250):     def _cleanup():\\n",\n  "subprocess.py(263): PIPE = -1\\n",\n  "subprocess.py(264): STDOUT = -2\\n",\n  "subprocess.py(265): DEVNULL = -3\\n",\n  "subprocess.py(272): def _optim_args_from_interpreter_flags():\\n",\n  "subprocess.py(282): def _args_from_interpreter_flags():\\n",\n  "subprocess.py(341): def call(*popenargs, timeout=None, **kwargs):\\n",\n  "subprocess.py(358): def check_call(*popenargs, **kwargs):\\n",\n  "subprocess.py(377): def check_output(*popenargs, timeout=None, **kwargs):\\n",\n  "subprocess.py(428): class CompletedProcess(object):\\n",\n  " --- modulename: subprocess, funcname: CompletedProcess\\n",\n  "subprocess.py(428): class CompletedProcess(object):\\n",\n  "subprocess.py(429):     \\"\\"\\"A process that has finished running.\\n",\n  "subprocess.py(439):     def __init__(self, args, returncode, stdout=None, stderr=None):\\n",\n  "subprocess.py(445):     def __repr__(self):\\n",\n  "subprocess.py(454):     __class_getitem__ = classmethod(types.GenericAlias)\\n",\n  "subprocess.py(457):     def check_returncode(self):\\n",\n  "subprocess.py(465):         input=None, capture_output=False, timeout=None, check=False, **kwargs):\\n",\n  "subprocess.py(464): def run(*popenargs,\\n",\n  "subprocess.py(533): def list2cmdline(seq):\\n",\n  "subprocess.py(606): def getstatusoutput(cmd):\\n",\n  "subprocess.py(637): def getoutput(cmd):\\n",\n  "subprocess.py(650): def _use_posix_spawn():\\n",\n  "subprocess.py(697): _USE_POSIX_SPAWN = _use_posix_spawn()\\n",\n  " --- modulename: subprocess, funcname: _use_posix_spawn\\n",\n  "subprocess.py(663):     if _mswindows or not hasattr(os, \'posix_spawn\'):\\n",\n  "subprocess.py(667):     if sys.platform == \'darwin\':\\n",\n  "subprocess.py(672):     try:\\n",\n  "subprocess.py(673):         ver = os.confstr(\'CS_GNU_LIBC_VERSION\')\\n",\n  "subprocess.py(675):         parts = ver.split(maxsplit=1)\\n",\n  "subprocess.py(676):         if len(parts) != 2:\\n",\n  "subprocess.py(679):         libc = parts[0]\\n",\n  "subprocess.py(680):         version = tuple(map(int, parts[1].split(\'.\')))\\n",\n  "subprocess.py(682):         if sys.platform == \'linux\' and libc == \'glibc\' and version >= (2, 24):\\n",\n  "subprocess.py(685):             return True\\n",\n  "subprocess.py(700): class Popen(object):\\n",\n  " --- modulename: subprocess, funcname: Popen\\n",\n  "subprocess.py(700): class Popen(object):\\n",\n  "subprocess.py(701):     \\"\\"\\" Execute a child program in a new process.\\n",\n  "subprocess.py(754):     _child_created = False  # Set here since __del__ checks it\\n",\n  "subprocess.py(756):     def __init__(self, args, bufsize=-1, executable=None,\\n",\n  "subprocess.py(762):                  pass_fds=(), *, user=None, group=None, extra_groups=None,\\n",\n  "subprocess.py(763):                  encoding=None, errors=None, text=None, umask=-1):\\n",\n  "subprocess.py(756):     def __init__(self, args, bufsize=-1, executable=None,\\n",\n  "subprocess.py(989):     def __repr__(self):\\n",\n  "subprocess.py(998):     __class_getitem__ = classmethod(types.GenericAlias)\\n",\n  "subprocess.py(1000):     @property\\n",\n  "subprocess.py(1001):     def universal_newlines(self):\\n",\n  "subprocess.py(1006):     @universal_newlines.setter\\n",\n  "subprocess.py(1007):     def universal_newlines(self, universal_newlines):\\n",\n  "subprocess.py(1010):     def _translate_newlines(self, data, encoding, errors):\\n",\n  "subprocess.py(1014):     def __enter__(self):\\n",\n  "subprocess.py(1017):     def __exit__(self, exc_type, value, traceback):\\n",\n  "subprocess.py(1045):     def __del__(self, _maxsize=sys.maxsize, _warn=warnings.warn):\\n",\n  "subprocess.py(1060):     def _get_devnull(self):\\n",\n  "subprocess.py(1065):     def _stdin_write(self, input):\\n",\n  "subprocess.py(1090):     def communicate(self, input=None, timeout=None):\\n",\n  "subprocess.py(1158):     def poll(self):\\n",\n  "subprocess.py(1164):     def _remaining_time(self, endtime):\\n",\n  "subprocess.py(1172):     def _check_timeout(self, endtime, orig_timeout, stdout_seq, stderr_seq,\\n",\n  "subprocess.py(1184):     def wait(self, timeout=None):\\n",\n  "subprocess.py(1207):     def _close_pipe_fds(self,\\n",\n  "subprocess.py(1236):     if _mswindows:\\n",\n  "subprocess.py(1568):         def _get_handles(self, stdin, stdout, stderr):\\n",\n  "subprocess.py(1622):         def _posix_spawn(self, args, executable, env, restore_signals,\\n",\n  "subprocess.py(1661):         def _execute_child(self, args, executable, preexec_fn, close_fds,\\n",\n  "subprocess.py(1826):                                waitstatus_to_exitcode=os.waitstatus_to_exitcode,\\n",\n  "subprocess.py(1827):                                _WIFSTOPPED=os.WIFSTOPPED,\\n",\n  "subprocess.py(1828):                                _WSTOPSIG=os.WSTOPSIG):\\n",\n  "subprocess.py(1825):         def _handle_exitstatus(self, sts,\\n",\n  "subprocess.py(1837):         def _internal_poll(self, _deadstate=None, _waitpid=os.waitpid,\\n",\n  "subprocess.py(1838):                 _WNOHANG=os.WNOHANG, _ECHILD=errno.ECHILD):\\n",\n  "subprocess.py(1837):         def _internal_poll(self, _deadstate=None, _waitpid=os.waitpid,\\n",\n  "subprocess.py(1872):         def _try_wait(self, wait_flags):\\n",\n  "subprocess.py(1885):         def _wait(self, timeout):\\n",\n  "subprocess.py(1926):         def _communicate(self, input, endtime, orig_timeout):\\n",\n  "subprocess.py(2028):         def _save_input(self, input):\\n",\n  "subprocess.py(2040):         def send_signal(self, sig):\\n",\n  "subprocess.py(2072):         def terminate(self):\\n",\n  "subprocess.py(2077):         def kill(self):\\n",\n  "<frozen importlib._bootstrap>(691): <frozen importlib._bootstrap>(692): <frozen importlib._bootstrap>(693):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap>(695): <frozen importlib._bootstrap>(697): <frozen importlib._bootstrap>(987): <frozen importlib._bootstrap>(996):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(161):  --- modulename: _bootstrap, funcname: release\\n",\n  "<frozen importlib._bootstrap>(113): <frozen importlib._bootstrap>(114): <frozen importlib._bootstrap>(115): <frozen importlib._bootstrap>(117): <frozen importlib._bootstrap>(118): <frozen importlib._bootstrap>(119): <frozen importlib._bootstrap>(120): <frozen importlib._bootstrap>(121):  --- modulename: _bootstrap, funcname: cb\\n",\n  "<frozen importlib._bootstrap>(186): <frozen importlib._bootstrap>(187): <frozen importlib._bootstrap>(191): <frozen importlib._bootstrap>(192): <frozen importlib._bootstrap>(194): glue_helpers.py(26): import sys\\n",\n  "glue_helpers.py(27): import tempfile\\n",\n  " --- modulename: _bootstrap, funcname: _find_and_load\\n",\n  "<frozen importlib._bootstrap>(1004):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(153): <frozen importlib._bootstrap>(154):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(157):  --- modulename: _bootstrap, funcname: _get_module_lock\\n",\n  "<frozen importlib._bootstrap>(172): <frozen importlib._bootstrap>(173): <frozen importlib._bootstrap>(174): <frozen importlib._bootstrap>(175): <frozen importlib._bootstrap>(176): <frozen importlib._bootstrap>(177): <frozen importlib._bootstrap>(179): <frozen importlib._bootstrap>(180): <frozen importlib._bootstrap>(183):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(59): <frozen importlib._bootstrap>(60): <frozen importlib._bootstrap>(61): <frozen importlib._bootstrap>(62): <frozen importlib._bootstrap>(63): <frozen importlib._bootstrap>(64): <frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(196): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(158):  --- modulename: _bootstrap, funcname: acquire\\n",\n  "<frozen importlib._bootstrap>(93): <frozen importlib._bootstrap>(94): <frozen importlib._bootstrap>(95): <frozen importlib._bootstrap>(97): <frozen importlib._bootstrap>(98): <frozen importlib._bootstrap>(99): <frozen importlib._bootstrap>(100): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(1005): <frozen importlib._bootstrap>(1006): <frozen importlib._bootstrap>(1007):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(968): <frozen importlib._bootstrap>(969): <frozen importlib._bootstrap>(970): <frozen importlib._bootstrap>(982):  --- modulename: _bootstrap, funcname: _find_spec\\n",\n  "<frozen importlib._bootstrap>(903): <frozen importlib._bootstrap>(904): <frozen importlib._bootstrap>(909): <frozen importlib._bootstrap>(915): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: __init__, funcname: find_spec\\n",\n  "__init__.py(85):         if path is not None:\\n",\n  "__init__.py(88):         method_name = \'spec_for_{fullname}\'.format(**locals())\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  "__init__.py(90):         return method()\\n",\n  " --- modulename: __init__, funcname: <lambda>\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  " --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(738): <frozen importlib._bootstrap>(740): <frozen importlib._bootstrap>(743):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(813): <frozen importlib._bootstrap>(816):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1421): <frozen importlib._bootstrap_external>(1422): <frozen importlib._bootstrap_external>(1423):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1388): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1555):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n",\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(151): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1557): <frozen importlib._bootstrap_external>(1556):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1510):  --- modulename: _bootstrap_external, funcname: __init__\\n",\n  "<frozen importlib._bootstrap_external>(1009): <frozen importlib._bootstrap_external>(1010): <frozen importlib._bootstrap_external>(1511): <frozen importlib._bootstrap_external>(1512): <frozen importlib._bootstrap_external>(1511):  --- modulename: _bootstrap_external, funcname: spec_from_file_location\\n",\n  "<frozen importlib._bootstrap_external>(708): <frozen importlib._bootstrap_external>(720): <frozen importlib._bootstrap_external>(728):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(353): <frozen importlib._bootstrap>(354): <frozen importlib._bootstrap>(355): <frozen importlib._bootstrap>(356): <frozen importlib._bootstrap>(357): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap_external>(729): <frozen importlib._bootstrap_external>(732): <frozen importlib._bootstrap_external>(742): <frozen importlib._bootstrap_external>(753): <frozen importlib._bootstrap_external>(754): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1400): <frozen importlib._bootstrap_external>(1401): <frozen importlib._bootstrap_external>(1424): <frozen importlib._bootstrap_external>(1426): <frozen importlib._bootstrap_external>(1437):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(928): <frozen importlib._bootstrap>(943): <frozen importlib._bootstrap>(983): <frozen importlib._bootstrap>(986):  --- modulename: _bootstrap, funcname: _load_unlocked\\n",\n  "<frozen importlib._bootstrap>(661): <frozen importlib._bootstrap>(663): <frozen importlib._bootstrap>(666):  --- modulename: _bootstrap, funcname: module_from_spec\\n",\n  "<frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(562): <frozen importlib._bootstrap>(565):  --- modulename: _bootstrap_external, funcname: create_module\\n",\n  "<frozen importlib._bootstrap_external>(842): <frozen importlib._bootstrap>(569): <frozen importlib._bootstrap>(570):  --- modulename: _bootstrap, funcname: _new_module\\n",\n  "<frozen importlib._bootstrap>(36): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap, funcname: _init_module_attrs\\n",\n  "<frozen importlib._bootstrap>(490): <frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(497): <frozen importlib._bootstrap>(498): <frozen importlib._bootstrap>(519): <frozen importlib._bootstrap>(520): <frozen importlib._bootstrap>(524): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526):  --- modulename: _bootstrap, funcname: parent\\n",\n  "<frozen importlib._bootstrap>(401): <frozen importlib._bootstrap>(402): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(535): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(542):  --- modulename: _bootstrap, funcname: has_location\\n",\n  "<frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(543): <frozen importlib._bootstrap>(544): <frozen importlib._bootstrap>(545): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(388): <frozen importlib._bootstrap>(389): <frozen importlib._bootstrap>(391):  --- modulename: _bootstrap_external, funcname: _get_cached\\n",\n  "<frozen importlib._bootstrap_external>(492): <frozen importlib._bootstrap_external>(493): <frozen importlib._bootstrap_external>(494):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(552):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(572): <frozen importlib._bootstrap>(671): <frozen importlib._bootstrap>(672): <frozen importlib._bootstrap>(673): <frozen importlib._bootstrap>(674): <frozen importlib._bootstrap>(675): <frozen importlib._bootstrap>(680):  --- modulename: _bootstrap_external, funcname: exec_module\\n",\n  "<frozen importlib._bootstrap_external>(846):  --- modulename: _bootstrap_external, funcname: get_code\\n",\n  "<frozen importlib._bootstrap_external>(923):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper\\n",\n  "<frozen importlib._bootstrap_external>(524): <frozen importlib._bootstrap_external>(526): <frozen importlib._bootstrap_external>(529):  --- modulename: _bootstrap_external, funcname: get_filename\\n",\n  "<frozen importlib._bootstrap_external>(1034): <frozen importlib._bootstrap_external>(924): <frozen importlib._bootstrap_external>(925): <frozen importlib._bootstrap_external>(926): <frozen importlib._bootstrap_external>(927): <frozen importlib._bootstrap_external>(928): <frozen importlib._bootstrap_external>(929): <frozen importlib._bootstrap_external>(930):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(934): <frozen importlib._bootstrap_external>(935):  --- modulename: _bootstrap_external, funcname: path_stats\\n",\n  "<frozen importlib._bootstrap_external>(1079):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1080): <frozen importlib._bootstrap_external>(939): <frozen importlib._bootstrap_external>(940): <frozen importlib._bootstrap_external>(941):  --- modulename: _bootstrap_external, funcname: get_data\\n",\n  "<frozen importlib._bootstrap_external>(1038): <frozen importlib._bootstrap_external>(1039): <frozen importlib._bootstrap_external>(1040): <frozen importlib._bootstrap_external>(946): <frozen importlib._bootstrap_external>(947): <frozen importlib._bootstrap_external>(945): <frozen importlib._bootstrap_external>(949): <frozen importlib._bootstrap_external>(950):  --- modulename: _bootstrap_external, funcname: _classify_pyc\\n",\n  "<frozen importlib._bootstrap_external>(576): <frozen importlib._bootstrap_external>(577): <frozen importlib._bootstrap_external>(581): <frozen importlib._bootstrap_external>(585):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(587): <frozen importlib._bootstrap_external>(590): <frozen importlib._bootstrap_external>(951): <frozen importlib._bootstrap_external>(952): <frozen importlib._bootstrap_external>(953): <frozen importlib._bootstrap_external>(966): <frozen importlib._bootstrap_external>(967): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969): <frozen importlib._bootstrap_external>(970): <frozen importlib._bootstrap_external>(971): <frozen importlib._bootstrap_external>(966):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc\\n",\n  "<frozen importlib._bootstrap_external>(612):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(617):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(976): <frozen importlib._bootstrap_external>(977): <frozen importlib._bootstrap_external>(976):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(978): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(978):  --- modulename: _bootstrap_external, funcname: _compile_bytecode\\n",\n  "<frozen importlib._bootstrap_external>(647): <frozen importlib._bootstrap_external>(648): <frozen importlib._bootstrap_external>(649):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(650): <frozen importlib._bootstrap_external>(651): <frozen importlib._bootstrap_external>(652): <frozen importlib._bootstrap_external>(847): <frozen importlib._bootstrap_external>(850):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228):  --- modulename: tempfile, funcname: <module>\\n",\n  "tempfile.py(1): \\"\\"\\"Temporary files.\\n",\n  "tempfile.py(26): __all__ = [\\n",\n  "tempfile.py(39): import functools as _functools\\n",\n  "tempfile.py(40): import warnings as _warnings\\n",\n  "tempfile.py(41): import io as _io\\n",\n  "tempfile.py(42): import os as _os\\n",\n  "tempfile.py(43): import shutil as _shutil\\n",\n  "tempfile.py(44): import errno as _errno\\n",\n  "tempfile.py(45): from random import Random as _Random\\n",\n  " --- modulename: _bootstrap, funcname: _find_and_load\\n",\n  "<frozen importlib._bootstrap>(1004):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(153): <frozen importlib._bootstrap>(154):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(157):  --- modulename: _bootstrap, funcname: _get_module_lock\\n",\n  "<frozen importlib._bootstrap>(172): <frozen importlib._bootstrap>(173): <frozen importlib._bootstrap>(174): <frozen importlib._bootstrap>(175): <frozen importlib._bootstrap>(176): <frozen importlib._bootstrap>(177): <frozen importlib._bootstrap>(179): <frozen importlib._bootstrap>(180): <frozen importlib._bootstrap>(183):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(59): <frozen importlib._bootstrap>(60): <frozen importlib._bootstrap>(61): <frozen importlib._bootstrap>(62): <frozen importlib._bootstrap>(63): <frozen importlib._bootstrap>(64): <frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(196): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(158):  --- modulename: _bootstrap, funcname: acquire\\n",\n  "<frozen importlib._bootstrap>(93): <frozen importlib._bootstrap>(94): <frozen importlib._bootstrap>(95): <frozen importlib._bootstrap>(97): <frozen importlib._bootstrap>(98): <frozen importlib._bootstrap>(99): <frozen importlib._bootstrap>(100): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(1005): <frozen importlib._bootstrap>(1006): <frozen importlib._bootstrap>(1007):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked\\n",\n  "<frozen importlib._bootstrap>(968): <frozen importlib._bootstrap>(969): <frozen importlib._bootstrap>(970): <frozen importlib._bootstrap>(982):  --- modulename: _bootstrap, funcname: _find_spec\\n",\n  "<frozen importlib._bootstrap>(903): <frozen importlib._bootstrap>(904): <frozen importlib._bootstrap>(909): <frozen importlib._bootstrap>(915): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: __init__, funcname: find_spec\\n",\n  "__init__.py(85):         if path is not None:\\n",\n  "__init__.py(88):         method_name = \'spec_for_{fullname}\'.format(**locals())\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  "__init__.py(90):         return method()\\n",\n  " --- modulename: __init__, funcname: <lambda>\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  " --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(738): <frozen importlib._bootstrap>(740): <frozen importlib._bootstrap>(743):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(813): <frozen importlib._bootstrap>(816):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1421): <frozen importlib._bootstrap_external>(1422): <frozen importlib._bootstrap_external>(1423):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1388): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1555):  --- modulename: _bootstrap_external, funcname: _path_isfile\\n",\n  "<frozen importlib._bootstrap_external>(156):  --- modulename: _bootstrap_external, funcname: _path_is_mode_type\\n",\n  "<frozen importlib._bootstrap_external>(147): <frozen importlib._bootstrap_external>(148):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(151): <frozen importlib._bootstrap_external>(1556): <frozen importlib._bootstrap_external>(1557): <frozen importlib._bootstrap_external>(1556):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1510):  --- modulename: _bootstrap_external, funcname: __init__\\n",\n  "<frozen importlib._bootstrap_external>(1009): <frozen importlib._bootstrap_external>(1010): <frozen importlib._bootstrap_external>(1511): <frozen importlib._bootstrap_external>(1512): <frozen importlib._bootstrap_external>(1511):  --- modulename: _bootstrap_external, funcname: spec_from_file_location\\n",\n  "<frozen importlib._bootstrap_external>(708): <frozen importlib._bootstrap_external>(720): <frozen importlib._bootstrap_external>(728):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(353): <frozen importlib._bootstrap>(354): <frozen importlib._bootstrap>(355): <frozen importlib._bootstrap>(356): <frozen importlib._bootstrap>(357): <frozen importlib._bootstrap>(360): <frozen importlib._bootstrap>(361): <frozen importlib._bootstrap_external>(729): <frozen importlib._bootstrap_external>(732): <frozen importlib._bootstrap_external>(742): <frozen importlib._bootstrap_external>(753): <frozen importlib._bootstrap_external>(754): <frozen importlib._bootstrap_external>(759): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1400): <frozen importlib._bootstrap_external>(1401): <frozen importlib._bootstrap_external>(1424): <frozen importlib._bootstrap_external>(1426): <frozen importlib._bootstrap_external>(1437):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(928): <frozen importlib._bootstrap>(943): <frozen importlib._bootstrap>(983): <frozen importlib._bootstrap>(986):  --- modulename: _bootstrap, funcname: _load_unlocked\\n",\n  "<frozen importlib._bootstrap>(661): <frozen importlib._bootstrap>(663): <frozen importlib._bootstrap>(666):  --- modulename: _bootstrap, funcname: module_from_spec\\n",\n  "<frozen importlib._bootstrap>(561): <frozen importlib._bootstrap>(562): <frozen importlib._bootstrap>(565):  --- modulename: _bootstrap_external, funcname: create_module\\n",\n  "<frozen importlib._bootstrap_external>(842): <frozen importlib._bootstrap>(569): <frozen importlib._bootstrap>(570):  --- modulename: _bootstrap, funcname: _new_module\\n",\n  "<frozen importlib._bootstrap>(36): <frozen importlib._bootstrap>(571):  --- modulename: _bootstrap, funcname: _init_module_attrs\\n",\n  "<frozen importlib._bootstrap>(490): <frozen importlib._bootstrap>(496): <frozen importlib._bootstrap>(497): <frozen importlib._bootstrap>(498): <frozen importlib._bootstrap>(519): <frozen importlib._bootstrap>(520): <frozen importlib._bootstrap>(524): <frozen importlib._bootstrap>(525): <frozen importlib._bootstrap>(526):  --- modulename: _bootstrap, funcname: parent\\n",\n  "<frozen importlib._bootstrap>(401): <frozen importlib._bootstrap>(402): <frozen importlib._bootstrap>(530): <frozen importlib._bootstrap>(531): <frozen importlib._bootstrap>(535): <frozen importlib._bootstrap>(536): <frozen importlib._bootstrap>(542):  --- modulename: _bootstrap, funcname: has_location\\n",\n  "<frozen importlib._bootstrap>(408): <frozen importlib._bootstrap>(543): <frozen importlib._bootstrap>(544): <frozen importlib._bootstrap>(545): <frozen importlib._bootstrap>(549): <frozen importlib._bootstrap>(550):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(388): <frozen importlib._bootstrap>(389): <frozen importlib._bootstrap>(391):  --- modulename: _bootstrap_external, funcname: _get_cached\\n",\n  "<frozen importlib._bootstrap_external>(492): <frozen importlib._bootstrap_external>(493): <frozen importlib._bootstrap_external>(494):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(551): <frozen importlib._bootstrap>(552):  --- modulename: _bootstrap, funcname: cached\\n",\n  "<frozen importlib._bootstrap>(387): <frozen importlib._bootstrap>(392): <frozen importlib._bootstrap>(555): <frozen importlib._bootstrap>(572): <frozen importlib._bootstrap>(671): <frozen importlib._bootstrap>(672): <frozen importlib._bootstrap>(673): <frozen importlib._bootstrap>(674): <frozen importlib._bootstrap>(675): <frozen importlib._bootstrap>(680):  --- modulename: _bootstrap_external, funcname: exec_module\\n",\n  "<frozen importlib._bootstrap_external>(846):  --- modulename: _bootstrap_external, funcname: get_code\\n",\n  "<frozen importlib._bootstrap_external>(923):  --- modulename: _bootstrap_external, funcname: _check_name_wrapper\\n",\n  "<frozen importlib._bootstrap_external>(524): <frozen importlib._bootstrap_external>(526): <frozen importlib._bootstrap_external>(529):  --- modulename: _bootstrap_external, funcname: get_filename\\n",\n  "<frozen importlib._bootstrap_external>(1034): <frozen importlib._bootstrap_external>(924): <frozen importlib._bootstrap_external>(925): <frozen importlib._bootstrap_external>(926): <frozen importlib._bootstrap_external>(927): <frozen importlib._bootstrap_external>(928): <frozen importlib._bootstrap_external>(929): <frozen importlib._bootstrap_external>(930):  --- modulename: _bootstrap_external, funcname: cache_from_source\\n",\n  "<frozen importlib._bootstrap_external>(379): <frozen importlib._bootstrap_external>(386): <frozen importlib._bootstrap_external>(387):  --- modulename: _bootstrap_external, funcname: _path_split\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129):  --- modulename: _bootstrap_external, funcname: <genexpr>\\n",\n  "<frozen importlib._bootstrap_external>(129): <frozen importlib._bootstrap_external>(130): <frozen importlib._bootstrap_external>(132): <frozen importlib._bootstrap_external>(388): <frozen importlib._bootstrap_external>(389): <frozen importlib._bootstrap_external>(390): <frozen importlib._bootstrap_external>(392): <frozen importlib._bootstrap_external>(393): <frozen importlib._bootstrap_external>(394): <frozen importlib._bootstrap_external>(395): <frozen importlib._bootstrap_external>(398): <frozen importlib._bootstrap_external>(399): <frozen importlib._bootstrap_external>(403): <frozen importlib._bootstrap_external>(404): <frozen importlib._bootstrap_external>(429):  --- modulename: _bootstrap_external, funcname: _path_join\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(934): <frozen importlib._bootstrap_external>(935):  --- modulename: _bootstrap_external, funcname: path_stats\\n",\n  "<frozen importlib._bootstrap_external>(1079):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1080): <frozen importlib._bootstrap_external>(939): <frozen importlib._bootstrap_external>(940): <frozen importlib._bootstrap_external>(941):  --- modulename: _bootstrap_external, funcname: get_data\\n",\n  "<frozen importlib._bootstrap_external>(1038): <frozen importlib._bootstrap_external>(1039): <frozen importlib._bootstrap_external>(1040): <frozen importlib._bootstrap_external>(946): <frozen importlib._bootstrap_external>(947): <frozen importlib._bootstrap_external>(945): <frozen importlib._bootstrap_external>(949): <frozen importlib._bootstrap_external>(950):  --- modulename: _bootstrap_external, funcname: _classify_pyc\\n",\n  "<frozen importlib._bootstrap_external>(576): <frozen importlib._bootstrap_external>(577): <frozen importlib._bootstrap_external>(581): <frozen importlib._bootstrap_external>(585):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(587): <frozen importlib._bootstrap_external>(590): <frozen importlib._bootstrap_external>(951): <frozen importlib._bootstrap_external>(952): <frozen importlib._bootstrap_external>(953): <frozen importlib._bootstrap_external>(966): <frozen importlib._bootstrap_external>(967): <frozen importlib._bootstrap_external>(968): <frozen importlib._bootstrap_external>(969): <frozen importlib._bootstrap_external>(970): <frozen importlib._bootstrap_external>(971): <frozen importlib._bootstrap_external>(966):  --- modulename: _bootstrap_external, funcname: _validate_timestamp_pyc\\n",\n  "<frozen importlib._bootstrap_external>(612):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(617):  --- modulename: _bootstrap_external, funcname: _unpack_uint32\\n",\n  "<frozen importlib._bootstrap_external>(81): <frozen importlib._bootstrap_external>(82): <frozen importlib._bootstrap_external>(616): <frozen importlib._bootstrap_external>(976): <frozen importlib._bootstrap_external>(977): <frozen importlib._bootstrap_external>(976):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(978): <frozen importlib._bootstrap_external>(979): <frozen importlib._bootstrap_external>(980): <frozen importlib._bootstrap_external>(978):  --- modulename: _bootstrap_external, funcname: _compile_bytecode\\n",\n  "<frozen importlib._bootstrap_external>(647): <frozen importlib._bootstrap_external>(648): <frozen importlib._bootstrap_external>(649):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(650): <frozen importlib._bootstrap_external>(651): <frozen importlib._bootstrap_external>(652): <frozen importlib._bootstrap_external>(847): <frozen importlib._bootstrap_external>(850):  --- modulename: _bootstrap, funcname: _call_with_frames_removed\\n",\n  "<frozen importlib._bootstrap>(228):  --- modulename: random, funcname: <module>\\n",\n  "random.py(1): \\"\\"\\"Random variable generators.\\n",\n  "random.py(48): from warnings import warn as _warn\\n",\n  "random.py(49): from math import log as _log, exp as _exp, pi as _pi, e as _e, ceil as _ceil\\n",\n  "random.py(50): from math import sqrt as _sqrt, acos as _acos, cos as _cos, sin as _sin\\n",\n  "random.py(51): from math import tau as TWOPI, floor as _floor\\n",\n  "random.py(52): from os import urandom as _urandom\\n",\n  "random.py(53): from _collections_abc import Set as _Set, Sequence as _Sequence\\n",\n  "random.py(54): from itertools import accumulate as _accumulate, repeat as _repeat\\n",\n  "random.py(55): from bisect import bisect as _bisect\\n",\n  " --- modulename: _bootstrap, funcname: _find_and_load\\n",\n  "<frozen importlib._bootstrap>(1004):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(153): <frozen importlib._bootstrap>(154):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(157):  --- modulename: _bootstrap, funcname: _get_module_lock\\n",\n  "<frozen importlib._bootstrap>(172): <frozen importlib._bootstrap>(173): <frozen importlib._bootstrap>(174): <frozen importlib._bootstrap>(175): <frozen importlib._bootstrap>(176): <frozen importlib._bootstrap>(177): <frozen importlib._bootstrap>(179): <frozen importlib._bootstrap>(180): <frozen importlib._bootstrap>(183):  --- modulename: _bootstrap, funcname: __init__\\n",\n  "<frozen importlib._bootstrap>(59): <frozen importlib._bootstrap>(60): <frozen importlib._bootstrap>(61): <frozen importlib._bootstrap>(62): <frozen importlib._bootstrap>(63): <frozen importlib._bootstrap>(64): <frozen importlib._bootstrap>(185): <frozen importlib._bootstrap>(196): <frozen importlib._bootstrap>(198): <frozen importlib._bootstrap>(200): <frozen importlib._bootstrap>(158):  --- modulename: _bootstrap, funcname: acquire\\n",\n  "<frozen importlib._bootstrap>(93): <frozen importlib._bootstrap>(94): <frozen importlib._bootstrap>(95): <frozen importlib._bootstrap>(97): <frozen importlib._bootstrap>(98): <frozen importlib._bootstrap>(99): <frozen importlib._bootstrap>(100): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(110): <frozen importlib._bootstrap>(101): <frozen importlib._bootstrap>(1005): <frozen importlib._bootstrap>(1006): <frozen importlib._bootstrap>(1007):  --- modulename: _bootstrap, funcname: _find_and_load_unlocked\\n",\n  "<frozen importlib._bootstrap>(968): <frozen importlib._bootstrap>(969): <frozen importlib._bootstrap>(970): <frozen importlib._bootstrap>(982):  --- modulename: _bootstrap, funcname: _find_spec\\n",\n  "<frozen importlib._bootstrap>(903): <frozen importlib._bootstrap>(904): <frozen importlib._bootstrap>(909): <frozen importlib._bootstrap>(915): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: __init__, funcname: find_spec\\n",\n  "__init__.py(85):         if path is not None:\\n",\n  "__init__.py(88):         method_name = \'spec_for_{fullname}\'.format(**locals())\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  "__init__.py(90):         return method()\\n",\n  " --- modulename: __init__, funcname: <lambda>\\n",\n  "__init__.py(89):         method = getattr(self, method_name, lambda: None)\\n",\n  " --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap>(738): <frozen importlib._bootstrap>(740): <frozen importlib._bootstrap>(743):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap, funcname: find_spec\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap>(813): <frozen importlib._bootstrap>(816):  --- modulename: _bootstrap, funcname: __exit__\\n",\n  "<frozen importlib._bootstrap>(880): <frozen importlib._bootstrap>(926): <frozen importlib._bootstrap>(916): <frozen importlib._bootstrap>(917):  --- modulename: _bootstrap, funcname: __enter__\\n",\n  "<frozen importlib._bootstrap>(876): <frozen importlib._bootstrap>(918): <frozen importlib._bootstrap>(919): <frozen importlib._bootstrap>(925):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1421): <frozen importlib._bootstrap_external>(1422): <frozen importlib._bootstrap_external>(1423):  --- modulename: _bootstrap_external, funcname: _get_spec\\n",\n  "<frozen importlib._bootstrap_external>(1388): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1558): <frozen importlib._bootstrap_external>(1563): <frozen importlib._bootstrap_external>(1398): <frozen importlib._bootstrap_external>(1399): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1389): <frozen importlib._bootstrap_external>(1390): <frozen importlib._bootstrap_external>(1392):  --- modulename: _bootstrap_external, funcname: _path_importer_cache\\n",\n  "<frozen importlib._bootstrap_external>(1354): <frozen importlib._bootstrap_external>(1361): <frozen importlib._bootstrap_external>(1362): <frozen importlib._bootstrap_external>(1366): <frozen importlib._bootstrap_external>(1393): <frozen importlib._bootstrap_external>(1394): <frozen importlib._bootstrap_external>(1395):  --- modulename: _bootstrap_external, funcname: find_spec\\n",\n  "<frozen importlib._bootstrap_external>(1519): <frozen importlib._bootstrap_external>(1520): <frozen importlib._bootstrap_external>(1521): <frozen importlib._bootstrap_external>(1522):  --- modulename: _bootstrap_external, funcname: _path_stat\\n",\n  "<frozen importlib._bootstrap_external>(142): <frozen importlib._bootstrap_external>(1525): <frozen importlib._bootstrap_external>(1529):  --- modulename: _bootstrap_external, funcname: _relax_case\\n",\n  "<frozen importlib._bootstrap_external>(70): <frozen importlib._bootstrap_external>(1533): <frozen importlib._bootstrap_external>(1534): <frozen importlib._bootstrap_external>(1536): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "<frozen importlib._bootstrap>(233): <frozen importlib._bootstrap_external>(1554): <frozen importlib._bootstrap_external>(1548): <frozen importlib._bootstrap_external>(1549): <frozen importlib._bootstrap_external>(1550):  --- modulename: _bootstrap_external, funcname: _path_join\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123):  --- modulename: _bootstrap_external, funcname: <listcomp>\\n",\n  "<frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(124): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(123): <frozen importlib._bootstrap_external>(1553):  --- modulename: _bootstrap, funcname: _verbose_message\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(552):                     break\\n",\n  "sre_parse.py(605):             set = _uniq(set)\\n",\n  " --- modulename: sre_parse, funcname: _uniq\\n",\n  "sre_parse.py(433):     return list(dict.fromkeys(items))\\n",\n  "sre_parse.py(607):             if _len(set) == 1 and set[0][0] is LITERAL:\\n",\n  "sre_parse.py(614):                 if negate:\\n",\n  "sre_parse.py(615):                     set.insert(0, (NEGATE, None))\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(618):                 subpatternappend((IN, set))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(622):             here = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(623):             if this == \\"?\\":\\n",\n  "sre_parse.py(625):             elif this == \\"*\\":\\n",\n  "sre_parse.py(628):             elif this == \\"+\\":\\n",\n  "sre_parse.py(630):             elif this == \\"{\\":\\n",\n  "sre_parse.py(631):                 if source.next == \\"}\\":\\n",\n  "sre_parse.py(635):                 min, max = 0, MAXREPEAT\\n",\n  "sre_parse.py(636):                 lo = hi = \\"\\"\\n",\n  "sre_parse.py(637):                 while source.next in DIGITS:\\n",\n  "sre_parse.py(638):                     lo += sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(637):                 while source.next in DIGITS:\\n",\n  "sre_parse.py(639):                 if sourcematch(\\",\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(643):                     hi = lo\\n",\n  "sre_parse.py(644):                 if not sourcematch(\\"}\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(649):                 if lo:\\n",\n  "sre_parse.py(650):                     min = int(lo)\\n",\n  "sre_parse.py(651):                     if min >= MAXREPEAT:\\n",\n  "sre_parse.py(653):                 if hi:\\n",\n  "sre_parse.py(654):                     max = int(hi)\\n",\n  "sre_parse.py(655):                     if max >= MAXREPEAT:\\n",\n  "sre_parse.py(657):                     if max < min:\\n",\n  "sre_parse.py(663):             if subpattern:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(664):                 item = subpattern[-1:]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(166):             return SubPattern(self.state, self.data[index])\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(667):             if not item or item[0][0] is AT:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(670):             if item[0][0] in _REPEATCODES:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(673):             if item[0][0] is SUBPATTERN:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(677):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(680):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))\\n",\n  " --- modulename: sre_parse, funcname: __setitem__\\n",\n  "sre_parse.py(169):         self.data[index] = code\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(529):             subpatternappend((LITERAL, _ord(this)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(449):         return items[0]\\n",\n  "sre_parse.py(755):                     if dir < 0:\\n",\n  "sre_parse.py(756):                         if lookbehindgroups is None:\\n",\n  "sre_parse.py(757):                             state.lookbehindgroups = None\\n",\n  "sre_parse.py(758):                     if not sourcematch(\\")\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(761):                     if char == \\"=\\":\\n",\n  "sre_parse.py(762):                         subpatternappend((ASSERT, (dir, p)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(510):             break # end of subpattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(516):                 continue\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(686):             start = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(687):             group = True\\n",\n  "sre_parse.py(688):             name = None\\n",\n  "sre_parse.py(689):             add_flags = 0\\n",\n  "sre_parse.py(690):             del_flags = 0\\n",\n  "sre_parse.py(691):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(693):                 char = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(694):                 if char is None:\\n",\n  "sre_parse.py(696):                 if char == \\"P\\":\\n",\n  "sre_parse.py(727):                 elif char == \\":\\":\\n",\n  "sre_parse.py(730):                 elif char == \\"#\\":\\n",\n  "sre_parse.py(740):                 elif char in \\"=!<\\":\\n",\n  "sre_parse.py(742):                     dir = 1\\n",\n  "sre_parse.py(743):                     if char == \\"<\\":\\n",\n  "sre_parse.py(744):                         char = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(745):                         if char is None:\\n",\n  "sre_parse.py(747):                         if char not in \\"=!\\":\\n",\n  "sre_parse.py(750):                         dir = -1 # lookbehind\\n",\n  "sre_parse.py(751):                         lookbehindgroups = state.lookbehindgroups\\n",\n  "sre_parse.py(752):                         if lookbehindgroups is None:\\n",\n  "sre_parse.py(753):                             state.lookbehindgroups = state.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(754):                     p = _parse_sub(source, state, verbose, nested + 1)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(515):             if this in WHITESPACE:\\n",\n  "sre_parse.py(517):             if this == \\"#\\":\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(532):             here = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(534):             set = []\\n",\n  "sre_parse.py(535):             setappend = set.append\\n",\n  "sre_parse.py(538):             if source.next == \'[\':\\n",\n  "sre_parse.py(544):             negate = sourcematch(\\"^\\")\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(554):                     code1 = _class_escape(source, this)\\n",\n  " --- modulename: sre_parse, funcname: _class_escape\\n",\n  "sre_parse.py(297):     code = ESCAPES.get(escape)\\n",\n  "sre_parse.py(298):     if code:\\n",\n  "sre_parse.py(300):     code = CATEGORIES.get(escape)\\n",\n  "sre_parse.py(301):     if code and code[0] is IN:\\n",\n  "sre_parse.py(302):         return code\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(602):                         code1 = code1[1][0]\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(554):                     code1 = _class_escape(source, this)\\n",\n  " --- modulename: sre_parse, funcname: _class_escape\\n",\n  "sre_parse.py(297):     code = ESCAPES.get(escape)\\n",\n  "sre_parse.py(298):     if code:\\n",\n  "sre_parse.py(300):     code = CATEGORIES.get(escape)\\n",\n  "sre_parse.py(301):     if code and code[0] is IN:\\n",\n  "sre_parse.py(302):         return code\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(602):                         code1 = code1[1][0]\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(552):                     break\\n",\n  "sre_parse.py(605):             set = _uniq(set)\\n",\n  " --- modulename: sre_parse, funcname: _uniq\\n",\n  "sre_parse.py(433):     return list(dict.fromkeys(items))\\n",\n  "sre_parse.py(607):             if _len(set) == 1 and set[0][0] is LITERAL:\\n",\n  "sre_parse.py(614):                 if negate:\\n",\n  "sre_parse.py(615):                     set.insert(0, (NEGATE, None))\\n",\n  "sre_parse.py(618):                 subpatternappend((IN, set))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(172):         elif op in SUCCESS_CODES:\\n",\n  "sre_compile.py(174):         elif op in ASSERT_CODES:\\n",\n  "sre_compile.py(175):             emit(op)\\n",\n  "sre_compile.py(176):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(177):             if av[0] >= 0:\\n",\n  "sre_compile.py(180):                 lo, hi = av[1].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_compile.py(181):                 if lo != hi:\\n",\n  "sre_compile.py(183):                 emit(lo) # look behind\\n",\n  "sre_compile.py(184):             _compile(code, av[1], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(296):                 elif op is RANGE:\\n",\n  "sre_compile.py(313):                 elif op is NEGATE:\\n",\n  "sre_compile.py(316):                     tail.append((op, av))\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(341):             runs = None\\n",\n  "sre_compile.py(342):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(363):     if len(charmap) == 256:\\n",\n  "sre_compile.py(364):         data = _mk_bitmap(charmap)\\n",\n  " --- modulename: sre_compile, funcname: _mk_bitmap\\n",\n  "sre_compile.py(412):     s = bits.translate(_BITS_TRANS)[::-1]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  " --- modulename: sre_compile, funcname: <listcomp>\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(414):             for i in range(len(s), 0, -_CODEBITS)]\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(413):     return [_int(s[i - _CODEBITS: i], 2)\\n",\n  "sre_compile.py(365):         out.append((CHARSET, data))\\n",\n  "sre_compile.py(366):         out += tail\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(367):         return out, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(124):                 emit(IN)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n",\n  "sre_compile.py(262):             code.extend(av)\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n",\n  "sre_compile.py(263):         elif op is BIGCHARSET:\\n",\n  "sre_compile.py(265):         elif op is CATEGORY:\\n",\n  "sre_compile.py(266):             if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(268):             elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(269):                 emit(CH_UNICODE[av])\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(185):             emit(SUCCESS)\\n",\n  "sre_compile.py(186):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(172):         elif op in SUCCESS_CODES:\\n",\n  "sre_compile.py(174):         elif op in ASSERT_CODES:\\n",\n  "sre_compile.py(175):             emit(op)\\n",\n  "sre_compile.py(176):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(177):             if av[0] >= 0:\\n",\n  "sre_compile.py(178):                 emit(0) # look ahead\\n",\n  "sre_compile.py(184):             _compile(code, av[1], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(138):             if flags & SRE_FLAG_TEMPLATE:\\n",\n  "sre_compile.py(140):             if _simple(av[2]):\\n",\n  " --- modulename: sre_compile, funcname: _simple\\n",\n  "sre_compile.py(425):     if len(p) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_compile.py(427):     op, av = p[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(428):     if op is SUBPATTERN:\\n",\n  "sre_compile.py(430):     return op in _UNIT_CODES\\n",\n  "sre_compile.py(141):                 if op is MAX_REPEAT:\\n",\n  "sre_compile.py(142):                     emit(REPEAT_ONE)\\n",\n  "sre_compile.py(145):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(146):                 emit(av[0])\\n",\n  "sre_compile.py(147):                 emit(av[1])\\n",\n  "sre_compile.py(148):                 _compile(code, av[2], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(93):                 emit(op)\\n",\n  "sre_compile.py(94):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(149):                 emit(SUCCESS)\\n",\n  "sre_compile.py(150):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(296):                 elif op is RANGE:\\n",\n  "sre_compile.py(313):                 elif op is NEGATE:\\n",\n  "sre_compile.py(316):                     tail.append((op, av))\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(339):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(355):         out += tail\\n",\n  "sre_compile.py(357):         if hascased or len(out) < len(charset):\\n",\n  "sre_compile.py(360):         return charset, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(124):                 emit(IN)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n",\n  "sre_compile.py(263):         elif op is BIGCHARSET:\\n",\n  "sre_compile.py(265):         elif op is CATEGORY:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(266):             if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(268):             elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(269):                 emit(CH_UNICODE[av])\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(185):             emit(SUCCESS)\\n",\n  "sre_compile.py(186):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(210):                 emit(JUMP)\\n",\n  "sre_compile.py(211):                 tailappend(_len(code)); emit(0)\\n",\n  "sre_compile.py(212):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(213):             emit(FAILURE) # end of branch\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(215):                 code[tail] = _len(code) - tail\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(215):                 code[tail] = _len(code) - tail\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(215):                 code[tail] = _len(code) - tail\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(210):                 emit(JUMP)\\n",\n  "sre_compile.py(211):                 tailappend(_len(code)); emit(0)\\n",\n  "sre_compile.py(212):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(206):             for av in av[1]:\\n",\n  "sre_compile.py(213):             emit(FAILURE) # end of branch\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(215):                 code[tail] = _len(code) - tail\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(215):                 code[tail] = _len(code) - tail\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(215):                 code[tail] = _len(code) - tail\\n",\n  "sre_compile.py(214):             for tail in tail:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(169):             if group:\\n",\n  "sre_compile.py(170):                 emit(MARK)\\n",\n  "sre_compile.py(171):                 emit((group-1)*2+1)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(609):     code.append(SUCCESS)\\n",\n  "sre_compile.py(611):     return code\\n",\n  "sre_compile.py(770):     if flags & SRE_FLAG_DEBUG:\\n",\n  "sre_compile.py(775):     groupindex = p.state.groupdict\\n",\n  "sre_compile.py(776):     indexgroup = [None] * p.state.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(777):     for k, i in groupindex.items():\\n",\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "sre_compile.py(781):         pattern, flags | p.state.flags, code,\\n",\n  "sre_compile.py(782):         p.state.groups-1,\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(783):         groupindex, tuple(indexgroup)\\n",\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "re.py(305):     if not (flags & DEBUG):\\n",\n  " --- modulename: enum, funcname: __and__\\n",\n  "enum.py(978):         if not isinstance(other, (self.__class__, int)):\\n",\n  "enum.py(980):         return self.__class__(self._value_ & self.__class__(other)._value_)\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  "re.py(306):         if len(_cache) >= _MAXCACHE:\\n",\n  "re.py(312):         _cache[type(pattern), pattern, flags] = p\\n",\n  "re.py(313):     return p\\n",\n  "textwrap.py(99):     del word_punct, letter, nowhitespace\\n",\n  "textwrap.py(105):     wordsep_simple_re = re.compile(r\'(%s+)\' % whitespace)\\n",\n  " --- modulename: re, funcname: compile\\n",\n  "re.py(252):     return _compile(pattern, flags)\\n",\n  " --- modulename: re, funcname: _compile\\n",\n  "re.py(291):     if isinstance(flags, RegexFlag):\\n",\n  "re.py(293):     try:\\n",\n  "re.py(294):         return _cache[type(pattern), pattern, flags]\\n",\n  "re.py(295):     except KeyError:\\n",\n  "re.py(296):         pass\\n",\n  "re.py(297):     if isinstance(pattern, Pattern):\\n",\n  "re.py(302):     if not sre_compile.isstring(pattern):\\n",\n  " --- modulename: sre_compile, funcname: isstring\\n",\n  "sre_compile.py(596):     return isinstance(obj, (str, bytes))\\n",\n  "re.py(304):     p = sre_compile.compile(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: compile\\n",\n  "sre_compile.py(762):     if isstring(p):\\n",\n  " --- modulename: sre_compile, funcname: isstring\\n",\n  "sre_compile.py(596):     return isinstance(obj, (str, bytes))\\n",\n  "sre_compile.py(763):         pattern = p\\n",\n  "sre_compile.py(764):         p = sre_parse.parse(p, flags)\\n",\n  " --- modulename: sre_parse, funcname: parse\\n",\n  "sre_parse.py(942):     source = Tokenizer(str)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(225):         self.istext = isinstance(string, str)\\n",\n  "sre_parse.py(226):         self.string = string\\n",\n  "sre_parse.py(227):         if not self.istext:\\n",\n  "sre_parse.py(229):         self.decoded_string = string\\n",\n  "sre_parse.py(230):         self.index = 0\\n",\n  "sre_parse.py(231):         self.next = None\\n",\n  "sre_parse.py(232):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(944):     if state is None:\\n",\n  "sre_parse.py(945):         state = State()\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(77):         self.flags = 0\\n",\n  "sre_parse.py(78):         self.groupdict = {}\\n",\n  "sre_parse.py(79):         self.groupwidths = [None]  # group 0\\n",\n  "sre_parse.py(80):         self.lookbehindgroups = None\\n",\n  "sre_parse.py(946):     state.flags = flags\\n",\n  "sre_parse.py(947):     state.str = str\\n",\n  "sre_parse.py(949):     try:\\n",\n  "sre_parse.py(950):         p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(204):             elif op is GROUPREF:\\n",\n  "sre_parse.py(208):             elif op is GROUPREF_EXISTS:\\n",\n  "sre_parse.py(218):             elif op is SUCCESS:\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(198):                 i, j = av[2].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(199):                 lo = lo + i * av[0]\\n",\n  "sre_parse.py(200):                 hi = hi + j * av[1]\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(204):             elif op is GROUPREF:\\n",\n  "sre_parse.py(208):             elif op is GROUPREF_EXISTS:\\n",\n  "sre_parse.py(218):             elif op is SUCCESS:\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_compile.py(541):     if hi > MAXCODE:\\n",\n  "sre_compile.py(543):     if lo == 0:\\n",\n  "sre_compile.py(547):     prefix = []\\n",\n  "sre_compile.py(548):     prefix_skip = 0\\n",\n  "sre_compile.py(549):     charset = [] # not used\\n",\n  "sre_compile.py(550):     if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):\\n",\n  "sre_compile.py(552):         prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_literal_prefix\\n",\n  "sre_compile.py(463):     prefix = []\\n",\n  "sre_compile.py(464):     prefixappend = prefix.append\\n",\n  "sre_compile.py(465):     prefix_skip = None\\n",\n  "sre_compile.py(466):     iscased = _get_iscased(flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_iscased\\n",\n  "sre_compile.py(454):     if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(455):         return None\\n",\n  "sre_compile.py(467):     for op, av in pattern.data:\\n",\n  "sre_compile.py(468):         if op is LITERAL:\\n",\n  "sre_compile.py(472):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(487):             break\\n",\n  "sre_compile.py(490):     return prefix, prefix_skip, False\\n",\n  "sre_compile.py(554):         if not prefix:\\n",\n  "sre_compile.py(555):             charset = _get_charset_prefix(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_charset_prefix\\n",\n  "sre_compile.py(494):         if not pattern.data:\\n",\n  "sre_compile.py(496):         op, av = pattern.data[0]\\n",\n  "sre_compile.py(497):         if op is not SUBPATTERN:\\n",\n  "sre_compile.py(498):             break\\n",\n  "sre_compile.py(504):     iscased = _get_iscased(flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_iscased\\n",\n  "sre_compile.py(454):     if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(455):         return None\\n",\n  "sre_compile.py(505):     if op is LITERAL:\\n",\n  "sre_compile.py(509):     elif op is BRANCH:\\n",\n  "sre_compile.py(521):     elif op is IN:\\n",\n  "sre_compile.py(534):     return None\\n",\n  "sre_compile.py(561):     emit = code.append\\n",\n  "sre_compile.py(562):     emit(INFO)\\n",\n  "sre_compile.py(563):     skip = len(code); emit(0)\\n",\n  "sre_compile.py(565):     mask = 0\\n",\n  "sre_compile.py(566):     if prefix:\\n",\n  "sre_compile.py(570):     elif charset:\\n",\n  "sre_compile.py(572):     emit(mask)\\n",\n  "sre_compile.py(574):     if lo < MAXCODE:\\n",\n  "sre_compile.py(575):         emit(lo)\\n",\n  "sre_compile.py(579):     emit(min(hi, MAXCODE))\\n",\n  "sre_compile.py(581):     if prefix:\\n",\n  "sre_compile.py(589):     elif charset:\\n",\n  "sre_compile.py(593):     code[skip] = len(code) - skip\\n",\n  "sre_compile.py(607):     _compile(code, p.data, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(172):         elif op in SUCCESS_CODES:\\n",\n  "sre_compile.py(174):         elif op in ASSERT_CODES:\\n",\n  "sre_compile.py(187):         elif op is CALL:\\n",\n  "sre_compile.py(193):         elif op is AT:\\n",\n  "sre_compile.py(194):             emit(op)\\n",\n  "sre_compile.py(195):             if flags & SRE_FLAG_MULTILINE:\\n",\n  "sre_compile.py(196):                 av = AT_MULTILINE.get(av, av)\\n",\n  "sre_compile.py(197):             if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(199):             elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(200):                 av = AT_UNICODE.get(av, av)\\n",\n  "sre_compile.py(201):             emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(138):             if flags & SRE_FLAG_TEMPLATE:\\n",\n  "sre_compile.py(140):             if _simple(av[2]):\\n",\n  " --- modulename: sre_compile, funcname: _simple\\n",\n  "sre_compile.py(425):     if len(p) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_compile.py(427):     op, av = p[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(428):     if op is SUBPATTERN:\\n",\n  "sre_compile.py(430):     return op in _UNIT_CODES\\n",\n  "sre_compile.py(141):                 if op is MAX_REPEAT:\\n",\n  "sre_compile.py(142):                     emit(REPEAT_ONE)\\n",\n  "sre_compile.py(145):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(146):                 emit(av[0])\\n",\n  "sre_compile.py(147):                 emit(av[1])\\n",\n  "sre_compile.py(148):                 _compile(code, av[2], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(339):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(351):             if q - p == 1:\\n",\n  "sre_compile.py(352):                 out.append((LITERAL, p))\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(351):             if q - p == 1:\\n",\n  "sre_compile.py(352):                 out.append((LITERAL, p))\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(355):         out += tail\\n",\n  "sre_compile.py(357):         if hascased or len(out) < len(charset):\\n",\n  "sre_compile.py(360):         return charset, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(124):                 emit(IN)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(257):             emit(av)\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(257):             emit(av)\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(149):                 emit(SUCCESS)\\n",\n  "sre_compile.py(150):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(172):         elif op in SUCCESS_CODES:\\n",\n  "sre_compile.py(174):         elif op in ASSERT_CODES:\\n",\n  "sre_compile.py(187):         elif op is CALL:\\n",\n  "sre_compile.py(193):         elif op is AT:\\n",\n  "sre_compile.py(194):             emit(op)\\n",\n  "sre_compile.py(195):             if flags & SRE_FLAG_MULTILINE:\\n",\n  "sre_compile.py(196):                 av = AT_MULTILINE.get(av, av)\\n",\n  "sre_compile.py(197):             if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(199):             elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(200):                 av = AT_UNICODE.get(av, av)\\n",\n  "sre_compile.py(201):             emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(609):     code.append(SUCCESS)\\n",\n  "sre_compile.py(611):     return code\\n",\n  "sre_compile.py(770):     if flags & SRE_FLAG_DEBUG:\\n",\n  "sre_compile.py(775):     groupindex = p.state.groupdict\\n",\n  "sre_compile.py(776):     indexgroup = [None] * p.state.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(777):     for k, i in groupindex.items():\\n",\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "sre_compile.py(781):         pattern, flags | p.state.flags, code,\\n",\n  "sre_compile.py(782):         p.state.groups-1,\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(783):         groupindex, tuple(indexgroup)\\n",\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "re.py(305):     if not (flags & DEBUG):\\n",\n  " --- modulename: enum, funcname: __and__\\n",\n  "enum.py(978):         if not isinstance(other, (self.__class__, int)):\\n",\n  "enum.py(980):         return self.__class__(self._value_ & self.__class__(other)._value_)\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  "re.py(306):         if len(_cache) >= _MAXCACHE:\\n",\n  "re.py(312):         _cache[type(pattern), pattern, flags] = p\\n",\n  "re.py(313):     return p\\n",\n  "textwrap.py(412): _leading_whitespace_re = re.compile(\'(^[ \\\\t]*)(?:[^ \\\\t\\\\n])\', re.MULTILINE)\\n",\n  " --- modulename: re, funcname: compile\\n",\n  "re.py(252):     return _compile(pattern, flags)\\n",\n  " --- modulename: re, funcname: _compile\\n",\n  "re.py(291):     if isinstance(flags, RegexFlag):\\n",\n  "re.py(292):         flags = flags.value\\n",\n  " --- modulename: types, funcname: __get__\\n",\n  "types.py(172):         if instance is None:\\n",\n  "types.py(176):         elif self.fget is None:\\n",\n  "types.py(178):         return self.fget(instance)\\n",\n  " --- modulename: enum, funcname: value\\n",\n  "enum.py(795):         return self._value_\\n",\n  "re.py(293):     try:\\n",\n  "re.py(294):         return _cache[type(pattern), pattern, flags]\\n",\n  "re.py(295):     except KeyError:\\n",\n  "re.py(296):         pass\\n",\n  "re.py(297):     if isinstance(pattern, Pattern):\\n",\n  "re.py(302):     if not sre_compile.isstring(pattern):\\n",\n  " --- modulename: sre_compile, funcname: isstring\\n",\n  "sre_compile.py(596):     return isinstance(obj, (str, bytes))\\n",\n  "re.py(304):     p = sre_compile.compile(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: compile\\n",\n  "sre_compile.py(762):     if isstring(p):\\n",\n  " --- modulename: sre_compile, funcname: isstring\\n",\n  "sre_compile.py(596):     return isinstance(obj, (str, bytes))\\n",\n  "sre_compile.py(763):         pattern = p\\n",\n  "sre_compile.py(764):         p = sre_parse.parse(p, flags)\\n",\n  " --- modulename: sre_parse, funcname: parse\\n",\n  "sre_parse.py(942):     source = Tokenizer(str)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(225):         self.istext = isinstance(string, str)\\n",\n  "sre_parse.py(226):         self.string = string\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(227):         if not self.istext:\\n",\n  "sre_parse.py(229):         self.decoded_string = string\\n",\n  "sre_parse.py(230):         self.index = 0\\n",\n  "sre_parse.py(231):         self.next = None\\n",\n  "sre_parse.py(232):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(944):     if state is None:\\n",\n  "sre_parse.py(945):         state = State()\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(77):         self.flags = 0\\n",\n  "sre_parse.py(78):         self.groupdict = {}\\n",\n  "sre_parse.py(79):         self.groupwidths = [None]  # group 0\\n",\n  "sre_parse.py(80):         self.lookbehindgroups = None\\n",\n  "sre_parse.py(946):     state.flags = flags\\n",\n  "sre_parse.py(947):     state.str = str\\n",\n  "sre_parse.py(949):     try:\\n",\n  "sre_parse.py(950):         p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(686):             start = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(687):             group = True\\n",\n  "sre_parse.py(688):             name = None\\n",\n  "sre_parse.py(689):             add_flags = 0\\n",\n  "sre_parse.py(690):             del_flags = 0\\n",\n  "sre_parse.py(691):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(829):             if group is not None:\\n",\n  "sre_parse.py(830):                 try:\\n",\n  "sre_parse.py(831):                     group = state.opengroup(name)\\n",\n  " --- modulename: sre_parse, funcname: opengroup\\n",\n  "sre_parse.py(85):         gid = self.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(86):         self.groupwidths.append(None)\\n",\n  "sre_parse.py(87):         if self.groups > MAXGROUPS:\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(89):         if name is not None:\\n",\n  "sre_parse.py(95):         return gid\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(836):             p = _parse_sub(source, state, sub_verbose, nested + 1)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(844):         elif this == \\"^\\":\\n",\n  "sre_parse.py(845):             subpatternappend((AT, AT_BEGINNING))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(532):             here = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(534):             set = []\\n",\n  "sre_parse.py(535):             setappend = set.append\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(538):             if source.next == \'[\':\\n",\n  "sre_parse.py(544):             negate = sourcematch(\\"^\\")\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(622):             here = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(623):             if this == \\"?\\":\\n",\n  "sre_parse.py(625):             elif this == \\"*\\":\\n",\n  "sre_parse.py(626):                 min, max = 0, MAXREPEAT\\n",\n  "sre_parse.py(663):             if subpattern:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(664):                 item = subpattern[-1:]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(166):             return SubPattern(self.state, self.data[index])\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(667):             if not item or item[0][0] is AT:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(670):             if item[0][0] in _REPEATCODES:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(673):             if item[0][0] is SUBPATTERN:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(677):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(680):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))\\n",\n  " --- modulename: sre_parse, funcname: __setitem__\\n",\n  "sre_parse.py(169):         self.data[index] = code\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(237):         except IndexError:\\n",\n  "sre_parse.py(238):             self.next = None\\n",\n  "sre_parse.py(239):             return\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(844):         elif this == \\"^\\":\\n",\n  "sre_parse.py(847):         elif this == \\"$\\":\\n",\n  "sre_parse.py(848):             subpatternappend((AT, AT_END))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(508):             break # end of pattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(449):         return items[0]\\n",\n  "sre_parse.py(960):     p.state.flags = fix_flags(str, p.state.flags)\\n",\n  " --- modulename: sre_parse, funcname: fix_flags\\n",\n  "sre_parse.py(925):     if isinstance(src, str):\\n",\n  "sre_parse.py(926):         if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_parse.py(928):         if not flags & SRE_FLAG_ASCII:\\n",\n  "sre_parse.py(929):             flags |= SRE_FLAG_UNICODE\\n",\n  "sre_parse.py(937):     return flags\\n",\n  "sre_parse.py(962):     if source.next is not None:\\n",\n  "sre_parse.py(966):     if flags & SRE_FLAG_DEBUG:\\n",\n  "sre_parse.py(969):     return p\\n",\n  "sre_compile.py(768):     code = _code(p, flags)\\n",\n  " --- modulename: sre_compile, funcname: _code\\n",\n  "sre_compile.py(600):     flags = p.state.flags | flags\\n",\n  "sre_compile.py(601):     code = []\\n",\n  "sre_compile.py(604):     _compile_info(code, p, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile_info\\n",\n  "sre_compile.py(540):     lo, hi = pattern.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(198):                 i, j = av[2].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(199):                 lo = lo + i * av[0]\\n",\n  "sre_parse.py(200):                 hi = hi + j * av[1]\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(204):             elif op is GROUPREF:\\n",\n  "sre_parse.py(208):             elif op is GROUPREF_EXISTS:\\n",\n  "sre_parse.py(218):             elif op is SUCCESS:\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_compile.py(541):     if hi > MAXCODE:\\n",\n  "sre_compile.py(543):     if lo == 0:\\n",\n  "sre_compile.py(547):     prefix = []\\n",\n  "sre_compile.py(548):     prefix_skip = 0\\n",\n  "sre_compile.py(549):     charset = [] # not used\\n",\n  "sre_compile.py(550):     if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):\\n",\n  "sre_compile.py(552):         prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_literal_prefix\\n",\n  "sre_compile.py(463):     prefix = []\\n",\n  "sre_compile.py(464):     prefixappend = prefix.append\\n",\n  "sre_compile.py(465):     prefix_skip = None\\n",\n  "sre_compile.py(466):     iscased = _get_iscased(flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_iscased\\n",\n  "sre_compile.py(454):     if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(455):         return None\\n",\n  "sre_compile.py(467):     for op, av in pattern.data:\\n",\n  "sre_compile.py(468):         if op is LITERAL:\\n",\n  "sre_compile.py(472):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(487):             break\\n",\n  "sre_compile.py(490):     return prefix, prefix_skip, False\\n",\n  "sre_compile.py(554):         if not prefix:\\n",\n  "sre_compile.py(555):             charset = _get_charset_prefix(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_charset_prefix\\n",\n  "sre_compile.py(494):         if not pattern.data:\\n",\n  "sre_compile.py(496):         op, av = pattern.data[0]\\n",\n  "sre_compile.py(497):         if op is not SUBPATTERN:\\n",\n  "sre_compile.py(498):             break\\n",\n  "sre_compile.py(504):     iscased = _get_iscased(flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_iscased\\n",\n  "sre_compile.py(454):     if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(455):         return None\\n",\n  "sre_compile.py(505):     if op is LITERAL:\\n",\n  "sre_compile.py(509):     elif op is BRANCH:\\n",\n  "sre_compile.py(521):     elif op is IN:\\n",\n  "sre_compile.py(534):     return None\\n",\n  "sre_compile.py(561):     emit = code.append\\n",\n  "sre_compile.py(562):     emit(INFO)\\n",\n  "sre_compile.py(563):     skip = len(code); emit(0)\\n",\n  "sre_compile.py(565):     mask = 0\\n",\n  "sre_compile.py(566):     if prefix:\\n",\n  "sre_compile.py(570):     elif charset:\\n",\n  "sre_compile.py(572):     emit(mask)\\n",\n  "sre_compile.py(574):     if lo < MAXCODE:\\n",\n  "sre_compile.py(575):         emit(lo)\\n",\n  "sre_compile.py(579):     emit(min(hi, MAXCODE))\\n",\n  "sre_compile.py(581):     if prefix:\\n",\n  "sre_compile.py(589):     elif charset:\\n",\n  "sre_compile.py(593):     code[skip] = len(code) - skip\\n",\n  "sre_compile.py(607):     _compile(code, p.data, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(133):             if flags & SRE_FLAG_DOTALL:\\n",\n  "sre_compile.py(136):                 emit(ANY)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(93):                 emit(op)\\n",\n  "sre_compile.py(94):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(93):                 emit(op)\\n",\n  "sre_compile.py(94):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(138):             if flags & SRE_FLAG_TEMPLATE:\\n",\n  "sre_compile.py(140):             if _simple(av[2]):\\n",\n  " --- modulename: sre_compile, funcname: _simple\\n",\n  "sre_compile.py(425):     if len(p) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_compile.py(427):     op, av = p[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(428):     if op is SUBPATTERN:\\n",\n  "sre_compile.py(430):     return op in _UNIT_CODES\\n",\n  "sre_compile.py(141):                 if op is MAX_REPEAT:\\n",\n  "sre_compile.py(142):                     emit(REPEAT_ONE)\\n",\n  "sre_compile.py(145):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(146):                 emit(av[0])\\n",\n  "sre_compile.py(147):                 emit(av[1])\\n",\n  "sre_compile.py(148):                 _compile(code, av[2], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(296):                 elif op is RANGE:\\n",\n  "sre_compile.py(313):                 elif op is NEGATE:\\n",\n  "sre_compile.py(316):                     tail.append((op, av))\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(339):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(355):         out += tail\\n",\n  "sre_compile.py(357):         if hascased or len(out) < len(charset):\\n",\n  "sre_compile.py(360):         return charset, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(124):                 emit(IN)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(258):         elif op is RANGE or op is RANGE_UNI_IGNORE:\\n",\n  "sre_compile.py(261):         elif op is CHARSET:\\n",\n  "sre_compile.py(263):         elif op is BIGCHARSET:\\n",\n  "sre_compile.py(265):         elif op is CATEGORY:\\n",\n  "sre_compile.py(266):             if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(268):             elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(269):                 emit(CH_UNICODE[av])\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(149):                 emit(SUCCESS)\\n",\n  "sre_compile.py(150):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(172):         elif op in SUCCESS_CODES:\\n",\n  "sre_compile.py(174):         elif op in ASSERT_CODES:\\n",\n  "sre_compile.py(187):         elif op is CALL:\\n",\n  "sre_compile.py(193):         elif op is AT:\\n",\n  "sre_compile.py(194):             emit(op)\\n",\n  "sre_compile.py(195):             if flags & SRE_FLAG_MULTILINE:\\n",\n  "sre_compile.py(197):             if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(199):             elif flags & SRE_FLAG_UNICODE:\\n",\n  "sre_compile.py(200):                 av = AT_UNICODE.get(av, av)\\n",\n  "sre_compile.py(201):             emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(609):     code.append(SUCCESS)\\n",\n  "sre_compile.py(611):     return code\\n",\n  "sre_compile.py(770):     if flags & SRE_FLAG_DEBUG:\\n",\n  "sre_compile.py(775):     groupindex = p.state.groupdict\\n",\n  "sre_compile.py(776):     indexgroup = [None] * p.state.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(777):     for k, i in groupindex.items():\\n",\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "sre_compile.py(781):         pattern, flags | p.state.flags, code,\\n",\n  "sre_compile.py(782):         p.state.groups-1,\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(783):         groupindex, tuple(indexgroup)\\n",\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "re.py(305):     if not (flags & DEBUG):\\n",\n  " --- modulename: enum, funcname: __and__\\n",\n  "enum.py(978):         if not isinstance(other, (self.__class__, int)):\\n",\n  "enum.py(980):         return self.__class__(self._value_ & self.__class__(other)._value_)\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  "re.py(306):         if len(_cache) >= _MAXCACHE:\\n",\n  "re.py(312):         _cache[type(pattern), pattern, flags] = p\\n",\n  "re.py(313):     return p\\n",\n  "main.py(98): FILE_BASE = system.getenv_text(\\"FILE_BASE\\", DEFAULT_FILE_BASE,\\n",\n  "main.py(99):                                \\"Basename for output files including dir\\")\\n",\n  "main.py(98): FILE_BASE = system.getenv_text(\\"FILE_BASE\\", DEFAULT_FILE_BASE,\\n",\n  " --- modulename: system, funcname: getenv_text\\n",\n  "system.py(150):     register_env_option(var, description, default)\\n",\n  " --- modulename: system, funcname: register_env_option\\n",\n  "system.py(69):     debug.trace_fmt(7, \\"register_env_option({v}, {dsc}, {dft})\\",\\n",\n  "system.py(70):                     v=var, dsc=description, dft=default)\\n",\n  "system.py(69):     debug.trace_fmt(7, \\"register_env_option({v}, {dsc}, {dft})\\",\\n",\n  " --- modulename: debug, funcname: trace_fmtd\\n",\n  "debug.py(234):         if (trace_level >= level):\\n",\n  "debug.py(257):         return\\n",\n  "system.py(74):     env_options[var] = description\\n",\n  "system.py(75):     env_defaults[var] = default\\n",\n  "system.py(76):     return\\n",\n  "system.py(151):     if default is None:\\n",\n  "system.py(154):     text_value = os.getenv(var)\\n",\n  " --- modulename: os, funcname: getenv\\n",\n  "os.py(775):     return environ.get(key, default)\\n",\n  " --- modulename: _collections_abc, funcname: get\\n",\n  "_collections_abc.py(762):         try:\\n",\n  "_collections_abc.py(763):             return self[key]\\n",\n  " --- modulename: os, funcname: __getitem__\\n",\n  "os.py(675):         try:\\n",\n  "os.py(676):             value = self._data[self.encodekey(key)]\\n",\n  " --- modulename: os, funcname: encode\\n",\n  "os.py(755):             if not isinstance(value, str):\\n",\n  "os.py(757):             return value.encode(encoding, \'surrogateescape\')\\n",\n  "os.py(677):         except KeyError:\\n",\n  "os.py(679):             raise KeyError(key) from None\\n",\n  "_collections_abc.py(764):         except KeyError:\\n",\n  "_collections_abc.py(765):             return default\\n",\n  "system.py(157):     if (text_value is None):\\n",\n  "system.py(158):         debug.trace_fmtd(6, \\"getenv_text: no value for var {v}\\", v=var)\\n",\n  " --- modulename: debug, funcname: trace_fmtd\\n",\n  "debug.py(234):         if (trace_level >= level):\\n",\n  "debug.py(257):         return\\n",\n  "system.py(159):         text_value = default\\n",\n  "system.py(160):     trace_level = 6 if helper else 5\\n",\n  "system.py(162):     debug.trace_fmtd(trace_level, \\"getenv_text(\'{v}\', [def={dft}], [desc={desc}], [helper={hlpr}]) => {r}\\",\\n",\n  "system.py(163):                      v=var, dft=default, desc=description, hlpr=helper, r=text_value)\\n",\n  "system.py(162):     debug.trace_fmtd(trace_level, \\"getenv_text(\'{v}\', [def={dft}], [desc={desc}], [helper={hlpr}]) => {r}\\",\\n",\n  " --- modulename: debug, funcname: trace_fmtd\\n",\n  "debug.py(234):         if (trace_level >= level):\\n",\n  "debug.py(257):         return\\n",\n  "system.py(164):     return (text_value)\\n",\n  "main.py(100): SHOW_ENV_OPTIONS = system.getenv_bool(\\"ENV_USAGE\\", debug.detailed_debugging(),\\n",\n  " --- modulename: debug, funcname: detailed_debugging\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "debug.py(687):     return (get_level() >= DETAILED)\\n",\n  " --- modulename: debug, funcname: get_level\\n",\n  "debug.py(142):         level = 0\\n",\n  "debug.py(143):         try:\\n",\n  "debug.py(144):             assertion(isinstance(level, int))\\n",\n  " --- modulename: debug, funcname: assertion\\n",\n  "debug.py(554):         if (not expression):\\n",\n  "debug.py(575):         return\\n",\n  "debug.py(145):             level = int(trace_level)\\n",\n  "debug.py(148):         return level\\n",\n  "main.py(101):                                       \\"Include environment options in usage\\")\\n",\n  "main.py(100): SHOW_ENV_OPTIONS = system.getenv_bool(\\"ENV_USAGE\\", debug.detailed_debugging(),\\n",\n  " --- modulename: system, funcname: getenv_bool\\n",\n  "system.py(185):     bool_value = default\\n",\n  "system.py(186):     value_text = getenv_value(var, description=description, default=default)\\n",\n  " --- modulename: system, funcname: getenv_value\\n",\n  "system.py(170):     register_env_option(var, description, default)\\n",\n  " --- modulename: system, funcname: register_env_option\\n",\n  "system.py(69):     debug.trace_fmt(7, \\"register_env_option({v}, {dsc}, {dft})\\",\\n",\n  "system.py(70):                     v=var, dsc=description, dft=default)\\n",\n  "system.py(69):     debug.trace_fmt(7, \\"register_env_option({v}, {dsc}, {dft})\\",\\n",\n  " --- modulename: debug, funcname: trace_fmtd\\n",\n  "debug.py(234):         if (trace_level >= level):\\n",\n  "debug.py(257):         return\\n",\n  "system.py(74):     env_options[var] = description\\n",\n  "system.py(75):     env_defaults[var] = default\\n",\n  "system.py(76):     return\\n",\n  "system.py(171):     value = os.getenv(var, default)\\n",\n  " --- modulename: os, funcname: getenv\\n",\n  "os.py(775):     return environ.get(key, default)\\n",\n  " --- modulename: _collections_abc, funcname: get\\n",\n  "_collections_abc.py(762):         try:\\n",\n  "_collections_abc.py(763):             return self[key]\\n",\n  " --- modulename: os, funcname: __getitem__\\n",\n  "os.py(675):         try:\\n",\n  "os.py(676):             value = self._data[self.encodekey(key)]\\n",\n  " --- modulename: os, funcname: encode\\n",\n  "os.py(755):             if not isinstance(value, str):\\n",\n  "os.py(757):             return value.encode(encoding, \'surrogateescape\')\\n",\n  "os.py(677):         except KeyError:\\n",\n  "os.py(679):             raise KeyError(key) from None\\n",\n  "_collections_abc.py(764):         except KeyError:\\n",\n  "_collections_abc.py(765):             return default\\n",\n  "system.py(173):     debug.trace_fmtd(5, \\"getenv_value({v!r}, [def={dft!r}], [desc={dsc!r}]]) => {val!r}\\",\\n",\n  "system.py(174):                      v=var, dft=default, dsc=description, val=value)\\n",\n  "system.py(173):     debug.trace_fmtd(5, \\"getenv_value({v!r}, [def={dft!r}], [desc={dsc!r}]]) => {val!r}\\",\\n",\n  " --- modulename: debug, funcname: trace_fmtd\\n",\n  "debug.py(234):         if (trace_level >= level):\\n",\n  "debug.py(257):         return\\n",\n  "system.py(175):     return (value)\\n",\n  "system.py(187):     if (isinstance(value_text, str) and value_text.strip()):\\n",\n  "system.py(189):     debug.trace_fmtd(5, \\"getenv_bool({v}, {d}) => {r}\\",\\n",\n  "system.py(190):                      v=var, d=default, r=bool_value)\\n",\n  "system.py(189):     debug.trace_fmtd(5, \\"getenv_bool({v}, {d}) => {r}\\",\\n",\n  " --- modulename: debug, funcname: trace_fmtd\\n",\n  "debug.py(234):         if (trace_level >= level):\\n",\n  "debug.py(257):         return\\n",\n  "system.py(191):     return (bool_value)\\n",\n  "main.py(103): INDENT = system.getenv_text(\\"INDENT\\", \\"    \\",\\n",\n  "main.py(104):                             \\"Indentation for system output\\")\\n",\n  "main.py(103): INDENT = system.getenv_text(\\"INDENT\\", \\"    \\",\\n",\n  " --- modulename: system, funcname: getenv_text\\n",\n  "system.py(150):     register_env_option(var, description, default)\\n",\n  " --- modulename: system, funcname: register_env_option\\n",\n  "system.py(69):     debug.trace_fmt(7, \\"register_env_option({v}, {dsc}, {dft})\\",\\n",\n  "system.py(70):                     v=var, dsc=description, dft=default)\\n",\n  "system.py(69):     debug.trace_fmt(7, \\"register_env_option({v}, {dsc}, {dft})\\",\\n",\n  " --- modulename: debug, funcname: trace_fmtd\\n",\n  "debug.py(234):         if (trace_level >= level):\\n",\n  "debug.py(257):         return\\n",\n  "system.py(74):     env_options[var] = description\\n",\n  "system.py(75):     env_defaults[var] = default\\n",\n  "system.py(76):     return\\n",\n  "system.py(151):     if default is None:\\n",\n  "system.py(154):     text_value = os.getenv(var)\\n",\n  " --- modulename: os, funcname: getenv\\n",\n  "os.py(775):     return environ.get(key, default)\\n",\n  " --- modulename: _collections_abc, funcname: get\\n",\n  "_collections_abc.py(762):         try:\\n",\n  "_collections_abc.py(763):             return self[key]\\n",\n  " --- modulename: os, funcname: __getitem__\\n",\n  "os.py(675):         try:\\n",\n  "os.py(676):             value = self._data[self.encodekey(key)]\\n",\n  " --- modulename: os, funcname: encode\\n",\n  "os.py(755):             if not isinstance(value, str):\\n",\n  "os.py(757):             return value.encode(encoding, \'surrogateescape\')\\n",\n  "os.py(677):         except KeyError:\\n",\n  "os.py(679):             raise KeyError(key) from None\\n",\n  "_collections_abc.py(764):         except KeyError:\\n",\n  "_collections_abc.py(765):             return default\\n",\n  "system.py(157):     if (text_value is None):\\n",\n  "system.py(158):         debug.trace_fmtd(6, \\"getenv_text: no value for var {v}\\", v=var)\\n",\n  " --- modulename: debug, funcname: trace_fmtd\\n",\n  "debug.py(234):         if (trace_level >= level):\\n",\n  "debug.py(257):         return\\n",\n  "system.py(159):         text_value = default\\n",\n  "system.py(160):     trace_level = 6 if helper else 5\\n",\n  "system.py(162):     debug.trace_fmtd(trace_level, \\"getenv_text(\'{v}\', [def={dft}], [desc={desc}], [helper={hlpr}]) => {r}\\",\\n",\n  "system.py(163):                      v=var, dft=default, desc=description, hlpr=helper, r=text_value)\\n",\n  "system.py(162):     debug.trace_fmtd(trace_level, \\"getenv_text(\'{v}\', [def={dft}], [desc={desc}], [helper={hlpr}]) => {r}\\",\\n",\n  " --- modulename: debug, funcname: trace_fmtd\\n",\n  "debug.py(234):         if (trace_level >= level):\\n",\n  "debug.py(257):         return\\n",\n  "system.py(164):     return (text_value)\\n",\n  "main.py(105): BRIEF_USAGE = system.getenv_bool(\\"BRIEF_USAGE\\", False,\\n",\n  "main.py(106):                                  \\"Show brief usage with autohelp\\")\\n",\n  "main.py(105): BRIEF_USAGE = system.getenv_bool(\\"BRIEF_USAGE\\", False,\\n",\n  " --- modulename: system, funcname: getenv_bool\\n",\n  "system.py(185):     bool_value = default\\n",\n  "system.py(186):     value_text = getenv_value(var, description=description, default=default)\\n",\n  " --- modulename: system, funcname: getenv_value\\n",\n  "system.py(170):     register_env_option(var, description, default)\\n",\n  " --- modulename: system, funcname: register_env_option\\n",\n  "system.py(69):     debug.trace_fmt(7, \\"register_env_option({v}, {dsc}, {dft})\\",\\n",\n  "system.py(70):                     v=var, dsc=description, dft=default)\\n",\n  "system.py(69):     debug.trace_fmt(7, \\"register_env_option({v}, {dsc}, {dft})\\",\\n",\n  " --- modulename: debug, funcname: trace_fmtd\\n",\n  "debug.py(234):         if (trace_level >= level):\\n",\n  "debug.py(257):         return\\n",\n  "system.py(74):     env_options[var] = description\\n",\n  "system.py(75):     env_defaults[var] = default\\n",\n  "system.py(76):     return\\n",\n  "system.py(171):     value = os.getenv(var, default)\\n",\n  " --- modulename: os, funcname: getenv\\n",\n  "os.py(775):     return environ.get(key, default)\\n",\n  " --- modulename: _collections_abc, funcname: get\\n",\n  "_collections_abc.py(762):         try:\\n",\n  "_collections_abc.py(763):             return self[key]\\n",\n  " --- modulename: os, funcname: __getitem__\\n",\n  "os.py(675):         try:\\n",\n  "os.py(676):             value = self._data[self.encodekey(key)]\\n",\n  " --- modulename: os, funcname: encode\\n",\n  "os.py(755):             if not isinstance(value, str):\\n",\n  "os.py(757):             return value.encode(encoding, \'surrogateescape\')\\n",\n  "os.py(677):         except KeyError:\\n",\n  "os.py(679):             raise KeyError(key) from None\\n",\n  "_collections_abc.py(764):         except KeyError:\\n",\n  "_collections_abc.py(765):             return default\\n",\n  "system.py(173):     debug.trace_fmtd(5, \\"getenv_value({v!r}, [def={dft!r}], [desc={dsc!r}]]) => {val!r}\\",\\n",\n  "system.py(174):                      v=var, dft=default, dsc=description, val=value)\\n",\n  "system.py(173):     debug.trace_fmtd(5, \\"getenv_value({v!r}, [def={dft!r}], [desc={dsc!r}]]) => {val!r}\\",\\n",\n  " --- modulename: debug, funcname: trace_fmtd\\n",\n  "debug.py(234):         if (trace_level >= level):\\n",\n  "debug.py(257):         return\\n",\n  "system.py(175):     return (value)\\n",\n  "system.py(187):     if (isinstance(value_text, str) and value_text.strip()):\\n",\n  "system.py(189):     debug.trace_fmtd(5, \\"getenv_bool({v}, {d}) => {r}\\",\\n",\n  "system.py(190):                      v=var, d=default, r=bool_value)\\n",\n  "system.py(189):     debug.trace_fmtd(5, \\"getenv_bool({v}, {d}) => {r}\\",\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: debug, funcname: trace_fmtd\\n",\n  "debug.py(234):         if (trace_level >= level):\\n",\n  "debug.py(257):         return\\n",\n  "system.py(191):     return (bool_value)\\n",\n  "main.py(110): class Main(object):\\n",\n  " --- modulename: main, funcname: Main\\n",\n  "main.py(110): class Main(object):\\n",\n  "main.py(111):     \\"\\"\\"Class encompassing common script processing\\"\\"\\"\\n",\n  "main.py(112):     argument_parser = None\\n",\n  "main.py(113):     force_unicode = False\\n",\n  "main.py(115):     def __init__(self, runtime_args=None, description=None, skip_args=False,\\n",\n  "main.py(254):     def convert_option(self, option_spec, default_value=None, positional=False):\\n",\n  "main.py(288):     def convert_argument(self, argument_spec, default_value=None):\\n",\n  "main.py(294):     def get_option_name(self, label):\\n",\n  "main.py(301):     def has_parsed_option_old(self, label):\\n",\n  "main.py(312):     def has_parsed_option(self, label):\\n",\n  "main.py(329):     def get_parsed_option(self, label, default=None, positional=False):\\n",\n  "main.py(352):     def get_parsed_argument(self, label, default=None):\\n",\n  "main.py(358):     def check_arguments(self, runtime_args):\\n",\n  "main.py(457):     def setup(self):\\n",\n  "main.py(463):     def process_line(self, line):\\n",\n  "main.py(475):     def run_main_step(self):\\n",\n  "main.py(482):     def run(self):\\n",\n  "main.py(542):     def read_input(self):\\n",\n  "main.py(621):     def is_line_mode(self):\\n",\n  "main.py(625):     def process_input(self):\\n",\n  "main.py(689):     def wrap_up(self):\\n",\n  "main.py(694):     def clean_up(self):\\n",\n  "main.py(711): dummy_app = Main([])\\n",\n  " --- modulename: main, funcname: __init__\\n",\n  "main.py(130):         tpo.debug_format(\\"Main.__init__({args}, d={desc}, b={bools}, t={texts},\\"\\n",\n  "main.py(132):                          + \\" pm={para}, tp={page}, fim={file}, prog={prog}, noargs={skip_args}, kw={kw})\\", 5,\\n",\n  "main.py(133):                          args=runtime_args, desc=description, bools=boolean_options,\\n",\n  "main.py(134):                          texts=text_options, ints=int_options, floats=float_options,\\n",\n  "main.py(135):                          posns=positional_options, skip=skip_input, mi=manual_input,\\n",\n  "main.py(136):                          auto=auto_help, usage=brief_usage,\\n",\n  "main.py(137):                          para=paragraph_mode, page=track_pages, file=file_input_mode,\\n",\n  "main.py(138):                          prog=program, ha=HELP_ARG, skip_args=skip_args, kw=kwargs)\\n",\n  "main.py(130):         tpo.debug_format(\\"Main.__init__({args}, d={desc}, b={bools}, t={texts},\\"\\n",\n  " --- modulename: tpo_common, funcname: debug_format\\n",\n  "tpo_common.py(485):     assert(isinstance(level, int))\\n",\n  "tpo_common.py(486):     if (debugging_level() >= level):\\n",\n  " --- modulename: tpo_common, funcname: debugging_level\\n",\n  "tpo_common.py(439):     return debug.get_level()\\n",\n  " --- modulename: debug, funcname: get_level\\n",\n  "debug.py(142):         level = 0\\n",\n  "debug.py(143):         try:\\n",\n  "debug.py(144):             assertion(isinstance(level, int))\\n",\n  " --- modulename: debug, funcname: assertion\\n",\n  "debug.py(554):         if (not expression):\\n",\n  "debug.py(575):         return\\n",\n  "debug.py(145):             level = int(trace_level)\\n",\n  "debug.py(148):         return level\\n",\n  "tpo_common.py(491):     return\\n",\n  "main.py(139):         self.description = \\"TODO: what the script does\\"   # *** DONT\'T MODIFY: defaults TODO note for client\\n",\n  "main.py(141):         self.boolean_options = []\\n",\n  "main.py(142):         self.text_options = []\\n",\n  "main.py(143):         self.int_options = []\\n",\n  "main.py(144):         self.float_options = []\\n",\n  "main.py(145):         self.positional_options = []\\n",\n  "main.py(146):         self.process_line_warning = False\\n",\n  "main.py(147):         self.input_stream = None\\n",\n  "main.py(148):         self.end_of_page = False\\n",\n  "main.py(151):         self.rel_line_num = -1\\n",\n  "main.py(152):         self.rel_para_num = -1\\n",\n  "main.py(153):         self.page_num = -1\\n",\n  "main.py(154):         self.para_num = -1\\n",\n  "main.py(155):         self.line_num = -1\\n",\n  "main.py(156):         self.char_offset = -1\\n",\n  "main.py(157):         self.raw_line = None\\n",\n  "main.py(162):         if manual_input is None:\\n",\n  "main.py(164):             manual_input = False if (skip_input is None) else skip_input\\n",\n  "main.py(165):             debug.trace_fmt(7, \\"inferred manual_input: {mi}\\", mi=manual_input)\\n",\n  " --- modulename: debug, funcname: trace_fmtd\\n",\n  "debug.py(234):         if (trace_level >= level):\\n",\n  "debug.py(257):         return\\n",\n  "main.py(166):         self.manual_input = manual_input\\n",\n  "main.py(167):         if skip_input is None:\\n",\n  "main.py(168):             skip_input = self.manual_input\\n",\n  "main.py(169):             debug.trace_fmt(7, \\"inferred skip_input: {si}\\", si=skip_input)\\n",\n  " --- modulename: debug, funcname: trace_fmtd\\n",\n  "debug.py(234):         if (trace_level >= level):\\n",\n  "debug.py(257):         return\\n",\n  "main.py(170):         self.skip_input = skip_input\\n",\n  "main.py(172):         self.parser = None\\n",\n  "main.py(173):         if brief_usage is None:\\n",\n  "main.py(174):             brief_usage = BRIEF_USAGE\\n",\n  "main.py(175):         self.brief_usage = brief_usage  # show brief usage instead of full --help\\n",\n  "main.py(176):         if auto_help is None:\\n",\n  "main.py(178):             auto_help = self.skip_input or not self.manual_input\\n",\n  "main.py(179):         self.auto_help = auto_help      # adds --help to command line if no arguments\\n",\n  "main.py(180):         if usage_notes is None:\\n",\n  "main.py(181):             usage_notes = \\"\\"\\n",\n  "main.py(182):         self.notes = usage_notes\\n",\n  "main.py(183):         if paragraph_mode is None:\\n",\n  "main.py(184):             paragraph_mode = USE_PARAGRAPH_MODE\\n",\n  "main.py(185):         self.paragraph_mode = paragraph_mode\\n",\n  "main.py(186):         if file_input_mode is None:\\n",\n  "main.py(187):             file_input_mode = FILE_INPUT_MODE\\n",\n  "main.py(188):         self.file_input_mode = file_input_mode\\n",\n  "main.py(189):         if track_pages is None:\\n",\n  "main.py(190):             track_pages = TRACK_PAGES\\n",\n  "main.py(191):         self.track_pages = track_pages\\n",\n  "main.py(195):         prefix = (FILE_BASE + \\"-\\")\\n",\n  "main.py(196):         ntf_args = {\'prefix\': prefix,\\n",\n  "main.py(199):         self.temp_base = tpo.getenv_text(\\"TEMP_BASE\\",\\n",\n  "main.py(200):                                          tempfile.NamedTemporaryFile(**ntf_args).name)\\n",\n  " --- modulename: tempfile, funcname: NamedTemporaryFile\\n",\n  "tempfile.py(536):     prefix, suffix, dir, output_type = _sanitize_params(prefix, suffix, dir)\\n",\n  " --- modulename: tempfile, funcname: _sanitize_params\\n",\n  "tempfile.py(112):     output_type = _infer_return_type(prefix, suffix, dir)\\n",\n  " --- modulename: tempfile, funcname: _infer_return_type\\n",\n  "tempfile.py(87):     return_type = None\\n",\n  "tempfile.py(88):     for arg in args:\\n",\n  "tempfile.py(89):         if arg is None:\\n",\n  "tempfile.py(92):         if isinstance(arg, _os.PathLike):\\n",\n  " --- modulename: abc, funcname: __instancecheck__\\n",\n  "abc.py(119):             return _abc_instancecheck(cls, instance)\\n",\n  " --- modulename: abc, funcname: __subclasscheck__\\n",\n  "abc.py(123):             return _abc_subclasscheck(cls, subclass)\\n",\n  " --- modulename: os, funcname: __subclasshook__\\n",\n  "os.py(1075):         if cls is PathLike:\\n",\n  "os.py(1076):             return _check_methods(subclass, \'__fspath__\')\\n",\n  " --- modulename: _collections_abc, funcname: _check_methods\\n",\n  "_collections_abc.py(79):     mro = C.__mro__\\n",\n  "_collections_abc.py(80):     for method in methods:\\n",\n  "_collections_abc.py(81):         for B in mro:\\n",\n  "_collections_abc.py(82):             if method in B.__dict__:\\n",\n  "_collections_abc.py(81):         for B in mro:\\n",\n  "_collections_abc.py(82):             if method in B.__dict__:\\n",\n  "_collections_abc.py(81):         for B in mro:\\n",\n  "_collections_abc.py(87):             return NotImplemented\\n",\n  "tempfile.py(95):         if isinstance(arg, bytes):\\n",\n  "tempfile.py(101):             if return_type is bytes:\\n",\n  "tempfile.py(104):             return_type = str\\n",\n  "tempfile.py(88):     for arg in args:\\n",\n  "tempfile.py(89):         if arg is None:\\n",\n  "tempfile.py(90):             continue\\n",\n  "tempfile.py(88):     for arg in args:\\n",\n  "tempfile.py(89):         if arg is None:\\n",\n  "tempfile.py(90):             continue\\n",\n  "tempfile.py(88):     for arg in args:\\n",\n  "tempfile.py(105):     if return_type is None:\\n",\n  "tempfile.py(107):     return return_type\\n",\n  "tempfile.py(113):     if suffix is None:\\n",\n  "tempfile.py(114):         suffix = output_type()\\n",\n  "tempfile.py(115):     if prefix is None:\\n",\n  "tempfile.py(120):     if dir is None:\\n",\n  "tempfile.py(121):         if output_type is str:\\n",\n  "tempfile.py(122):             dir = gettempdir()\\n",\n  " --- modulename: tempfile, funcname: gettempdir\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "tempfile.py(287):     if tempdir is None:\\n",\n  "tempfile.py(294):     return tempdir\\n",\n  "tempfile.py(125):     return prefix, suffix, dir, output_type\\n",\n  "tempfile.py(538):     flags = _bin_openflags\\n",\n  "tempfile.py(542):     if _os.name == \'nt\' and delete:\\n",\n  "tempfile.py(545):     (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags, output_type)\\n",\n  " --- modulename: tempfile, funcname: _mkstemp_inner\\n",\n  "tempfile.py(246):     names = _get_candidate_names()\\n",\n  " --- modulename: tempfile, funcname: _get_candidate_names\\n",\n  "tempfile.py(233):     if _name_sequence is None:\\n",\n  "tempfile.py(240):     return _name_sequence\\n",\n  "tempfile.py(247):     if output_type is bytes:\\n",\n  "tempfile.py(250):     for seq in range(TMP_MAX):\\n",\n  "tempfile.py(251):         name = next(names)\\n",\n  " --- modulename: tempfile, funcname: __next__\\n",\n  "tempfile.py(150):         c = self.characters\\n",\n  "tempfile.py(151):         choose = self.rng.choice\\n",\n  " --- modulename: tempfile, funcname: rng\\n",\n  "tempfile.py(140):         cur_pid = _os.getpid()\\n",\n  "tempfile.py(141):         if cur_pid != getattr(self, \'_rng_pid\', None):\\n",\n  "tempfile.py(144):         return self._rng\\n",\n  "tempfile.py(152):         letters = [choose(c) for dummy in range(8)]\\n",\n  " --- modulename: tempfile, funcname: <listcomp>\\n",\n  "tempfile.py(152):         letters = [choose(c) for dummy in range(8)]\\n",\n  " --- modulename: random, funcname: choice\\n",\n  "random.py(346):         return seq[self._randbelow(len(seq))]\\n",\n  " --- modulename: random, funcname: _randbelow_with_getrandbits\\n",\n  "random.py(240):         if not n:\\n",\n  "random.py(242):         getrandbits = self.getrandbits\\n",\n  "random.py(243):         k = n.bit_length()  # don\'t use (n-1) here because n can be 1\\n",\n  "random.py(244):         r = getrandbits(k)  # 0 <= r < 2**k\\n",\n  "random.py(245):         while r >= n:\\n",\n  "random.py(247):         return r\\n",\n  "tempfile.py(152):         letters = [choose(c) for dummy in range(8)]\\n",\n  " --- modulename: random, funcname: choice\\n",\n  "random.py(346):         return seq[self._randbelow(len(seq))]\\n",\n  " --- modulename: random, funcname: _randbelow_with_getrandbits\\n",\n  "random.py(240):         if not n:\\n",\n  "random.py(242):         getrandbits = self.getrandbits\\n",\n  "random.py(243):         k = n.bit_length()  # don\'t use (n-1) here because n can be 1\\n",\n  "random.py(244):         r = getrandbits(k)  # 0 <= r < 2**k\\n",\n  "random.py(245):         while r >= n:\\n",\n  "random.py(246):             r = getrandbits(k)\\n",\n  "random.py(245):         while r >= n:\\n",\n  "random.py(247):         return r\\n",\n  "tempfile.py(152):         letters = [choose(c) for dummy in range(8)]\\n",\n  " --- modulename: random, funcname: choice\\n",\n  "random.py(346):         return seq[self._randbelow(len(seq))]\\n",\n  " --- modulename: random, funcname: _randbelow_with_getrandbits\\n",\n  "random.py(240):         if not n:\\n",\n  "random.py(242):         getrandbits = self.getrandbits\\n",\n  "random.py(243):         k = n.bit_length()  # don\'t use (n-1) here because n can be 1\\n",\n  "random.py(244):         r = getrandbits(k)  # 0 <= r < 2**k\\n",\n  "random.py(245):         while r >= n:\\n",\n  "random.py(246):             r = getrandbits(k)\\n",\n  "random.py(245):         while r >= n:\\n",\n  "random.py(246):             r = getrandbits(k)\\n",\n  "random.py(245):         while r >= n:\\n",\n  "random.py(247):         return r\\n",\n  "tempfile.py(152):         letters = [choose(c) for dummy in range(8)]\\n",\n  " --- modulename: random, funcname: choice\\n",\n  "random.py(346):         return seq[self._randbelow(len(seq))]\\n",\n  " --- modulename: random, funcname: _randbelow_with_getrandbits\\n",\n  "random.py(240):         if not n:\\n",\n  "random.py(242):         getrandbits = self.getrandbits\\n",\n  "random.py(243):         k = n.bit_length()  # don\'t use (n-1) here because n can be 1\\n",\n  "random.py(244):         r = getrandbits(k)  # 0 <= r < 2**k\\n",\n  "random.py(245):         while r >= n:\\n",\n  "random.py(247):         return r\\n",\n  "tempfile.py(152):         letters = [choose(c) for dummy in range(8)]\\n",\n  " --- modulename: random, funcname: choice\\n",\n  "random.py(346):         return seq[self._randbelow(len(seq))]\\n",\n  " --- modulename: random, funcname: _randbelow_with_getrandbits\\n",\n  "random.py(240):         if not n:\\n",\n  "random.py(242):         getrandbits = self.getrandbits\\n",\n  "random.py(243):         k = n.bit_length()  # don\'t use (n-1) here because n can be 1\\n",\n  "random.py(244):         r = getrandbits(k)  # 0 <= r < 2**k\\n",\n  "random.py(245):         while r >= n:\\n",\n  "random.py(246):             r = getrandbits(k)\\n",\n  "random.py(245):         while r >= n:\\n",\n  "random.py(246):             r = getrandbits(k)\\n",\n  "random.py(245):         while r >= n:\\n",\n  "random.py(247):         return r\\n",\n  "tempfile.py(152):         letters = [choose(c) for dummy in range(8)]\\n",\n  " --- modulename: random, funcname: choice\\n",\n  "random.py(346):         return seq[self._randbelow(len(seq))]\\n",\n  " --- modulename: random, funcname: _randbelow_with_getrandbits\\n",\n  "random.py(240):         if not n:\\n",\n  "random.py(242):         getrandbits = self.getrandbits\\n",\n  "random.py(243):         k = n.bit_length()  # don\'t use (n-1) here because n can be 1\\n",\n  "random.py(244):         r = getrandbits(k)  # 0 <= r < 2**k\\n",\n  "random.py(245):         while r >= n:\\n",\n  "random.py(247):         return r\\n",\n  "tempfile.py(152):         letters = [choose(c) for dummy in range(8)]\\n",\n  " --- modulename: random, funcname: choice\\n",\n  "random.py(346):         return seq[self._randbelow(len(seq))]\\n",\n  " --- modulename: random, funcname: _randbelow_with_getrandbits\\n",\n  "random.py(240):         if not n:\\n",\n  "random.py(242):         getrandbits = self.getrandbits\\n",\n  "random.py(243):         k = n.bit_length()  # don\'t use (n-1) here because n can be 1\\n",\n  "random.py(244):         r = getrandbits(k)  # 0 <= r < 2**k\\n",\n  "random.py(245):         while r >= n:\\n",\n  "random.py(246):             r = getrandbits(k)\\n",\n  "random.py(245):         while r >= n:\\n",\n  "random.py(246):             r = getrandbits(k)\\n",\n  "random.py(245):         while r >= n:\\n",\n  "random.py(247):         return r\\n",\n  "tempfile.py(152):         letters = [choose(c) for dummy in range(8)]\\n",\n  " --- modulename: random, funcname: choice\\n",\n  "random.py(346):         return seq[self._randbelow(len(seq))]\\n",\n  " --- modulename: random, funcname: _randbelow_with_getrandbits\\n",\n  "random.py(240):         if not n:\\n",\n  "random.py(242):         getrandbits = self.getrandbits\\n",\n  "random.py(243):         k = n.bit_length()  # don\'t use (n-1) here because n can be 1\\n",\n  "random.py(244):         r = getrandbits(k)  # 0 <= r < 2**k\\n",\n  "random.py(245):         while r >= n:\\n",\n  "random.py(247):         return r\\n",\n  "tempfile.py(152):         letters = [choose(c) for dummy in range(8)]\\n",\n  "tempfile.py(153):         return \'\'.join(letters)\\n",\n  "tempfile.py(252):         file = _os.path.join(dir, pre + name + suf)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "tempfile.py(253):         _sys.audit(\\"tempfile.mkstemp\\", file)\\n",\n  "tempfile.py(254):         try:\\n",\n  "tempfile.py(255):             fd = _os.open(file, flags, 0o600)\\n",\n  "tempfile.py(266):         return (fd, _os.path.abspath(file))\\n",\n  " --- modulename: posixpath, funcname: abspath\\n",\n  "posixpath.py(375):     path = os.fspath(path)\\n",\n  "posixpath.py(376):     if not isabs(path):\\n",\n  " --- modulename: posixpath, funcname: isabs\\n",\n  "posixpath.py(62):     s = os.fspath(s)\\n",\n  "posixpath.py(63):     sep = _get_sep(s)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(64):     return s.startswith(sep)\\n",\n  "posixpath.py(382):     return normpath(path)\\n",\n  " --- modulename: posixpath, funcname: normpath\\n",\n  "posixpath.py(336):     path = os.fspath(path)\\n",\n  "posixpath.py(337):     if isinstance(path, bytes):\\n",\n  "posixpath.py(343):         sep = \'/\'\\n",\n  "posixpath.py(344):         empty = \'\'\\n",\n  "posixpath.py(345):         dot = \'.\'\\n",\n  "posixpath.py(346):         dotdot = \'..\'\\n",\n  "posixpath.py(347):     if path == empty:\\n",\n  "posixpath.py(349):     initial_slashes = path.startswith(sep)\\n",\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(354):         path.startswith(sep*2) and not path.startswith(sep*3)):\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "posixpath.py(353):     if (initial_slashes and\\n",\n  "posixpath.py(356):     comps = path.split(sep)\\n",\n  "posixpath.py(357):     new_comps = []\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(360):             continue\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(359):         if comp in (empty, dot):\\n",\n  "posixpath.py(361):         if (comp != dotdot or (not initial_slashes and not new_comps) or\\n",\n  "posixpath.py(363):             new_comps.append(comp)\\n",\n  "posixpath.py(358):     for comp in comps:\\n",\n  "posixpath.py(366):     comps = new_comps\\n",\n  "posixpath.py(367):     path = sep.join(comps)\\n",\n  "posixpath.py(368):     if initial_slashes:\\n",\n  "posixpath.py(369):         path = sep*initial_slashes + path\\n",\n  "posixpath.py(370):     return path or dot\\n",\n  "tempfile.py(546):     try:\\n",\n  "tempfile.py(547):         file = _io.open(fd, mode, buffering=buffering,\\n",\n  "tempfile.py(548):                         newline=newline, encoding=encoding, errors=errors)\\n",\n  "tempfile.py(547):         file = _io.open(fd, mode, buffering=buffering,\\n",\n  "tempfile.py(550):         return _TemporaryFileWrapper(file, name, delete)\\n",\n  " --- modulename: tempfile, funcname: __init__\\n",\n  "tempfile.py(463):         self.file = file\\n",\n  "tempfile.py(464):         self.name = name\\n",\n  "tempfile.py(465):         self.delete = delete\\n",\n  "tempfile.py(466):         self._closer = _TemporaryFileCloser(file, name, delete)\\n",\n  " --- modulename: tempfile, funcname: __init__\\n",\n  "tempfile.py(420):         self.file = file\\n",\n  "tempfile.py(421):         self.name = name\\n",\n  "tempfile.py(422):         self.delete = delete\\n",\n  " --- modulename: tempfile, funcname: __del__\\n",\n  "tempfile.py(445):             self.close()\\n",\n  " --- modulename: tempfile, funcname: close\\n",\n  "tempfile.py(435):             if not self.close_called and self.file is not None:\\n",\n  "tempfile.py(436):                 self.close_called = True\\n",\n  "tempfile.py(437):                 try:\\n",\n  "tempfile.py(438):                     self.file.close()\\n",\n  "tempfile.py(440):                     if self.delete:\\n",\n  "tempfile.py(441):                         unlink(self.name)\\n",\n  "main.py(199):         self.temp_base = tpo.getenv_text(\\"TEMP_BASE\\",\\n",\n  " --- modulename: tpo_common, funcname: getenv_text\\n",\n  "tpo_common.py(781):     value = getenv_value(var, default, description=description)\\n",\n  " --- modulename: tpo_common, funcname: getenv_value\\n",\n  "tpo_common.py(764):     value = getenv(var)\\n",\n  " --- modulename: tpo_common, funcname: getenv\\n",\n  "tpo_common.py(697):     value = os.getenv(var)\\n",\n  " --- modulename: os, funcname: getenv\\n",\n  "os.py(775):     return environ.get(key, default)\\n",\n  " --- modulename: _collections_abc, funcname: get\\n",\n  "_collections_abc.py(762):         try:\\n",\n  "_collections_abc.py(763):             return self[key]\\n",\n  " --- modulename: os, funcname: __getitem__\\n",\n  "os.py(675):         try:\\n",\n  "os.py(676):             value = self._data[self.encodekey(key)]\\n",\n  " --- modulename: os, funcname: encode\\n",\n  "os.py(755):             if not isinstance(value, str):\\n",\n  "os.py(757):             return value.encode(encoding, \'surrogateescape\')\\n",\n  "os.py(677):         except KeyError:\\n",\n  "os.py(679):             raise KeyError(key) from None\\n",\n  "_collections_abc.py(764):         except KeyError:\\n",\n  "_collections_abc.py(765):             return default\\n",\n  "tpo_common.py(698):     debug_print(\\"getenv(\'%s\') => \'%s\'\\" % (var, value), 8)\\n",\n  " --- modulename: tpo_common, funcname: debug_print\\n",\n  "tpo_common.py(474):     out_text = (text if skip_newline else (text + \\"\\\\n\\"))\\n",\n  "tpo_common.py(475):     return debug_trace_without_newline(out_text, level=level)\\n",\n  " --- modulename: tpo_common, funcname: debug_trace_without_newline\\n",\n  "tpo_common.py(446):     level = kwargs.get(\'level\', 1)\\n",\n  "tpo_common.py(447):     if args:\\n",\n  "tpo_common.py(452):     return debug.trace(level, text, no_eol=True)\\n",\n  "locale.py(431):     if modifier:\\n",\n  "locale.py(442):     if encoding:\\n",\n  "locale.py(444):         lookup_name = langname\\n",\n  "locale.py(445):         if modifier:\\n",\n  "locale.py(447):         code = locale_alias.get(lookup_name, None)\\n",\n  "locale.py(448):         if code is not None:\\n",\n  "locale.py(450):             if \'@\' not in code:\\n",\n  "locale.py(451):                 return _replace_encoding(code, encoding)\\n",\n  " --- modulename: locale, funcname: _replace_encoding\\n",\n  "locale.py(353):     if \'.\' in code:\\n",\n  "locale.py(354):         langname = code[:code.index(\'.\')]\\n",\n  "locale.py(358):     norm_encoding = encodings.normalize_encoding(encoding)\\n",\n  " --- modulename: __init__, funcname: normalize_encoding\\n",\n  "__init__.py(55):     if isinstance(encoding, bytes):\\n",\n  "__init__.py(58):     chars = []\\n",\n  "__init__.py(59):     punct = False\\n",\n  "__init__.py(60):     for c in encoding:\\n",\n  "__init__.py(61):         if c.isalnum() or c == \'.\':\\n",\n  "__init__.py(62):             if punct and chars:\\n",\n  "__init__.py(64):             chars.append(c)\\n",\n  "__init__.py(65):             punct = False\\n",\n  "__init__.py(60):     for c in encoding:\\n",\n  "__init__.py(61):         if c.isalnum() or c == \'.\':\\n",\n  "__init__.py(62):             if punct and chars:\\n",\n  "__init__.py(64):             chars.append(c)\\n",\n  "__init__.py(65):             punct = False\\n",\n  "__init__.py(60):     for c in encoding:\\n",\n  "__init__.py(61):         if c.isalnum() or c == \'.\':\\n",\n  "__init__.py(62):             if punct and chars:\\n",\n  "__init__.py(64):             chars.append(c)\\n",\n  "__init__.py(65):             punct = False\\n",\n  "__init__.py(60):     for c in encoding:\\n",\n  "__init__.py(61):         if c.isalnum() or c == \'.\':\\n",\n  "__init__.py(67):             punct = True\\n",\n  "__init__.py(60):     for c in encoding:\\n",\n  "__init__.py(61):         if c.isalnum() or c == \'.\':\\n",\n  "__init__.py(62):             if punct and chars:\\n",\n  "__init__.py(63):                 chars.append(\'_\')\\n",\n  "__init__.py(64):             chars.append(c)\\n",\n  "__init__.py(65):             punct = False\\n",\n  "__init__.py(60):     for c in encoding:\\n",\n  "__init__.py(68):     return \'\'.join(chars)\\n",\n  "locale.py(360):     norm_encoding = encodings.aliases.aliases.get(norm_encoding.lower(),\\n",\n  "locale.py(361):                                                   norm_encoding)\\n",\n  "locale.py(360):     norm_encoding = encodings.aliases.aliases.get(norm_encoding.lower(),\\n",\n  "locale.py(363):     encoding = norm_encoding\\n",\n  "locale.py(364):     norm_encoding = norm_encoding.lower()\\n",\n  "locale.py(365):     if norm_encoding in locale_encoding_alias:\\n",\n  "locale.py(366):         encoding = locale_encoding_alias[norm_encoding]\\n",\n  "locale.py(373):     return langname + \'.\' + encoding\\n",\n  "gettext.py(214):     COMPONENT_CODESET   = 1 << 0\\n",\n  "gettext.py(215):     COMPONENT_TERRITORY = 1 << 1\\n",\n  "gettext.py(216):     COMPONENT_MODIFIER  = 1 << 2\\n",\n  "gettext.py(218):     mask = 0\\n",\n  "gettext.py(219):     pos = loc.find(\'@\')\\n",\n  "gettext.py(220):     if pos >= 0:\\n",\n  "gettext.py(225):         modifier = \'\'\\n",\n  "gettext.py(226):     pos = loc.find(\'.\')\\n",\n  "gettext.py(227):     if pos >= 0:\\n",\n  "gettext.py(228):         codeset = loc[pos:]\\n",\n  "gettext.py(229):         loc = loc[:pos]\\n",\n  "gettext.py(230):         mask |= COMPONENT_CODESET\\n",\n  "gettext.py(233):     pos = loc.find(\'_\')\\n",\n  "gettext.py(234):     if pos >= 0:\\n",\n  "gettext.py(235):         territory = loc[pos:]\\n",\n  "gettext.py(236):         loc = loc[:pos]\\n",\n  "gettext.py(237):         mask |= COMPONENT_TERRITORY\\n",\n  "gettext.py(240):     language = loc\\n",\n  "gettext.py(241):     ret = []\\n",\n  "gettext.py(242):     for i in range(mask+1):\\n",\n  "gettext.py(243):         if not (i & ~mask):  # if all components for this combo exist ...\\n",\n  "gettext.py(244):             val = language\\n",\n  "gettext.py(245):             if i & COMPONENT_TERRITORY: val += territory\\n",\n  "gettext.py(246):             if i & COMPONENT_CODESET:   val += codeset\\n",\n  "gettext.py(247):             if i & COMPONENT_MODIFIER:  val += modifier\\n",\n  "gettext.py(248):             ret.append(val)\\n",\n  "gettext.py(242):     for i in range(mask+1):\\n",\n  "gettext.py(243):         if not (i & ~mask):  # if all components for this combo exist ...\\n",\n  "gettext.py(244):             val = language\\n",\n  "gettext.py(245):             if i & COMPONENT_TERRITORY: val += territory\\n",\n  "gettext.py(246):             if i & COMPONENT_CODESET:   val += codeset\\n",\n  "gettext.py(247):             if i & COMPONENT_MODIFIER:  val += modifier\\n",\n  "gettext.py(248):             ret.append(val)\\n",\n  "gettext.py(242):     for i in range(mask+1):\\n",\n  "gettext.py(243):         if not (i & ~mask):  # if all components for this combo exist ...\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "gettext.py(244):             val = language\\n",\n  "gettext.py(245):             if i & COMPONENT_TERRITORY: val += territory\\n",\n  "gettext.py(246):             if i & COMPONENT_CODESET:   val += codeset\\n",\n  "gettext.py(247):             if i & COMPONENT_MODIFIER:  val += modifier\\n",\n  "gettext.py(248):             ret.append(val)\\n",\n  "gettext.py(242):     for i in range(mask+1):\\n",\n  "gettext.py(243):         if not (i & ~mask):  # if all components for this combo exist ...\\n",\n  "gettext.py(244):             val = language\\n",\n  "gettext.py(245):             if i & COMPONENT_TERRITORY: val += territory\\n",\n  "gettext.py(246):             if i & COMPONENT_CODESET:   val += codeset\\n",\n  "gettext.py(247):             if i & COMPONENT_MODIFIER:  val += modifier\\n",\n  "gettext.py(248):             ret.append(val)\\n",\n  "gettext.py(242):     for i in range(mask+1):\\n",\n  "gettext.py(249):     ret.reverse()\\n",\n  "gettext.py(250):     return ret\\n",\n  "gettext.py(559):             if nelang not in nelangs:\\n",\n  "gettext.py(560):                 nelangs.append(nelang)\\n",\n  "gettext.py(558):         for nelang in _expand_lang(lang):\\n",\n  "gettext.py(559):             if nelang not in nelangs:\\n",\n  "gettext.py(560):                 nelangs.append(nelang)\\n",\n  "gettext.py(558):         for nelang in _expand_lang(lang):\\n",\n  "gettext.py(559):             if nelang not in nelangs:\\n",\n  "gettext.py(560):                 nelangs.append(nelang)\\n",\n  "gettext.py(558):         for nelang in _expand_lang(lang):\\n",\n  "gettext.py(559):             if nelang not in nelangs:\\n",\n  "gettext.py(560):                 nelangs.append(nelang)\\n",\n  "gettext.py(558):         for nelang in _expand_lang(lang):\\n",\n  "gettext.py(557):     for lang in languages:\\n",\n  "gettext.py(558):         for nelang in _expand_lang(lang):\\n",\n  " --- modulename: gettext, funcname: _expand_lang\\n",\n  "gettext.py(212):     import locale\\n",\n  "gettext.py(213):     loc = locale.normalize(loc)\\n",\n  " --- modulename: locale, funcname: normalize\\n",\n  "locale.py(403):     code = localename.lower()\\n",\n  "locale.py(404):     if \':\' in code:\\n",\n  "locale.py(407):     if \'@\' in code:\\n",\n  "locale.py(410):         modifier = \'\'\\n",\n  "locale.py(411):     if \'.\' in code:\\n",\n  "locale.py(414):         langname = code\\n",\n  "locale.py(415):         encoding = \'\'\\n",\n  "locale.py(418):     lang_enc = langname\\n",\n  "locale.py(419):     if encoding:\\n",\n  "locale.py(423):     lookup_name = lang_enc\\n",\n  "locale.py(424):     if modifier:\\n",\n  "locale.py(426):     code = locale_alias.get(lookup_name, None)\\n",\n  "locale.py(427):     if code is not None:\\n",\n  "locale.py(428):         return code\\n",\n  "gettext.py(214):     COMPONENT_CODESET   = 1 << 0\\n",\n  "gettext.py(215):     COMPONENT_TERRITORY = 1 << 1\\n",\n  "gettext.py(216):     COMPONENT_MODIFIER  = 1 << 2\\n",\n  "gettext.py(218):     mask = 0\\n",\n  "gettext.py(219):     pos = loc.find(\'@\')\\n",\n  "gettext.py(220):     if pos >= 0:\\n",\n  "gettext.py(225):         modifier = \'\'\\n",\n  "gettext.py(226):     pos = loc.find(\'.\')\\n",\n  "gettext.py(227):     if pos >= 0:\\n",\n  "gettext.py(232):         codeset = \'\'\\n",\n  "gettext.py(233):     pos = loc.find(\'_\')\\n",\n  "gettext.py(234):     if pos >= 0:\\n",\n  "gettext.py(239):         territory = \'\'\\n",\n  "gettext.py(240):     language = loc\\n",\n  "gettext.py(241):     ret = []\\n",\n  "gettext.py(242):     for i in range(mask+1):\\n",\n  "gettext.py(243):         if not (i & ~mask):  # if all components for this combo exist ...\\n",\n  "gettext.py(244):             val = language\\n",\n  "gettext.py(245):             if i & COMPONENT_TERRITORY: val += territory\\n",\n  "gettext.py(246):             if i & COMPONENT_CODESET:   val += codeset\\n",\n  "gettext.py(247):             if i & COMPONENT_MODIFIER:  val += modifier\\n",\n  "gettext.py(248):             ret.append(val)\\n",\n  "gettext.py(242):     for i in range(mask+1):\\n",\n  "gettext.py(249):     ret.reverse()\\n",\n  "gettext.py(250):     return ret\\n",\n  "gettext.py(559):             if nelang not in nelangs:\\n",\n  "gettext.py(560):                 nelangs.append(nelang)\\n",\n  "gettext.py(558):         for nelang in _expand_lang(lang):\\n",\n  "gettext.py(557):     for lang in languages:\\n",\n  "gettext.py(562):     if all:\\n",\n  "gettext.py(563):         result = []\\n",\n  "gettext.py(566):     for lang in nelangs:\\n",\n  "gettext.py(567):         if lang == \'C\':\\n",\n  "gettext.py(569):         mofile = os.path.join(localedir, lang, \'LC_MESSAGES\', \'%s.mo\' % domain)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "gettext.py(570):         if os.path.exists(mofile):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(20):     except (OSError, ValueError):\\n",\n  "genericpath.py(21):         return False\\n",\n  "gettext.py(566):     for lang in nelangs:\\n",\n  "gettext.py(567):         if lang == \'C\':\\n",\n  "gettext.py(569):         mofile = os.path.join(localedir, lang, \'LC_MESSAGES\', \'%s.mo\' % domain)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "gettext.py(570):         if os.path.exists(mofile):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(20):     except (OSError, ValueError):\\n",\n  "genericpath.py(21):         return False\\n",\n  "gettext.py(566):     for lang in nelangs:\\n",\n  "gettext.py(567):         if lang == \'C\':\\n",\n  "gettext.py(569):         mofile = os.path.join(localedir, lang, \'LC_MESSAGES\', \'%s.mo\' % domain)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "gettext.py(570):         if os.path.exists(mofile):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(20):     except (OSError, ValueError):\\n",\n  "genericpath.py(21):         return False\\n",\n  "gettext.py(566):     for lang in nelangs:\\n",\n  "gettext.py(567):         if lang == \'C\':\\n",\n  "gettext.py(569):         mofile = os.path.join(localedir, lang, \'LC_MESSAGES\', \'%s.mo\' % domain)\\n",\n  " --- modulename: posixpath, funcname: join\\n",\n  "posixpath.py(76):     a = os.fspath(a)\\n",\n  "posixpath.py(77):     sep = _get_sep(a)\\n",\n  " --- modulename: posixpath, funcname: _get_sep\\n",\n  "posixpath.py(42):     if isinstance(path, bytes):\\n",\n  "posixpath.py(45):         return \'/\'\\n",\n  "posixpath.py(78):     path = a\\n",\n  "posixpath.py(79):     try:\\n",\n  "posixpath.py(80):         if not p:\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(83):             if b.startswith(sep):\\n",\n  "posixpath.py(85):             elif not path or path.endswith(sep):\\n",\n  "posixpath.py(88):                 path += sep + b\\n",\n  "posixpath.py(82):         for b in map(os.fspath, p):\\n",\n  "posixpath.py(92):     return path\\n",\n  "gettext.py(570):         if os.path.exists(mofile):\\n",\n  " --- modulename: genericpath, funcname: exists\\n",\n  "genericpath.py(18):     try:\\n",\n  "genericpath.py(19):         os.stat(path)\\n",\n  "genericpath.py(20):     except (OSError, ValueError):\\n",\n  "genericpath.py(21):         return False\\n",\n  "gettext.py(566):     for lang in nelangs:\\n",\n  "gettext.py(567):         if lang == \'C\':\\n",\n  "gettext.py(568):             break\\n",\n  "gettext.py(575):     return result\\n",\n  "gettext.py(588):     if not mofiles:\\n",\n  "gettext.py(589):         if fallback:\\n",\n  "gettext.py(591):         from errno import ENOENT\\n",\n  "gettext.py(592):         raise FileNotFoundError(ENOENT,\\n",\n  "gettext.py(593):                                 \'No translation file found for domain\', domain)\\n",\n  "gettext.py(592):         raise FileNotFoundError(ENOENT,\\n",\n  "gettext.py(667):     except OSError:\\n",\n  "gettext.py(668):         return message\\n",\n  " --- modulename: argparse, funcname: add_argument_group\\n",\n  "argparse.py(1443):         group = _ArgumentGroup(self, *args, **kwargs)\\n",\n  " --- modulename: argparse, funcname: __init__\\n",\n  "argparse.py(1621):         update = kwargs.setdefault\\n",\n  "argparse.py(1622):         update(\'conflict_handler\', container.conflict_handler)\\n",\n  "argparse.py(1623):         update(\'prefix_chars\', container.prefix_chars)\\n",\n  "argparse.py(1624):         update(\'argument_default\', container.argument_default)\\n",\n  "argparse.py(1625):         super_init = super(_ArgumentGroup, self).__init__\\n",\n  "argparse.py(1626):         super_init(description=description, **kwargs)\\n",\n  " --- modulename: argparse, funcname: __init__\\n",\n  "argparse.py(1314):         super(_ActionsContainer, self).__init__()\\n",\n  "argparse.py(1316):         self.description = description\\n",\n  "argparse.py(1317):         self.argument_default = argument_default\\n",\n  "argparse.py(1318):         self.prefix_chars = prefix_chars\\n",\n  "argparse.py(1319):         self.conflict_handler = conflict_handler\\n",\n  "argparse.py(1322):         self._registries = {}\\n",\n  "argparse.py(1325):         self.register(\'action\', None, _StoreAction)\\n",\n  " --- modulename: argparse, funcname: register\\n",\n  "argparse.py(1363):         registry = self._registries.setdefault(registry_name, {})\\n",\n  "argparse.py(1364):         registry[value] = object\\n",\n  "argparse.py(1326):         self.register(\'action\', \'store\', _StoreAction)\\n",\n  " --- modulename: argparse, funcname: register\\n",\n  "argparse.py(1363):         registry = self._registries.setdefault(registry_name, {})\\n",\n  "argparse.py(1364):         registry[value] = object\\n",\n  "argparse.py(1327):         self.register(\'action\', \'store_const\', _StoreConstAction)\\n",\n  " --- modulename: argparse, funcname: register\\n",\n  "argparse.py(1363):         registry = self._registries.setdefault(registry_name, {})\\n",\n  "argparse.py(1364):         registry[value] = object\\n",\n  "argparse.py(1328):         self.register(\'action\', \'store_true\', _StoreTrueAction)\\n",\n  " --- modulename: argparse, funcname: register\\n",\n  "argparse.py(1363):         registry = self._registries.setdefault(registry_name, {})\\n",\n  "argparse.py(1364):         registry[value] = object\\n",\n  "argparse.py(1329):         self.register(\'action\', \'store_false\', _StoreFalseAction)\\n",\n  " --- modulename: argparse, funcname: register\\n",\n  "argparse.py(1363):         registry = self._registries.setdefault(registry_name, {})\\n",\n  "argparse.py(1364):         registry[value] = object\\n",\n  "argparse.py(1330):         self.register(\'action\', \'append\', _AppendAction)\\n",\n  " --- modulename: argparse, funcname: register\\n",\n  "argparse.py(1363):         registry = self._registries.setdefault(registry_name, {})\\n",\n  "argparse.py(1364):         registry[value] = object\\n",\n  "argparse.py(1331):         self.register(\'action\', \'append_const\', _AppendConstAction)\\n",\n  " --- modulename: argparse, funcname: register\\n",\n  "argparse.py(1363):         registry = self._registries.setdefault(registry_name, {})\\n",\n  "argparse.py(1364):         registry[value] = object\\n",\n  "argparse.py(1332):         self.register(\'action\', \'count\', _CountAction)\\n",\n  " --- modulename: argparse, funcname: register\\n",\n  "argparse.py(1363):         registry = self._registries.setdefault(registry_name, {})\\n",\n  "argparse.py(1364):         registry[value] = object\\n",\n  "argparse.py(1333):         self.register(\'action\', \'help\', _HelpAction)\\n",\n  " --- modulename: argparse, funcname: register\\n",\n  "argparse.py(1363):         registry = self._registries.setdefault(registry_name, {})\\n",\n  "argparse.py(1364):         registry[value] = object\\n",\n  "argparse.py(1334):         self.register(\'action\', \'version\', _VersionAction)\\n",\n  " --- modulename: argparse, funcname: register\\n",\n  "argparse.py(1363):         registry = self._registries.setdefault(registry_name, {})\\n",\n  "argparse.py(1364):         registry[value] = object\\n",\n  "argparse.py(1335):         self.register(\'action\', \'parsers\', _SubParsersAction)\\n",\n  " --- modulename: argparse, funcname: register\\n",\n  "argparse.py(1363):         registry = self._registries.setdefault(registry_name, {})\\n",\n  "argparse.py(1364):         registry[value] = object\\n",\n  "argparse.py(1336):         self.register(\'action\', \'extend\', _ExtendAction)\\n",\n  " --- modulename: argparse, funcname: register\\n",\n  "argparse.py(1363):         registry = self._registries.setdefault(registry_name, {})\\n",\n  "argparse.py(1364):         registry[value] = object\\n",\n  "argparse.py(1339):         self._get_handler()\\n",\n  " --- modulename: argparse, funcname: _get_handler\\n",\n  "argparse.py(1572):         handler_func_name = \'_handle_conflict_%s\' % self.conflict_handler\\n",\n  "argparse.py(1573):         try:\\n",\n  "argparse.py(1574):             return getattr(self, handler_func_name)\\n",\n  "argparse.py(1342):         self._actions = []\\n",\n  "argparse.py(1343):         self._option_string_actions = {}\\n",\n  "argparse.py(1346):         self._action_groups = []\\n",\n  "argparse.py(1347):         self._mutually_exclusive_groups = []\\n",\n  "argparse.py(1350):         self._defaults = {}\\n",\n  "argparse.py(1353):         self._negative_number_matcher = _re.compile(r\'^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$\')\\n",\n  " --- modulename: re, funcname: compile\\n",\n  "re.py(252):     return _compile(pattern, flags)\\n",\n  " --- modulename: re, funcname: _compile\\n",\n  "re.py(291):     if isinstance(flags, RegexFlag):\\n",\n  "re.py(293):     try:\\n",\n  "re.py(294):         return _cache[type(pattern), pattern, flags]\\n",\n  "argparse.py(1357):         self._has_negative_number_optionals = []\\n",\n  "argparse.py(1629):         self.title = title\\n",\n  "argparse.py(1630):         self._group_actions = []\\n",\n  "argparse.py(1633):         self._registries = container._registries\\n",\n  "argparse.py(1634):         self._actions = container._actions\\n",\n  "argparse.py(1635):         self._option_string_actions = container._option_string_actions\\n",\n  "argparse.py(1636):         self._defaults = container._defaults\\n",\n  "argparse.py(1638):             container._has_negative_number_optionals\\n",\n  "argparse.py(1637):         self._has_negative_number_optionals = \\\\\\n",\n  "argparse.py(1639):         self._mutually_exclusive_groups = container._mutually_exclusive_groups\\n",\n  "argparse.py(1444):         self._action_groups.append(group)\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "argparse.py(1445):         return group\\n",\n  "argparse.py(1729):         self._subparsers = None\\n",\n  "argparse.py(1732):         def identity(string):\\n",\n  "argparse.py(1734):         self.register(\'type\', None, identity)\\n",\n  " --- modulename: argparse, funcname: register\\n",\n  "argparse.py(1363):         registry = self._registries.setdefault(registry_name, {})\\n",\n  "argparse.py(1364):         registry[value] = object\\n",\n  "argparse.py(1738):         default_prefix = \'-\' if \'-\' in prefix_chars else prefix_chars[0]\\n",\n  "argparse.py(1739):         if self.add_help:\\n",\n  "argparse.py(1740):             self.add_argument(\\n",\n  "argparse.py(1741):                 default_prefix+\'h\', default_prefix*2+\'help\',\\n",\n  "argparse.py(1742):                 action=\'help\', default=SUPPRESS,\\n",\n  "argparse.py(1743):                 help=_(\'show this help message and exit\'))\\n",\n  " --- modulename: gettext, funcname: gettext\\n",\n  "gettext.py(742):     return dgettext(_current_domain, message)\\n",\n  " --- modulename: gettext, funcname: dgettext\\n",\n  "gettext.py(665):     try:\\n",\n  "gettext.py(666):         t = translation(domain, _localedirs.get(domain, None))\\n",\n  " --- modulename: gettext, funcname: translation\\n",\n  "gettext.py(585):     if class_ is None:\\n",\n  "gettext.py(586):         class_ = GNUTranslations\\n",\n  "gettext.py(587):     mofiles = find(domain, localedir, languages, all=True)\\n",\n  " --- modulename: gettext, funcname: find\\n",\n  "gettext.py(544):     if localedir is None:\\n",\n  "gettext.py(545):         localedir = _default_localedir\\n",\n  "gettext.py(546):     if languages is None:\\n",\n  "gettext.py(547):         languages = []\\n",\n  "gettext.py(548):         for envar in (\'LANGUAGE\', \'LC_ALL\', \'LC_MESSAGES\', \'LANG\'):\\n",\n  "gettext.py(549):             val = os.environ.get(envar)\\n",\n  " --- modulename: _collections_abc, funcname: get\\n",\n  "_collections_abc.py(762):         try:\\n",\n  "_collections_abc.py(763):             return self[key]\\n",\n  " --- modulename: os, funcname: __getitem__\\n",\n  "os.py(675):         try:\\n",\n  "os.py(676):             value = self._data[self.encodekey(key)]\\n",\n  " --- modulename: os, funcname: encode\\n",\n  "os.py(755):             if not isinstance(value, str):\\n",\n  "os.py(757):             return value.encode(encoding, \'surrogateescape\')\\n",\n  "os.py(677):         except KeyError:\\n",\n  "os.py(679):             raise KeyError(key) from None\\n",\n  "_collections_abc.py(764):         except KeyError:\\n",\n  "_collections_abc.py(765):             return default\\n",\n  "gettext.py(550):             if val:\\n",\n  "gettext.py(548):         for envar in (\'LANGUAGE\', \'LC_ALL\', \'LC_MESSAGES\', \'LANG\'):\\n",\n  "gettext.py(549):             val = os.environ.get(envar)\\n",\n  " --- modulename: _collections_abc, funcname: get\\n",\n  "_collections_abc.py(762):         try:\\n",\n  "_collections_abc.py(763):             return self[key]\\n",\n  " --- modulename: os, funcname: __getitem__\\n",\n  "os.py(675):         try:\\n",\n  "os.py(676):             value = self._data[self.encodekey(key)]\\n",\n  " --- modulename: os, funcname: encode\\n",\n  "os.py(755):             if not isinstance(value, str):\\n",\n  "os.py(757):             return value.encode(encoding, \'surrogateescape\')\\n",\n  "os.py(677):         except KeyError:\\n",\n  "os.py(679):             raise KeyError(key) from None\\n",\n  "_collections_abc.py(764):         except KeyError:\\n",\n  "_collections_abc.py(765):             return default\\n",\n  "gettext.py(550):             if val:\\n",\n  "gettext.py(548):         for envar in (\'LANGUAGE\', \'LC_ALL\', \'LC_MESSAGES\', \'LANG\'):\\n",\n  "gettext.py(549):             val = os.environ.get(envar)\\n",\n  " --- modulename: _collections_abc, funcname: get\\n",\n  "_collections_abc.py(762):         try:\\n",\n  "_collections_abc.py(763):             return self[key]\\n",\n  " --- modulename: os, funcname: __getitem__\\n",\n  "os.py(675):         try:\\n",\n  "os.py(676):             value = self._data[self.encodekey(key)]\\n",\n  " --- modulename: os, funcname: encode\\n",\n  "os.py(755):             if not isinstance(value, str):\\n",\n  "os.py(757):             return value.encode(encoding, \'surrogateescape\')\\n",\n  "os.py(677):         except KeyError:\\n",\n  "os.py(679):             raise KeyError(key) from None\\n",\n  "_collections_abc.py(764):         except KeyError:\\n",\n  "_collections_abc.py(765):             return default\\n",\n  "gettext.py(550):             if val:\\n",\n  "gettext.py(548):         for envar in (\'LANGUAGE\', \'LC_ALL\', \'LC_MESSAGES\', \'LANG\'):\\n",\n  "gettext.py(549):             val = os.environ.get(envar)\\n",\n  " --- modulename: _collections_abc, funcname: get\\n",\n  "_collections_abc.py(762):         try:\\n",\n  "_collections_abc.py(763):             return self[key]\\n",\n  " --- modulename: os, funcname: __getitem__\\n",\n  "os.py(675):         try:\\n",\n  "os.py(676):             value = self._data[self.encodekey(key)]\\n",\n  " --- modulename: os, funcname: encode\\n",\n  "os.py(755):             if not isinstance(value, str):\\n",\n  "os.py(757):             return value.encode(encoding, \'surrogateescape\')\\n",\n  "os.py(680):         return self.decodevalue(value)\\n",\n  " --- modulename: os, funcname: decode\\n",\n  "os.py(759):             return value.decode(encoding, \'surrogateescape\')\\n",\n  "gettext.py(550):             if val:\\n",\n  "gettext.py(551):                 languages = val.split(\':\')\\n",\n  "gettext.py(552):                 break\\n",\n  "gettext.py(553):         if \'C\' not in languages:\\n",\n  "gettext.py(554):             languages.append(\'C\')\\n",\n  "gettext.py(556):     nelangs = []\\n",\n  "gettext.py(557):     for lang in languages:\\n",\n  "gettext.py(558):         for nelang in _expand_lang(lang):\\n",\n  " --- modulename: gettext, funcname: _expand_lang\\n",\n  "gettext.py(212):     import locale\\n",\n  "gettext.py(213):     loc = locale.normalize(loc)\\n",\n  " --- modulename: locale, funcname: normalize\\n",\n  "locale.py(403):     code = localename.lower()\\n",\n  "locale.py(404):     if \':\' in code:\\n",\n  "locale.py(407):     if \'@\' in code:\\n",\n  "locale.py(410):         modifier = \'\'\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(449):         return items[0]\\n",\n  "sre_parse.py(837):             if not source.match(\\")\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(237):         except IndexError:\\n",\n  "sre_parse.py(238):             self.next = None\\n",\n  "sre_parse.py(239):             return\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(840):             if group is not None:\\n",\n  "sre_parse.py(841):                 state.closegroup(group, p)\\n",\n  " --- modulename: sre_parse, funcname: closegroup\\n",\n  "sre_parse.py(97):         self.groupwidths[gid] = p.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(842):             subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(508):             break # end of pattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(857):             group, add_flags, del_flags, p = av\\n",\n  "sre_parse.py(858):             if group is None and not add_flags and not del_flags:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(449):         return items[0]\\n",\n  "sre_parse.py(960):     p.state.flags = fix_flags(str, p.state.flags)\\n",\n  " --- modulename: sre_parse, funcname: fix_flags\\n",\n  "sre_parse.py(925):     if isinstance(src, str):\\n",\n  "sre_parse.py(926):         if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_parse.py(928):         if not flags & SRE_FLAG_ASCII:\\n",\n  "sre_parse.py(929):             flags |= SRE_FLAG_UNICODE\\n",\n  "sre_parse.py(937):     return flags\\n",\n  "sre_parse.py(962):     if source.next is not None:\\n",\n  "sre_parse.py(966):     if flags & SRE_FLAG_DEBUG:\\n",\n  "sre_parse.py(969):     return p\\n",\n  "sre_compile.py(768):     code = _code(p, flags)\\n",\n  " --- modulename: sre_compile, funcname: _code\\n",\n  "sre_compile.py(600):     flags = p.state.flags | flags\\n",\n  "sre_compile.py(601):     code = []\\n",\n  "sre_compile.py(604):     _compile_info(code, p, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile_info\\n",\n  "sre_compile.py(540):     lo, hi = pattern.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(194):                 i, j = av[-1].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(177):             return self.width\\n",\n  "sre_parse.py(195):                 lo = lo + i\\n",\n  "sre_parse.py(196):                 hi = hi + j\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_compile.py(541):     if hi > MAXCODE:\\n",\n  "sre_compile.py(543):     if lo == 0:\\n",\n  "sre_compile.py(547):     prefix = []\\n",\n  "sre_compile.py(548):     prefix_skip = 0\\n",\n  "sre_compile.py(549):     charset = [] # not used\\n",\n  "sre_compile.py(550):     if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):\\n",\n  "sre_compile.py(552):         prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_literal_prefix\\n",\n  "sre_compile.py(463):     prefix = []\\n",\n  "sre_compile.py(464):     prefixappend = prefix.append\\n",\n  "sre_compile.py(465):     prefix_skip = None\\n",\n  "sre_compile.py(466):     iscased = _get_iscased(flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_iscased\\n",\n  "sre_compile.py(454):     if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(455):         return None\\n",\n  "sre_compile.py(467):     for op, av in pattern.data:\\n",\n  "sre_compile.py(468):         if op is LITERAL:\\n",\n  "sre_compile.py(469):             if iscased and iscased(av):\\n",\n  "sre_compile.py(471):             prefixappend(av)\\n",\n  "sre_compile.py(467):     for op, av in pattern.data:\\n",\n  "sre_compile.py(468):         if op is LITERAL:\\n",\n  "sre_compile.py(472):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(473):             group, add_flags, del_flags, p = av\\n",\n  "sre_compile.py(474):             flags1 = _combine_flags(flags, add_flags, del_flags)\\n",\n  " --- modulename: sre_compile, funcname: _combine_flags\\n",\n  "sre_compile.py(67):     if add_flags & TYPE_FLAGS:\\n",\n  "sre_compile.py(69):     return (flags | add_flags) & ~del_flags\\n",\n  "sre_compile.py(475):             if flags1 & SRE_FLAG_IGNORECASE and flags1 & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(477):             prefix1, prefix_skip1, got_all = _get_literal_prefix(p, flags1)\\n",\n  " --- modulename: sre_compile, funcname: _get_literal_prefix\\n",\n  "sre_compile.py(463):     prefix = []\\n",\n  "sre_compile.py(464):     prefixappend = prefix.append\\n",\n  "sre_compile.py(465):     prefix_skip = None\\n",\n  "sre_compile.py(466):     iscased = _get_iscased(flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_iscased\\n",\n  "sre_compile.py(454):     if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(455):         return None\\n",\n  "sre_compile.py(467):     for op, av in pattern.data:\\n",\n  "sre_compile.py(468):         if op is LITERAL:\\n",\n  "sre_compile.py(472):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(487):             break\\n",\n  "sre_compile.py(490):     return prefix, prefix_skip, False\\n",\n  "sre_compile.py(478):             if prefix_skip is None:\\n",\n  "sre_compile.py(479):                 if group is not None:\\n",\n  "sre_compile.py(480):                     prefix_skip = len(prefix)\\n",\n  "sre_compile.py(483):             prefix.extend(prefix1)\\n",\n  "sre_compile.py(484):             if not got_all:\\n",\n  "sre_compile.py(485):                 break\\n",\n  "sre_compile.py(490):     return prefix, prefix_skip, False\\n",\n  "sre_compile.py(554):         if not prefix:\\n",\n  "sre_compile.py(561):     emit = code.append\\n",\n  "sre_compile.py(562):     emit(INFO)\\n",\n  "sre_compile.py(563):     skip = len(code); emit(0)\\n",\n  "sre_compile.py(565):     mask = 0\\n",\n  "sre_compile.py(566):     if prefix:\\n",\n  "sre_compile.py(567):         mask = SRE_INFO_PREFIX\\n",\n  "sre_compile.py(568):         if prefix_skip is None and got_all:\\n",\n  "sre_compile.py(572):     emit(mask)\\n",\n  "sre_compile.py(574):     if lo < MAXCODE:\\n",\n  "sre_compile.py(575):         emit(lo)\\n",\n  "sre_compile.py(579):     emit(min(hi, MAXCODE))\\n",\n  "sre_compile.py(581):     if prefix:\\n",\n  "sre_compile.py(582):         emit(len(prefix)) # length\\n",\n  "sre_compile.py(583):         if prefix_skip is None:\\n",\n  "sre_compile.py(585):         emit(prefix_skip) # skip\\n",\n  "sre_compile.py(586):         code.extend(prefix)\\n",\n  "sre_compile.py(588):         code.extend(_generate_overlap_table(prefix))\\n",\n  " --- modulename: sre_compile, funcname: _generate_overlap_table\\n",\n  "sre_compile.py(441):     table = [0] * len(prefix)\\n",\n  "sre_compile.py(442):     for i in range(1, len(prefix)):\\n",\n  "sre_compile.py(451):     return table\\n",\n  "sre_compile.py(593):     code[skip] = len(code) - skip\\n",\n  "sre_compile.py(607):     _compile(code, p.data, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(93):                 emit(op)\\n",\n  "sre_compile.py(94):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(162):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(163):             group, add_flags, del_flags, p = av\\n",\n  "sre_compile.py(164):             if group:\\n",\n  "sre_compile.py(165):                 emit(MARK)\\n",\n  "sre_compile.py(166):                 emit((group-1)*2)\\n",\n  "sre_compile.py(168):             _compile(code, p, _combine_flags(flags, add_flags, del_flags))\\n",\n  " --- modulename: sre_compile, funcname: _combine_flags\\n",\n  "sre_compile.py(67):     if add_flags & TYPE_FLAGS:\\n",\n  "sre_compile.py(69):     return (flags | add_flags) & ~del_flags\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(339):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(351):             if q - p == 1:\\n",\n  "sre_compile.py(352):                 out.append((LITERAL, p))\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(351):             if q - p == 1:\\n",\n  "sre_compile.py(352):                 out.append((LITERAL, p))\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(355):         out += tail\\n",\n  "sre_compile.py(357):         if hascased or len(out) < len(charset):\\n",\n  "sre_compile.py(360):         return charset, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(124):                 emit(IN)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(257):             emit(av)\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(257):             emit(av)\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(169):             if group:\\n",\n  "sre_compile.py(170):                 emit(MARK)\\n",\n  "sre_compile.py(171):                 emit((group-1)*2+1)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(609):     code.append(SUCCESS)\\n",\n  "sre_compile.py(611):     return code\\n",\n  "sre_compile.py(770):     if flags & SRE_FLAG_DEBUG:\\n",\n  "sre_compile.py(775):     groupindex = p.state.groupdict\\n",\n  "sre_compile.py(776):     indexgroup = [None] * p.state.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(777):     for k, i in groupindex.items():\\n",\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "sre_compile.py(781):         pattern, flags | p.state.flags, code,\\n",\n  "sre_compile.py(782):         p.state.groups-1,\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(783):         groupindex, tuple(indexgroup)\\n",\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "re.py(305):     if not (flags & DEBUG):\\n",\n  " --- modulename: enum, funcname: __and__\\n",\n  "enum.py(978):         if not isinstance(other, (self.__class__, int)):\\n",\n  "enum.py(980):         return self.__class__(self._value_ & self.__class__(other)._value_)\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  "re.py(306):         if len(_cache) >= _MAXCACHE:\\n",\n  "re.py(312):         _cache[type(pattern), pattern, flags] = p\\n",\n  "re.py(313):     return p\\n",\n  " --- modulename: re, funcname: _subx\\n",\n  "re.py(327):     template = _compile_repl(template, pattern)\\n",\n  " --- modulename: re, funcname: _compile_repl\\n",\n  "re.py(318):     return sre_parse.parse_template(repl, pattern)\\n",\n  " --- modulename: sre_parse, funcname: parse_template\\n",\n  "sre_parse.py(974):     s = Tokenizer(source)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(225):         self.istext = isinstance(string, str)\\n",\n  "sre_parse.py(226):         self.string = string\\n",\n  "sre_parse.py(227):         if not self.istext:\\n",\n  "sre_parse.py(229):         self.decoded_string = string\\n",\n  "sre_parse.py(230):         self.index = 0\\n",\n  "sre_parse.py(231):         self.next = None\\n",\n  "sre_parse.py(232):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(975):     sget = s.get\\n",\n  "sre_parse.py(976):     groups = []\\n",\n  "sre_parse.py(977):     literals = []\\n",\n  "sre_parse.py(978):     literal = []\\n",\n  "sre_parse.py(979):     lappend = literal.append\\n",\n  "sre_parse.py(980):     def addgroup(index, pos):\\n",\n  "sre_parse.py(988):     groupindex = state.groupindex\\n",\n  "sre_parse.py(990):         this = sget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(237):         except IndexError:\\n",\n  "sre_parse.py(238):             self.next = None\\n",\n  "sre_parse.py(239):             return\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(991):         if this is None:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(993):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(995):             c = this[1]\\n",\n  "sre_parse.py(996):             if c == \\"g\\":\\n",\n  "sre_parse.py(1018):             elif c == \\"0\\":\\n",\n  "sre_parse.py(1024):             elif c in DIGITS:\\n",\n  "sre_parse.py(1025):                 isoctal = False\\n",\n  "sre_parse.py(1026):                 if s.next in DIGITS:\\n",\n  "sre_parse.py(1037):                 if not isoctal:\\n",\n  "sre_parse.py(1038):                     addgroup(int(this[1:]), len(this) - 1)\\n",\n  " --- modulename: sre_parse, funcname: addgroup\\n",\n  "sre_parse.py(981):         if index > state.groups:\\n",\n  "sre_parse.py(983):         if literal:\\n",\n  "sre_parse.py(986):         groups.append((len(literals), index))\\n",\n  "sre_parse.py(987):         literals.append(None)\\n",\n  "sre_parse.py(990):         this = sget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(237):         except IndexError:\\n",\n  "sre_parse.py(238):             self.next = None\\n",\n  "sre_parse.py(239):             return\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(991):         if this is None:\\n",\n  "sre_parse.py(992):             break # end of replacement string\\n",\n  "sre_parse.py(1048):     if literal:\\n",\n  "sre_parse.py(1050):     if not isinstance(source, str):\\n",\n  "sre_parse.py(1054):     return groups, literals\\n",\n  "re.py(328):     if not template[0] and len(template[1]) == 1:\\n",\n  "re.py(331):     def filter(match, template=template):\\n",\n  "re.py(333):     return filter\\n",\n  "argparse.py(489):         text = _re.sub(r\'%s *%s\' % (open, close), r\'\', text)\\n",\n  " --- modulename: re, funcname: sub\\n",\n  "re.py(210):     return _compile(pattern, flags).sub(repl, string, count)\\n",\n  " --- modulename: re, funcname: _compile\\n",\n  "re.py(291):     if isinstance(flags, RegexFlag):\\n",\n  "re.py(293):     try:\\n",\n  "re.py(294):         return _cache[type(pattern), pattern, flags]\\n",\n  "re.py(295):     except KeyError:\\n",\n  "re.py(296):         pass\\n",\n  "re.py(297):     if isinstance(pattern, Pattern):\\n",\n  "re.py(302):     if not sre_compile.isstring(pattern):\\n",\n  " --- modulename: sre_compile, funcname: isstring\\n",\n  "sre_compile.py(596):     return isinstance(obj, (str, bytes))\\n",\n  "re.py(304):     p = sre_compile.compile(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: compile\\n",\n  "sre_compile.py(762):     if isstring(p):\\n",\n  " --- modulename: sre_compile, funcname: isstring\\n",\n  "sre_compile.py(596):     return isinstance(obj, (str, bytes))\\n",\n  "sre_compile.py(763):         pattern = p\\n",\n  "sre_compile.py(764):         p = sre_parse.parse(p, flags)\\n",\n  " --- modulename: sre_parse, funcname: parse\\n",\n  "sre_parse.py(942):     source = Tokenizer(str)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(225):         self.istext = isinstance(string, str)\\n",\n  "sre_parse.py(226):         self.string = string\\n",\n  "sre_parse.py(227):         if not self.istext:\\n",\n  "sre_parse.py(229):         self.decoded_string = string\\n",\n  "sre_parse.py(230):         self.index = 0\\n",\n  "sre_parse.py(231):         self.next = None\\n",\n  "sre_parse.py(232):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(944):     if state is None:\\n",\n  "sre_parse.py(945):         state = State()\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(77):         self.flags = 0\\n",\n  "sre_parse.py(78):         self.groupdict = {}\\n",\n  "sre_parse.py(79):         self.groupwidths = [None]  # group 0\\n",\n  "sre_parse.py(80):         self.lookbehindgroups = None\\n",\n  "sre_parse.py(946):     state.flags = flags\\n",\n  "sre_parse.py(947):     state.str = str\\n",\n  "sre_parse.py(949):     try:\\n",\n  "sre_parse.py(950):         p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(532):             here = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(534):             set = []\\n",\n  "sre_parse.py(535):             setappend = set.append\\n",\n  "sre_parse.py(538):             if source.next == \'[\':\\n",\n  "sre_parse.py(544):             negate = sourcematch(\\"^\\")\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(554):                     code1 = _class_escape(source, this)\\n",\n  " --- modulename: sre_parse, funcname: _class_escape\\n",\n  "sre_parse.py(297):     code = ESCAPES.get(escape)\\n",\n  "sre_parse.py(298):     if code:\\n",\n  "sre_parse.py(300):     code = CATEGORIES.get(escape)\\n",\n  "sre_parse.py(301):     if code and code[0] is IN:\\n",\n  "sre_parse.py(303):     try:\\n",\n  "sre_parse.py(304):         c = escape[1:2]\\n",\n  "sre_parse.py(305):         if c == \\"x\\":\\n",\n  "sre_parse.py(311):         elif c == \\"u\\" and source.istext:\\n",\n  "sre_parse.py(317):         elif c == \\"U\\" and source.istext:\\n",\n  "sre_parse.py(325):         elif c == \\"N\\" and source.istext:\\n",\n  "sre_parse.py(337):         elif c in OCTDIGITS:\\n",\n  "sre_parse.py(345):         elif c in DIGITS:\\n",\n  "sre_parse.py(347):         if len(escape) == 2:\\n",\n  "sre_parse.py(348):             if c in ASCIILETTERS:\\n",\n  "sre_parse.py(350):             return LITERAL, ord(escape[1])\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(552):                     break\\n",\n  "sre_parse.py(605):             set = _uniq(set)\\n",\n  " --- modulename: sre_parse, funcname: _uniq\\n",\n  "sre_parse.py(433):     return list(dict.fromkeys(items))\\n",\n  "sre_parse.py(607):             if _len(set) == 1 and set[0][0] is LITERAL:\\n",\n  "sre_parse.py(614):                 if negate:\\n",\n  "sre_parse.py(618):                 subpatternappend((IN, set))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(529):             subpatternappend((LITERAL, _ord(this)))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(622):             here = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(623):             if this == \\"?\\":\\n",\n  "sre_parse.py(625):             elif this == \\"*\\":\\n",\n  "sre_parse.py(626):                 min, max = 0, MAXREPEAT\\n",\n  "sre_parse.py(663):             if subpattern:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(664):                 item = subpattern[-1:]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(166):             return SubPattern(self.state, self.data[index])\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(667):             if not item or item[0][0] is AT:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(670):             if item[0][0] in _REPEATCODES:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(673):             if item[0][0] is SUBPATTERN:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(677):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(680):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))\\n",\n  " --- modulename: sre_parse, funcname: __setitem__\\n",\n  "sre_parse.py(169):         self.data[index] = code\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(532):             here = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(534):             set = []\\n",\n  "sre_parse.py(535):             setappend = set.append\\n",\n  "sre_parse.py(538):             if source.next == \'[\':\\n",\n  "sre_parse.py(544):             negate = sourcematch(\\"^\\")\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(554):                     code1 = _class_escape(source, this)\\n",\n  " --- modulename: sre_parse, funcname: _class_escape\\n",\n  "sre_parse.py(297):     code = ESCAPES.get(escape)\\n",\n  "sre_parse.py(298):     if code:\\n",\n  "sre_parse.py(300):     code = CATEGORIES.get(escape)\\n",\n  "sre_parse.py(301):     if code and code[0] is IN:\\n",\n  "sre_parse.py(303):     try:\\n",\n  "sre_parse.py(304):         c = escape[1:2]\\n",\n  "sre_parse.py(305):         if c == \\"x\\":\\n",\n  "sre_parse.py(311):         elif c == \\"u\\" and source.istext:\\n",\n  "sre_parse.py(317):         elif c == \\"U\\" and source.istext:\\n",\n  "sre_parse.py(325):         elif c == \\"N\\" and source.istext:\\n",\n  "sre_parse.py(337):         elif c in OCTDIGITS:\\n",\n  "sre_parse.py(345):         elif c in DIGITS:\\n",\n  "sre_parse.py(347):         if len(escape) == 2:\\n",\n  "sre_parse.py(348):             if c in ASCIILETTERS:\\n",\n  "sre_parse.py(350):             return LITERAL, ord(escape[1])\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(237):         except IndexError:\\n",\n  "sre_parse.py(238):             self.next = None\\n",\n  "sre_parse.py(239):             return\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(552):                     break\\n",\n  "sre_parse.py(605):             set = _uniq(set)\\n",\n  " --- modulename: sre_parse, funcname: _uniq\\n",\n  "sre_parse.py(433):     return list(dict.fromkeys(items))\\n",\n  "sre_parse.py(607):             if _len(set) == 1 and set[0][0] is LITERAL:\\n",\n  "sre_parse.py(614):                 if negate:\\n",\n  "sre_parse.py(618):                 subpatternappend((IN, set))\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(508):             break # end of pattern\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(855):         op, av = subpattern[i]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_parse.py(856):         if op is SUBPATTERN:\\n",\n  "sre_parse.py(854):     for i in range(len(subpattern))[::-1]:\\n",\n  "sre_parse.py(861):     return subpattern\\n",\n  "sre_parse.py(445):         if not sourcematch(\\"|\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(446):             break\\n",\n  "sre_parse.py(448):     if len(items) == 1:\\n",\n  "sre_parse.py(449):         return items[0]\\n",\n  "sre_parse.py(960):     p.state.flags = fix_flags(str, p.state.flags)\\n",\n  " --- modulename: sre_parse, funcname: fix_flags\\n",\n  "sre_parse.py(925):     if isinstance(src, str):\\n",\n  "sre_parse.py(926):         if flags & SRE_FLAG_LOCALE:\\n",\n  "sre_parse.py(928):         if not flags & SRE_FLAG_ASCII:\\n",\n  "sre_parse.py(929):             flags |= SRE_FLAG_UNICODE\\n",\n  "sre_parse.py(937):     return flags\\n",\n  "sre_parse.py(962):     if source.next is not None:\\n",\n  "sre_parse.py(966):     if flags & SRE_FLAG_DEBUG:\\n",\n  "sre_parse.py(969):     return p\\n",\n  "sre_compile.py(768):     code = _code(p, flags)\\n",\n  " --- modulename: sre_compile, funcname: _code\\n",\n  "sre_compile.py(600):     flags = p.state.flags | flags\\n",\n  "sre_compile.py(601):     code = []\\n",\n  "sre_compile.py(604):     _compile_info(code, p, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile_info\\n",\n  "sre_compile.py(540):     lo, hi = pattern.getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(198):                 i, j = av[2].getwidth()\\n",\n  " --- modulename: sre_parse, funcname: getwidth\\n",\n  "sre_parse.py(176):         if self.width is not None:\\n",\n  "sre_parse.py(178):         lo = hi = 0\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_parse.py(199):                 lo = lo + i * av[0]\\n",\n  "sre_parse.py(200):                 hi = hi + j * av[1]\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(180):             if op is BRANCH:\\n",\n  "sre_parse.py(189):             elif op is CALL:\\n",\n  "sre_parse.py(193):             elif op is SUBPATTERN:\\n",\n  "sre_parse.py(197):             elif op in _REPEATCODES:\\n",\n  "sre_parse.py(201):             elif op in _UNITCODES:\\n",\n  "sre_parse.py(202):                 lo = lo + 1\\n",\n  "sre_parse.py(203):                 hi = hi + 1\\n",\n  "sre_parse.py(179):         for op, av in self.data:\\n",\n  "sre_parse.py(220):         self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\\n",\n  "sre_parse.py(221):         return self.width\\n",\n  "sre_compile.py(541):     if hi > MAXCODE:\\n",\n  "sre_compile.py(543):     if lo == 0:\\n",\n  "sre_compile.py(547):     prefix = []\\n",\n  "sre_compile.py(548):     prefix_skip = 0\\n",\n  "sre_compile.py(549):     charset = [] # not used\\n",\n  "sre_compile.py(550):     if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):\\n",\n  "sre_compile.py(552):         prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_literal_prefix\\n",\n  "sre_compile.py(463):     prefix = []\\n",\n  "sre_compile.py(464):     prefixappend = prefix.append\\n",\n  "sre_compile.py(465):     prefix_skip = None\\n",\n  "sre_compile.py(466):     iscased = _get_iscased(flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_iscased\\n",\n  "sre_compile.py(454):     if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(455):         return None\\n",\n  "sre_compile.py(467):     for op, av in pattern.data:\\n",\n  "sre_compile.py(468):         if op is LITERAL:\\n",\n  "sre_compile.py(472):         elif op is SUBPATTERN:\\n",\n  "sre_compile.py(487):             break\\n",\n  "sre_compile.py(490):     return prefix, prefix_skip, False\\n",\n  "sre_compile.py(554):         if not prefix:\\n",\n  "sre_compile.py(555):             charset = _get_charset_prefix(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_charset_prefix\\n",\n  "sre_compile.py(494):         if not pattern.data:\\n",\n  "sre_compile.py(496):         op, av = pattern.data[0]\\n",\n  "sre_compile.py(497):         if op is not SUBPATTERN:\\n",\n  "sre_compile.py(498):             break\\n",\n  "sre_compile.py(504):     iscased = _get_iscased(flags)\\n",\n  " --- modulename: sre_compile, funcname: _get_iscased\\n",\n  "sre_compile.py(454):     if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(455):         return None\\n",\n  "sre_compile.py(505):     if op is LITERAL:\\n",\n  "sre_compile.py(509):     elif op is BRANCH:\\n",\n  "sre_compile.py(521):     elif op is IN:\\n",\n  "sre_compile.py(522):         charset = av\\n",\n  "sre_compile.py(523):         if iscased:\\n",\n  "sre_compile.py(533):         return charset\\n",\n  "sre_compile.py(561):     emit = code.append\\n",\n  "sre_compile.py(562):     emit(INFO)\\n",\n  "sre_compile.py(563):     skip = len(code); emit(0)\\n",\n  "sre_compile.py(565):     mask = 0\\n",\n  "sre_compile.py(566):     if prefix:\\n",\n  "sre_compile.py(570):     elif charset:\\n",\n  "sre_compile.py(571):         mask = mask | SRE_INFO_CHARSET\\n",\n  "sre_compile.py(572):     emit(mask)\\n",\n  "sre_compile.py(574):     if lo < MAXCODE:\\n",\n  "sre_compile.py(575):         emit(lo)\\n",\n  "sre_compile.py(579):     emit(min(hi, MAXCODE))\\n",\n  "sre_compile.py(581):     if prefix:\\n",\n  "sre_compile.py(589):     elif charset:\\n",\n  "sre_compile.py(590):         charset, hascased = _optimize_charset(charset)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(339):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(351):             if q - p == 1:\\n",\n  "sre_compile.py(352):                 out.append((LITERAL, p))\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(351):             if q - p == 1:\\n",\n  "sre_compile.py(352):                 out.append((LITERAL, p))\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(355):         out += tail\\n",\n  "sre_compile.py(357):         if hascased or len(out) < len(charset):\\n",\n  "sre_compile.py(360):         return charset, hascased\\n",\n  "sre_compile.py(591):         assert not hascased\\n",\n  "sre_compile.py(592):         _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(257):             emit(av)\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(257):             emit(av)\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(593):     code[skip] = len(code) - skip\\n",\n  "sre_compile.py(607):     _compile(code, p.data, flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(339):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(351):             if q - p == 1:\\n",\n  "sre_compile.py(352):                 out.append((LITERAL, p))\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(351):             if q - p == 1:\\n",\n  "sre_compile.py(352):                 out.append((LITERAL, p))\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(355):         out += tail\\n",\n  "sre_compile.py(357):         if hascased or len(out) < len(charset):\\n",\n  "sre_compile.py(360):         return charset, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(124):                 emit(IN)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(257):             emit(av)\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(257):             emit(av)\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(132):         elif op is ANY:\\n",\n  "sre_compile.py(137):         elif op in REPEATING_CODES:\\n",\n  "sre_compile.py(138):             if flags & SRE_FLAG_TEMPLATE:\\n",\n  "sre_compile.py(140):             if _simple(av[2]):\\n",\n  " --- modulename: sre_compile, funcname: _simple\\n",\n  "sre_compile.py(425):     if len(p) != 1:\\n",\n  " --- modulename: sre_parse, funcname: __len__\\n",\n  "sre_parse.py(161):         return len(self.data)\\n",\n  "sre_compile.py(427):     op, av = p[0]\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(428):     if op is SUBPATTERN:\\n",\n  "sre_compile.py(430):     return op in _UNIT_CODES\\n",\n  "sre_compile.py(141):                 if op is MAX_REPEAT:\\n",\n  "sre_compile.py(142):                     emit(REPEAT_ONE)\\n",\n  "sre_compile.py(145):                 skip = _len(code); emit(0)\\n",\n  "sre_compile.py(146):                 emit(av[0])\\n",\n  "sre_compile.py(147):                 emit(av[1])\\n",\n  "sre_compile.py(148):                 _compile(code, av[2], flags)\\n",\n  " --- modulename: sre_compile, funcname: _compile\\n",\n  "sre_compile.py(73):     emit = code.append\\n",\n  "sre_compile.py(74):     _len = len\\n",\n  "sre_compile.py(75):     LITERAL_CODES = _LITERAL_CODES\\n",\n  "sre_compile.py(76):     REPEATING_CODES = _REPEATING_CODES\\n",\n  "sre_compile.py(77):     SUCCESS_CODES = _SUCCESS_CODES\\n",\n  "sre_compile.py(78):     ASSERT_CODES = _ASSERT_CODES\\n",\n  "sre_compile.py(79):     iscased = None\\n",\n  "sre_compile.py(80):     tolower = None\\n",\n  "sre_compile.py(81):     fixes = None\\n",\n  "sre_compile.py(82):     if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(92):             if not flags & SRE_FLAG_IGNORECASE:\\n",\n  "sre_compile.py(93):                 emit(op)\\n",\n  "sre_compile.py(94):                 emit(av)\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  " --- modulename: sre_parse, funcname: __getitem__\\n",\n  "sre_parse.py(165):         if isinstance(index, slice):\\n",\n  "sre_parse.py(167):         return self.data[index]\\n",\n  "sre_compile.py(149):                 emit(SUCCESS)\\n",\n  "sre_compile.py(150):                 code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(91):         if op in LITERAL_CODES:\\n",\n  "sre_compile.py(119):         elif op is IN:\\n",\n  "sre_compile.py(120):             charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\\n",\n  " --- modulename: sre_compile, funcname: _optimize_charset\\n",\n  "sre_compile.py(278):     out = []\\n",\n  "sre_compile.py(279):     tail = []\\n",\n  "sre_compile.py(280):     charmap = bytearray(256)\\n",\n  "sre_compile.py(281):     hascased = False\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(284):             try:\\n",\n  "sre_compile.py(285):                 if op is LITERAL:\\n",\n  "sre_compile.py(286):                     if fixup:\\n",\n  "sre_compile.py(295):                         charmap[av] = 1\\n",\n  "sre_compile.py(331):             break\\n",\n  "sre_compile.py(282):     for op, av in charset:\\n",\n  "sre_compile.py(334):     runs = []\\n",\n  "sre_compile.py(335):     q = 0\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(340):         if len(runs) >= 2:\\n",\n  "sre_compile.py(343):         q = charmap.find(0, p)\\n",\n  "sre_compile.py(344):         if q < 0:\\n",\n  "sre_compile.py(347):         runs.append((p, q))\\n",\n  "sre_compile.py(337):         p = charmap.find(1, q)\\n",\n  "sre_compile.py(338):         if p < 0:\\n",\n  "sre_compile.py(339):             break\\n",\n  "sre_compile.py(348):     if runs is not None:\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(351):             if q - p == 1:\\n",\n  "sre_compile.py(352):                 out.append((LITERAL, p))\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(351):             if q - p == 1:\\n",\n  "sre_compile.py(352):                 out.append((LITERAL, p))\\n",\n  "sre_compile.py(350):         for p, q in runs:\\n",\n  "sre_compile.py(355):         out += tail\\n",\n  "sre_compile.py(357):         if hascased or len(out) < len(charset):\\n",\n  "sre_compile.py(360):         return charset, hascased\\n",\n  "sre_compile.py(121):             if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\\n",\n  "sre_compile.py(123):             elif not hascased:\\n",\n  "sre_compile.py(124):                 emit(IN)\\n",\n  "sre_compile.py(129):             skip = _len(code); emit(0)\\n",\n  "sre_compile.py(130):             _compile_charset(charset, flags, code)\\n",\n  " --- modulename: sre_compile, funcname: _compile_charset\\n",\n  "sre_compile.py(251):     emit = code.append\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(257):             emit(av)\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(253):         emit(op)\\n",\n  "sre_compile.py(254):         if op is NEGATE:\\n",\n  "sre_compile.py(256):         elif op is LITERAL:\\n",\n  "sre_compile.py(257):             emit(av)\\n",\n  "sre_compile.py(252):     for op, av in charset:\\n",\n  "sre_compile.py(274):     emit(FAILURE)\\n",\n  "sre_compile.py(131):             code[skip] = _len(code) - skip\\n",\n  "sre_compile.py(90):     for op, av in pattern:\\n",\n  "sre_compile.py(609):     code.append(SUCCESS)\\n",\n  "sre_compile.py(611):     return code\\n",\n  "sre_compile.py(770):     if flags & SRE_FLAG_DEBUG:\\n",\n  "sre_compile.py(775):     groupindex = p.state.groupdict\\n",\n  "sre_compile.py(776):     indexgroup = [None] * p.state.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(777):     for k, i in groupindex.items():\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "sre_compile.py(781):         pattern, flags | p.state.flags, code,\\n",\n  "sre_compile.py(782):         p.state.groups-1,\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_compile.py(783):         groupindex, tuple(indexgroup)\\n",\n  "sre_compile.py(780):     return _sre.compile(\\n",\n  "re.py(305):     if not (flags & DEBUG):\\n",\n  " --- modulename: enum, funcname: __and__\\n",\n  "enum.py(978):         if not isinstance(other, (self.__class__, int)):\\n",\n  "enum.py(980):         return self.__class__(self._value_ & self.__class__(other)._value_)\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  " --- modulename: enum, funcname: __call__\\n",\n  "enum.py(383):         if names is None:  # simple value lookup\\n",\n  "enum.py(384):             return cls.__new__(cls, value)\\n",\n  " --- modulename: enum, funcname: __new__\\n",\n  "enum.py(674):         if type(value) is cls:\\n",\n  "enum.py(679):         try:\\n",\n  "enum.py(680):             return cls._value2member_map_[value]\\n",\n  "re.py(306):         if len(_cache) >= _MAXCACHE:\\n",\n  "re.py(312):         _cache[type(pattern), pattern, flags] = p\\n",\n  "re.py(313):     return p\\n",\n  "argparse.py(490):         text = _re.sub(r\'\\\\(([^|]*)\\\\)\', r\'\\\\1\', text)\\n",\n  " --- modulename: re, funcname: sub\\n",\n  "re.py(210):     return _compile(pattern, flags).sub(repl, string, count)\\n",\n  " --- modulename: re, funcname: _compile\\n",\n  "re.py(291):     if isinstance(flags, RegexFlag):\\n",\n  "re.py(293):     try:\\n",\n  "re.py(294):         return _cache[type(pattern), pattern, flags]\\n",\n  "re.py(295):     except KeyError:\\n",\n  "re.py(296):         pass\\n",\n  "re.py(297):     if isinstance(pattern, Pattern):\\n",\n  "re.py(302):     if not sre_compile.isstring(pattern):\\n",\n  " --- modulename: sre_compile, funcname: isstring\\n",\n  "sre_compile.py(596):     return isinstance(obj, (str, bytes))\\n",\n  "re.py(304):     p = sre_compile.compile(pattern, flags)\\n",\n  " --- modulename: sre_compile, funcname: compile\\n",\n  "sre_compile.py(762):     if isstring(p):\\n",\n  " --- modulename: sre_compile, funcname: isstring\\n",\n  "sre_compile.py(596):     return isinstance(obj, (str, bytes))\\n",\n  "sre_compile.py(763):         pattern = p\\n",\n  "sre_compile.py(764):         p = sre_parse.parse(p, flags)\\n",\n  " --- modulename: sre_parse, funcname: parse\\n",\n  "sre_parse.py(942):     source = Tokenizer(str)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(225):         self.istext = isinstance(string, str)\\n",\n  "sre_parse.py(226):         self.string = string\\n",\n  "sre_parse.py(227):         if not self.istext:\\n",\n  "sre_parse.py(229):         self.decoded_string = string\\n",\n  "sre_parse.py(230):         self.index = 0\\n",\n  "sre_parse.py(231):         self.next = None\\n",\n  "sre_parse.py(232):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(241):             index += 1\\n",\n  "sre_parse.py(242):             try:\\n",\n  "sre_parse.py(243):                 char += self.decoded_string[index]\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(944):     if state is None:\\n",\n  "sre_parse.py(945):         state = State()\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(77):         self.flags = 0\\n",\n  "sre_parse.py(78):         self.groupdict = {}\\n",\n  "sre_parse.py(79):         self.groupwidths = [None]  # group 0\\n",\n  "sre_parse.py(80):         self.lookbehindgroups = None\\n",\n  "sre_parse.py(946):     state.flags = flags\\n",\n  "sre_parse.py(947):     state.str = str\\n",\n  "sre_parse.py(949):     try:\\n",\n  "sre_parse.py(950):         p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(525):             code = _escape(source, this, state)\\n",\n  " --- modulename: sre_parse, funcname: _escape\\n",\n  "sre_parse.py(357):     code = CATEGORIES.get(escape)\\n",\n  "sre_parse.py(358):     if code:\\n",\n  "sre_parse.py(360):     code = ESCAPES.get(escape)\\n",\n  "sre_parse.py(361):     if code:\\n",\n  "sre_parse.py(363):     try:\\n",\n  "sre_parse.py(364):         c = escape[1:2]\\n",\n  "sre_parse.py(365):         if c == \\"x\\":\\n",\n  "sre_parse.py(371):         elif c == \\"u\\" and source.istext:\\n",\n  "sre_parse.py(377):         elif c == \\"U\\" and source.istext:\\n",\n  "sre_parse.py(385):         elif c == \\"N\\" and source.istext:\\n",\n  "sre_parse.py(397):         elif c == \\"0\\":\\n",\n  "sre_parse.py(401):         elif c in DIGITS:\\n",\n  "sre_parse.py(424):         if len(escape) == 2:\\n",\n  "sre_parse.py(425):             if c in ASCIILETTERS:\\n",\n  "sre_parse.py(427):             return LITERAL, ord(escape[1])\\n",\n  "sre_parse.py(526):             subpatternappend(code)\\n",\n  " --- modulename: sre_parse, funcname: append\\n",\n  "sre_parse.py(173):         self.data.append(code)\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(620):         elif this in REPEAT_CHARS:\\n",\n  "sre_parse.py(682):         elif this == \\".\\":\\n",\n  "sre_parse.py(685):         elif this == \\"(\\":\\n",\n  "sre_parse.py(686):             start = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(687):             group = True\\n",\n  "sre_parse.py(688):             name = None\\n",\n  "sre_parse.py(689):             add_flags = 0\\n",\n  "sre_parse.py(690):             del_flags = 0\\n",\n  "sre_parse.py(691):             if sourcematch(\\"?\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(829):             if group is not None:\\n",\n  "sre_parse.py(830):                 try:\\n",\n  "sre_parse.py(831):                     group = state.opengroup(name)\\n",\n  " --- modulename: sre_parse, funcname: opengroup\\n",\n  "sre_parse.py(85):         gid = self.groups\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(86):         self.groupwidths.append(None)\\n",\n  "sre_parse.py(87):         if self.groups > MAXGROUPS:\\n",\n  " --- modulename: sre_parse, funcname: groups\\n",\n  "sre_parse.py(83):         return len(self.groupwidths)\\n",\n  "sre_parse.py(89):         if name is not None:\\n",\n  "sre_parse.py(95):         return gid\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(834):             sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\\n",\n  "sre_parse.py(836):             p = _parse_sub(source, state, sub_verbose, nested + 1)\\n",\n  " --- modulename: sre_parse, funcname: _parse_sub\\n",\n  "sre_parse.py(438):     items = []\\n",\n  "sre_parse.py(439):     itemsappend = items.append\\n",\n  "sre_parse.py(440):     sourcematch = source.match\\n",\n  "sre_parse.py(441):     start = source.tell()\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  "sre_parse.py(444):                            not nested and not items))\\n",\n  "sre_parse.py(443):         itemsappend(_parse(source, state, verbose, nested + 1,\\n",\n  " --- modulename: sre_parse, funcname: _parse\\n",\n  "sre_parse.py(495):     subpattern = SubPattern(state)\\n",\n  " --- modulename: sre_parse, funcname: __init__\\n",\n  "sre_parse.py(112):         self.state = state\\n",\n  "sre_parse.py(113):         if data is None:\\n",\n  "sre_parse.py(114):             data = []\\n",\n  "sre_parse.py(115):         self.data = data\\n",\n  "sre_parse.py(116):         self.width = None\\n",\n  "sre_parse.py(498):     subpatternappend = subpattern.append\\n",\n  "sre_parse.py(499):     sourceget = source.get\\n",\n  "sre_parse.py(500):     sourcematch = source.match\\n",\n  "sre_parse.py(501):     _len = len\\n",\n  "sre_parse.py(502):     _ord = ord\\n",\n  "sre_parse.py(506):         this = source.next\\n",\n  "sre_parse.py(507):         if this is None:\\n",\n  "sre_parse.py(509):         if this in \\"|)\\":\\n",\n  "sre_parse.py(511):         sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(513):         if verbose:\\n",\n  "sre_parse.py(524):         if this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(528):         elif this not in SPECIAL_CHARS:\\n",\n  "sre_parse.py(531):         elif this == \\"[\\":\\n",\n  "sre_parse.py(532):             here = source.tell() - 1\\n",\n  " --- modulename: sre_parse, funcname: tell\\n",\n  "sre_parse.py(287):         return self.index - len(self.next or \'\')\\n",\n  "sre_parse.py(534):             set = []\\n",\n  "sre_parse.py(535):             setappend = set.append\\n",\n  "sre_parse.py(538):             if source.next == \'[\':\\n",\n  "sre_parse.py(544):             negate = sourcematch(\\"^\\")\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(251):             self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(252):             return True\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(553):                 elif this[0] == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(556):                     if set and this in \'-&~|\' and source.next == this:\\n",\n  "sre_parse.py(567):                     code1 = LITERAL, _ord(this)\\n",\n  "sre_parse.py(568):                 if sourcematch(\\"-\\"):\\n",\n  " --- modulename: sre_parse, funcname: match\\n",\n  "sre_parse.py(250):         if char == self.next:\\n",\n  "sre_parse.py(253):         return False\\n",\n  "sre_parse.py(601):                     if code1[0] is IN:\\n",\n  "sre_parse.py(603):                     setappend(code1)\\n",\n  "sre_parse.py(547):                 this = sourceget()\\n",\n  " --- modulename: sre_parse, funcname: get\\n",\n  "sre_parse.py(255):         this = self.next\\n",\n  "sre_parse.py(256):         self.__next()\\n",\n  " --- modulename: sre_parse, funcname: __next\\n",\n  "sre_parse.py(234):         index = self.index\\n",\n  "sre_parse.py(235):         try:\\n",\n  "sre_parse.py(236):             char = self.decoded_string[index]\\n",\n  "sre_parse.py(240):         if char == \\"\\\\\\\\\\":\\n",\n  "sre_parse.py(247):         self.index = index + 1\\n",\n  "sre_parse.py(248):         self.next = char\\n",\n  "sre_parse.py(257):         return this\\n",\n  "sre_parse.py(548):                 if this is None:\\n",\n  "sre_parse.py(551):                 if this == \\"]\\" and set:\\n",\n  "sre_parse.py(552):                     break\\n",\n  "sre_parse.py(605):             set = _uniq(set)\\n"\n ]\n}\n   ],\n   "source": [\n"python-trace l $BIN_DIR/template.py #(need some help to test it properly - seems to function / time consuming)"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 33,\n   "id": "b36455c6",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"# which-python SHOWS THE PATH OF PYTHON\\n",\n"alias which-python=\'which python\'\\n",\n"which-python\\n",\n"linebr\\n",\n"alias which-py3=\'which python3\' #(ADDED FOR PYTHON3)\\n",\n"which-py3"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 34,\n   "id": "ed4439cb",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"# py-diff : CHECKS THE DIFFERENCE BETWEEN THE PYTHON FILES\\n",\n"# TODO: specify options before the pattern (or modify do_diff.sh to allow after)\\n",\n"function py-diff () { do_diff.sh \'*.py *.mako\' \\"$@\\" 2>&1 | $PAGER; }\\n",\n"pwd"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 35,\n   "id": "08329d8b",\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "abc1.py  abc.py  xyz.py\\n"\n ]\n}\n   ],\n   "source": [\n"#py-diff $BIN_DIR/tests/batspp.py $BIN_DIR/tests/ipynb_to_batspp.py\\n",\n"rm -rf ./*\\n",\n"printf \\"print(\'THIS IS A TEST\')\\" > abc.py\\n",\n"printf \\"print(\'THIS IS A TEST\')\\" > xyz.py\\n",\n"printf \\"print(\'THIS IS A TEST11\')\\" > abc1.py\\n",\n"ls"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 36,\n   "id": "2170c0a2",\n   "metadata": {\n"scrolled": true\n   },\n   "outputs": [],\n   "source": [\n"# $ py-diff ./ \\n",\n"#(help required - process not ending)"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 37,\n   "id": "eaa5f6d0",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"# TEST NOT APPLICABLE RN \\n",\n"function kivy-win32-env {\\n",\n"   export PYTHONPATH=\'c:/cartera-de-tomas/python;c:/Program-Misc/python/kivy-1-9-0/kivy27\'\\n",\n"   kivy_dir=\\"/c/Program-Misc/python/kivy-1-9-0\\"\\n",\n"   python_dir=\\"$kivy_dir/Python27\\"\\n",\n"   prepend-path \\"$kivy_dir:$kivy_dir/Python27:$kivy_dir/tools:$kivy_dir/Python27/Scripts:$kivy_dir/gstreamer/bin:$kivy_dir/MinGW/bin:$kivy_dir/SDL2/bin\\"\\n",\n"}"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 38,\n   "id": "7a76a0af",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"alias elide-data=\'python -m transpose_data --elide\'\\n",\n"alias kill-python=\\"kill_em.sh --filter \'ipython|emacs\' python\\"\\n",\n"alias kill-python-all=\\"kill_em.sh python\\""\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 57,\n   "id": "5c13c9ad",\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "linux-gnu\\n",\n  "--------------------------------------------------------------------------------\\n",\n  "/home/aveey/miniconda3/bin/python: No module named transpose_data\\n"\n ]\n},\n{\n "ename": "",\n "evalue": "1",\n "output_type": "error",\n "traceback": []\n}\n   ],\n   "source": [\n"# # ERRORS = OSTYPE is \'undefined variable\' \\n",\n"# # NOTE: elide-data shows RuntimeError if any testfile is named abc.py\\n",\n"\\n",\n"# $ echo $OSTYPE\\n",\n"#   linebr\\n",\n"#   elide-data $BIN_DIR/template.py\\n",\n"#   linebr\\n",\n"#   kill-python\\n",\n"#   linebr\\n",\n"#   kill-python-all\\n",\n"\\n",\n"# | linux-gnu\\n",\n"# | --------------------------------------------------------------------------------\\n",\n"# | /home/aveey/miniconda3/bin/python: No module named transpose_data\\n",\n"# | --------------------------------------------------------------------------------\\n",\n"# | pattern=/:[0-9][0-9] [^ ]*python/\\n",\n"# | filter=/ipython|emacs/\\n",\n"# | OSTYPE: Undefined variable.\\n",\n"# | --------------------------------------------------------------------------------\\n",\n"# | pattern=/:[0-9][0-9] [^ ]*python/\\n",\n"# | filter=/($)(^)/\\n",\n"# | OSTYPE: Undefined variable.\\n",\n"\\n",\n"echo $OSTYPE\\n",\n"linebr\\n",\n"elide-data $BIN_DIR/template.py\\n"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 44,\n   "id": "48da66dc",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"# run-jupyter-notebook(port=18888): run jupyter notebook on PORT\\n",\n"alias TODAY=\'date\'\\n",\n"alias extract-matches=\'extract_matches.perl\'\\n",\n"\\n",\n"function run-jupyter-notebook () {\\n",\n"    local port=\\"$1\\"; if [ \\"$port\\" = \\"\\" ]; then port=8888; fi\\n",\n"    local ip=\\"$2\\"; if [ \\"$ip\\" = \\"\\" ]; then ip=\\"127.0.0.1\\"; fi\\n",\n"    local log=\\"$TEMP/jupyter-$(TODAY).log\\"\\n",\n"    jupyter notebook --NotebookApp.token=\'\' --no-browser --port $port --ip $ip >> \\"$log\\" 2>&1 &\\n",\n"    echo \\"$log\\"\\n",\n"    # Let jupyter initialize\\n",\n"    local delay=5\\n",\n"    echo \\"sleeping $delay seconds for log to stabalize (effing jupyter)\\"\\n",\n"    sleep $delay\\n",\n"    # TODO: resolve problem extracting URL\\n",\n"    # TEMP:\\n",\n"    tail \\"$log\\"\\n",\n"    # Show URL\\n",\n"    echo -n \\"URL: \\"\\n",\n"    extract-matches \'http:\\\\S+\' \\"$log\\" | sort -u\\n",\n"}\\n",\n"alias jupyter-notebook-redir=run-jupyter-notebook\\n",\n"alias jupyter-notebook-redir-open=\'run-jupyter-notebook 8888 0.0.0.0\'"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 46,\n   "id": "ff417aa3",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"# # ERROR GENERATED (see below)\\n",\n"# $ jupyter-notebook-redir-open\\n",\n"\\n",\n"# | [1] 5335\\n",\n"# | /jupyter-Sun Aug 28 08:13:40 AM +0545 2022.log\\n",\n"# | sleeping 5 seconds for log to stabalize (effing jupyter)\\n",\n"# | bash: /jupyter-Sun Aug 28 08:13:40 AM +0545 2022.log: Permission denied\\n",\n"# | [1]+  Exit 1                  jupyter notebook --NotebookApp.token=\'\' --no-browser --port $port --ip $ip >> \\"$log\\" 2>&1\\n",\n"# | tail: cannot open \'/jupyter-Sun Aug 28 08:13:40 AM +0545 2022.log\' for reading: No such file or directory\\n",\n"# | URL: Can\'t open /jupyter-Sun Aug 28 08:13:40 AM +0545 2022.log: No such file or directory at /home/aveey/bin/extract_matches.perl line 132.\\n"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 47,\n   "id": "cd7cef57",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"# Python-based utilities\\n",\n"function extract-text() { python -m extract_document_text \\"$@\\"; }\\n",\n"alias xtract-text=\'extract-text\'\\n"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 54,\n   "id": "311de0a1",\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "/home/aveey/miniconda3/bin/python: No module named extract_document_text\\n"\n ]\n},\n{\n "ename": "",\n "evalue": "1",\n "output_type": "error",\n "traceback": []\n}\n   ],\n   "source": [\n"# # ERROR - MODULE NOT FOUND\\n",\n"\\n",\n"# $ rm -rf ./*\\n",\n"#   printf \\"print(\'THIS IS A TEST FOR TEXT EXTRACT ALIAS.\')\\" > textex.py\\n",\n"#   xtract-text ./textex.py\\n",\n"\\n",\n"# | /home/aveey/miniconda3/bin/python: No module named extract_document_text"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 58,\n   "id": "393371d1",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"function test-script () {\\n",\n"    local base=$(basename \\"$1\\" .py)\\n",\n"    local date=$(todays-date)\\n",\n"    # note: uses both Mercurial root and . (in case not in repository)\\n",\n"    local root=$(hg root)\\n",\n"    PYTHONPATH=\\"$root:.:$SANDBOX/tests:$PYTHONPATH\\" $NICE $PYTHON tests/test_$base.py --verbose >| tests/_test_$base.$date.log 2>&1;\\n",\n"    less-tail tests/_test_$base.$date.log;\\n",\n"}\\n",\n"#\\n",\n"alias test-script-debug=\'ALLOW_SUBCOMMAND_TRACING=1 DEBUG_LEVEL=5 MISC_TRACING_LEVEL=5 test-script\'\\n"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 59,\n   "id": "90b1a9c1",\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "bash: hg: command not found\\n",\n  "bash: tests/_test_textex.28aug22.log: No such file or directory\\n",\n  "tests/_test_textex.28aug22.log: No such file or directory\\n"\n ]\n},\n{\n "ename": "",\n "evalue": "1",\n "output_type": "error",\n "traceback": []\n}\n   ],\n   "source": [\n"test-script ./textex.py"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 60,\n   "id": "d40cd965",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"# randomize-datafie(file, [num[): randomize datafile optionally pruned to NUM lines, preserving header line\\n",\n"#\\n",\n"function randomize-datafile() {\\n",\n"    local file=\\"$1\\"\\n",\n"    local num_lines=\\"$2\\"\\n",\n"    if [ \\"$num_lines\\" = \\"\\" ]; then num_lines=$(wc -l \\"$file\\"); fi\\n",\n"    #\\n",\n"    head -1 \\"$file\\"\\n",\n"    tail --lines=+2 \\"$file\\" | python -m randomize_lines | head -$num_lines\\n",\n"}\\n"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 61,\n   "id": "54f09793",\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "#! /usr/bin/env python\\n",\n  "#! /usr/bin/env python\\n",\n  "\\n",\n  "import sys\\n",\n  "import os\\n",\n  "\\n",\n  "filename_arg = sys.argv\\n",\n  "file_in_ipynb = filename_arg[1]\\n",\n  "\\n",\n  "def batspp_rename():\\n",\n  "    file_in_batspp = file_in_ipynb.replace(\\".ipynb\\", \\".batspp\\")#<--CONVERTS EXTENSION TO BATSPP\\n",\n  "    RENAME_COMMAND = f\\"mv {file_in_ipynb} {file_in_batspp}\\"#<--COMMAND TO BE EXECUTED\\n",\n  "    \\n",\n  "    os.system(RENAME_COMMAND)\\n",\n  "    print(f\\"Changes were made to {file_in_ipynb}.\\\\n\\\\nFILE RENAMED:\\\\n{file_in_ipynb} --> {file_in_batspp}\\")\\n",\n  "\\n",\n  "# START OF MAIN #\\n",\n  "if \\".ipynb\\" in file_in_ipynb:\\n",\n  "    batspp_rename()\\n",\n  "else:\\n",\n  "    print (f\\"The selected file is not an IPython file.\\\\nNo changes were made to the file: {file_in_ipynb}\\")    \\n",\n  "/home/aveey/miniconda3/bin/python: No module named randomize_lines\\n"\n ]\n}\n   ],\n   "source": [\n"# ERROR : MISSING MODULE (No module named randomize_lines)\\n",\n"randomize-datafile $BIN_DIR/tests/ipynb_to_batspp.py\\n"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 62,\n   "id": "e8e581ee",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"# filter-random(pct, file, [include_header=1])Randomize lines based on percentages, using output lile (e.g., _r10pct-fubar.data).\\n",\n"# Notes:\\n",\n"# - By default, includes first line assuming it is header line.\\n",\n"# - Includes support for compressed files (both input and output).\\n",\n"function filter-random() {\\n",\n"    local pct=\\"$1\\"\\n",\n"    local file=\\"$2\\"\\n",\n"    local include_header=\\"$3\\"\\n",\n"    if [ \\"$include_header\\" == \\"\\" ]; then include_header=1; fi\\n",\n"\\n",\n"    # Derive settings from input arguments\\n",\n"    local ratio=$(perl -e \\"printf(\'%.3f\', ($pct / 100.0));\\")\\n",\n"    local compressed=0\\n",\n"    if [[ $file =~ .gz ]]; then compressed=1; fi\\n",\n"    local dir=$(dirname $file)\\n",\n"    local base=$(basename $file)\\n",\n"    local type=\\"cat\\"\\n",\n"    local result=\\"$dir/_r${pct}pct-$base\\"\\n",\n"\\n",\n"    # Filter the file, optionally uncompressing\\n",\n"    if [ \\"$compressed\\" = \\"1\\" ]; then \\n",\n"       type=\\"zcat\\"; \\n",\n"       result=$(echo \\"$result\\" | perl -pe \'s/.gz$//;\')\\n",\n"    fi\\n",\n"    local opts=\\"\\"\\n",\n"    if [ \\"$include_header\\" = \\"1\\" ]; then opts=\\"$opt --include-header\\"; fi\\n",\n"    $type \\"$file\\" | $PYTHON -m filter_random $opts --ratio $ratio - > \\"$result\\" 2> \\"$result.log\\"\\n",\n"\\n",\n"    # Compress result if original compressed\\n",\n"    if [ \\"$compressed\\" = \\"1\\" ]; then \\n",\n"       gzip --force \\"$result\\"; \\n",\n"    fi\\n",\n"}"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 82,\n   "id": "14e001ee",\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "syntax error at -e line 1, near \\"(.\\"\\n",\n  "Execution of -e aborted due to compilation errors.\\n",\n  "dirname: missing operand\\n",\n  "Try \'dirname --help\' for more information.\\n",\n  "basename: missing operand\\n",\n  "Try \'basename --help\' for more information.\\n",\n  "bash: /_r./www.google.compct-: No such file or directory\\n",\n  "cat: \'\': No such file or directory\\n"\n ]\n}\n   ],\n   "source": [\n"# filter-random _r10pct-fubar.data (TBF - NEED HELP OPERATING)"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 70,\n   "id": "e7b608f3",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"# Load supporting scripts\\n",\n"#\\n",\n"function conditional-source () { if [ -e \\"$1\\" ]; then source \\"$1\\"; else echo \\"Warning: bash script file not found (so not sourced):\\"; echo \\"    $1\\"; fi; }\\n",\n"function quiet-unalias {\\n",\n"    ## HACK: do nothing if running under bats-core\\n",\n"    if [ \\"$BATS_TEST_FILENAME\\" != \\"\\" ]; then\\n",\n"        if [ \\"$BATCH_MODE\\" != \\"1\\" ]; then\\n",\n"            echo \\"Ignoring unalias over $* for sake of bats\\"\\n",\n"        fi\\n",\n"        return\\n",\n"    fi\\n",\n"    ## OLD: unalias \\"$@\\" 2> /dev/null;\\n",\n"    unalias \\"$@\\" 2> /dev/null || true;\\n",\n"    ## OLD: echo > /dev/null;\\n",\n"}\\n",\n"\\n",\n"conditional-source $BIN_DIR/anaconda-aliases.bash\\n",\n"conditional-source $BIN_DIR/git-aliases.bash\\n",\n"\\n"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 71,\n   "id": "1ba1bc6c",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"function curl-dump () {\\n",\n"    local url=\\"$1\\";\\n",\n"    local base=$(basename $url);\\n",\n"    curl $url > $base;\\n",\n"}\\n",\n"# EX: url-path $BIN/templata.html => \\"file:///$BIN/template.html\\"\\n",\n"function url-path () {\\n",\n"    local file=\\"$1\\"\\n",\n"    echo $(realpath \\"$file\\") | perl -pe \'s@^@file:///@;\'\\n",\n"}"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 77,\n   "id": "8331970a",\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\\n",\n  "                                 Dload  Upload   Total   Spent    Left  Speed\\n",\n  "100 16484    0 16484    0     0  40812      0 --:--:-- --:--:-- --:--:-- 40903\\n",\n  "--------------------------------------------------------------------------------\\n",\n  "total 24\\n",\n  "-rw-rw-r-- 1 aveey aveey    47 Aug 28 08:19 textex.py\\n",\n  "-rw-rw-r-- 1 aveey aveey 16484 Aug 28 08:43 www.google.com\\n",\n  "--------------------------------------------------------------------------------\\n",\n  "file:////home/aveey/tom-project/shell-scripts/tests/batspp.py\\n"\n ]\n}\n   ],\n   "source": [\n"# TESTS FOR curl-dump AND url-path\\n",\n"curl-dump https://www.google.com/\\n",\n"linebr\\n",\n"ls -l\\n",\n"linebr\\n",\n"url-path $BIN_DIR/tests/batspp.py"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 79,\n   "id": "a98b1d54",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"function invoke-browser() {\\n",\n"    local browser_executable=\\"$1\\"\\n",\n"    local file=\\"$2\\"\\n",\n"    if [ \\"$file\\" != \\"\\" ]; then\\n",\n"        if [[ ! $file =~ http ]]; then\\n",\n"            file=$(url-path \\"$file\\")\\n",\n"        fi\\n",\n"    fi\\n",\n"    ## TODO?\\n",\n"    ## if [ ! -e \\"$browser_executable\\" ]; then\\n",\n"    ##     browser_executable_path=$(which \\"browser_executable\\")\\n",\n"    ##     if [ \\"$browser_executable_path\\" = \\"\\" ]; then browser_executable=\\"$_path\\"; fi   \\n",\n"    ## fi\\n",\n"    local browser_base=$(basename \\"$browser_executable\\")\\n",\n"    $browser_executable \\"$file\\" >> $TEMP/$browser_base.$(TODAY).log 2>&1 &\\n",\n"}\\n",\n"\\n",\n"alias firefox=\'invoke-browser \\"\'\\"$(which firefox)\\"\'\\"\'"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 80,\n   "id": "5143a042",\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "[1] 6452\\n"\n ]\n},\n{\n "ename": "",\n "evalue": "1",\n "output_type": "error",\n "traceback": []\n}\n   ],\n   "source": [\n"firefox (#TESTS REMAINS FOR invoke-browser)"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "7ad94254",\n   "metadata": {},\n   "outputs": [],\n   "source": []\n  }\n ],\n "metadata": {\n  "kernelspec": {\n   "display_name": "Bash",\n   "language": "bash",\n   "name": "bash"\n  },\n  "language_info": {\n   "codemirror_mode": "shell",\n   "file_extension": ".sh",\n   "mimetype": "text/x-sh",\n   "name": "bash"\n  }\n },\n "nbformat": 4,\n "nbformat_minor": 5\n}'
}
