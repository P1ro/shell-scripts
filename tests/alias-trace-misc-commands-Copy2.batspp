## TEST:  Make sure simple prompt used (e.g., no escapes that might contaminate output)
## PS1="$ "
## TODO: PS1="> "
## NOTE: The Jupyter bash kernel requires that PS1 not be modified as they customize it. 
$ echo $PS1
[PEXP\[\]ECT_PROMPT>

# Delete all aliases and function
# TODO: Instead start from pristine environment
$ unalias -a
$ alias | wc -l
$ for f in $(typeset -f | egrep '^\w+'); do unset -f $f; done
$ typeset -f | egrep '^\w+' | wc -l
0
0

# Setting a temp directory for tests
$ TMP=/tmp/test-trace-misc
## NOTE: Source it directly from the ./tests directory.
$ BIN_DIR=$PWD/..
## You will need to run jupyter from that directory.
$ alias | wc -l
0

## NOTE: For reproducability, the directory name needs to be fixed
## In place of $$, use a psuedo random number (e,g., 1210)
## *** All output from one run to the next needs to be the same ***
## temp_dir=$TMP/test-$$
$ temp_dir=$TMP/test-1210
$ mkdir -p "$temp_dir"
# TODO: /bin/rm -rvf "$temp_dir"
$ cd "$temp_dir"
$ pwd
#ALIAS FOR PRINTING SEPERATION LINES (FOR JUPYTER)
$ alias linebr="printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -"
/tmp/test-trace-misc/test-1210

# Count aliases proper
$ alias | wc -l
# Count functions
$ typeset -f | egrep '^\w+' | wc -l
1
0

##1 SHOWS HISTORY OF BASH COMMANDS
$ alias hist='history $LINES'
##2 SHOWS HISTORY WITHOUT TIMESTAMPS
$ function h { hist | perl -pe 's/^(\s*\d+\s*)(\[[^\]]+\])(.*)/$1$3/;'; }
## CREATES ERROR (INVALID SYNTAX)
# $ hist
# $ h

##3 ASCTIME
$ function asctime() { perl -e 'print (scalar localtime($1));'; echo ''; }
$ asctime | perl -pe 's/\d/N/g; s/\w+ \w+/DDD MMM/;'
DDD MMM  N NN:NN:NN NNNN

##4 FILTER DIRECTORY NAMES
$ function filter-dirnames () { perl -pe 's/\/[^ \"]+\/([^ \/\"]+)/$1/g;'; }
$ ps | filter-dirnames
    PID TTY          TIME CMD
  21874 pts/10   00:00:00 bash
  23177 pts/10   00:00:00 ps
  23178 pts/10   00:00:00 bash
  23179 pts/10   00:00:00 perl

##5 COMMAIZE NUMBERS
$ function comma-ize-number () { perl -pe 'while (/\d\d\d\d/) { s/(\d)(\d\d\d)([^\d])/\1,\2\3/g; } '; }
$ echo '99012342305324254' | comma-ize-number
99,012,342,305,324,254

##6 APPLYING NUMERIC SUFFIXES
$ function apply-numeric-suffixes () {
$     local just_once="$1"
$     local g="g";
$     if [ "$just_once" = "1" ]; then g=""; fi
$     perl -pe '$suffixes="_KMGT";  s@\b(\d{4,15})(\s)@$pow = int(log($1)/log(1024));  $new_num=($1/1024**$pow);  $suffix=substr($suffixes, $pow, 1);  sprintf("%.3g%s%s", $new_num, $suffix, $2)@e'"$g;"
$ }
$ echo '8000000000' | apply-numeric-suffixes
7.45G

##6.1 APPLYING USAGE NUMERIC SUFFIXES
$ function apply-usage-numeric-suffixes() {
$     perl -pe 's@^(\d+)(?=\s)@$1 * 1024@e;' | apply-numeric-suffixes 1
$ }
$ echo '8000000000' | apply-usage-numeric-suffixes
$ echo '8000000' | apply-usage-numeric-suffixes 
7.45T
7.63G

#7 usage-pp
## BATSPP 2.1.X EXCEPTION ERROR AT LINE 8
$ function usage {
$     output_file=$(default_assignment "$1" "usage.list")
$     rename-with-file-date "$output_file";
$     $NICE du --block-size=1K --one-file-system 2>&1 | $NICE sort -rn | apply-usage-numeric-suffixes >| $output_file 2>&1;
$     $PAGER $output_file;
$ }
$ function usage-alt {
$     local output_file=$TEMP/$(basename $PWD)"-usage.list";
$     usage "$output_file"
$ }
$ function byte-usage () { output_file="usage.bytes.list"; backup-file $output_file; $NICE du --bytes --one-file-system 2>&1 | $NICE sort -rn | apply-usage-numeric-suffixes >| $output_file 2>&1; $PAGER $output_file; }
$ alias usage-pp='usage | apply-usage-numeric-suffixes | $PAGER'

# ERROR GENERATED - MULTIPLE
# $ ups a > psa.txt
# $ usage psa.txt
# | bash: ups: command not found
# | bash: default_assignment: command not found
# | bash: rename-with-file-date: command not found
# | bash: $output_file: ambiguous redirect
# | sort: fflush failed: 'standard output': Broken pipe
# | sort: write error

#8 number-columns(file): number each column in first line of tabular file
$ function number-columns () { head -1 "$1" | perl -0777 -pe '$c = 1; s/^/1: /; s/\t/"\t" . ++$c . ": "/eg;'; };
$ function number-columns-comma () { head -1 "$1" | perl -pe 's/,/\t/g;' | number-columns -; }

#8.1) 
$ rm -rf ./*
$ mkdir backup
$ printf "THIS IS THE START\nTHIS IS A TEST\nTHIS IS A TEST\nTHIS IS A TEST\nTHIS IS A TEST\nTHIS IS A TEST\nTHIS IS THE END\n" > thisisatest.txt
$ ps -aux > process.txt
$ number-columns thisisatest.txt
$ number-columns-comma process.txt

#9) reverse REVERSES cat COMMAND
$ alias reverse='tac'
$ cat thisisatest.txt
$ linebr
$ reverse thisisatest.txt

#10) backup-file
$ function backup-file () { local file="$1"; if [ -e "$file" ]; then dobackup.sh "$file"; fi; }

## BATSPP 2.1.X EXCEPTION ERROR AT LINE 4 (OUTPUT)
$ backup-file thisisatest.txt

$ function byte-usage () { output_file="usage.bytes.list"; backup-file $output_file; $NICE du --bytes --one-file-system 2>&1 | $NICE sort -rn | apply-usage-numeric-suffixes >| $output_file 2>&1; $PAGER $output_file; }
