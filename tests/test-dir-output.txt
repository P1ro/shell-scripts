#!/usr/bin/env bats


# Make executables ./tests/../ visible to PATH
PATH="/home/aveey/tom-project/shell-scripts/tests/../:$PATH"

# Source files
shopt -s expand_aliases
source /home/aveey/tom-project/shell-scripts/tests/test-dir-alias.ipynb || true


@test "test id406719" {
	testfolder=$(echo /tmp/test-id406719-$$)
	mkdir $testfolder && cd $testfolder
	actual=$(test-id406719-actual)
	expected=$(test-id406719-expected)
	echo "========== actual =========="
	echo "$actual" 
	echo "========= expected ========="
	echo "$expected" 
	echo "============================"
	[ "$actual" == "$expected" ]
}

function test-id406719-actual () {
	\"## (e.g., /home/aveey/bin
}

function test-id406719-expected () {
	echo -e '/tmp/test-alias/bin). \\n",\n"## In addition, avoid using personal directories to help weed out local usages\\n",\n"\\n",\n"## OLD: AVEE_BIN=/home/aveey/bin\\n",\n"# SPECIFYING AN IDENTIFIER FOR TMP\\n",\n"## OLD: TMP=temp/tmp\\n",\n"TMP=/tmp/test-dir-aliases\\n",\n"\\n",\n"## NOTE: Source it directly from the ./tests directory.\\n",\n"BIN_DIR=$PWD/..\\n",\n"## You will need to run jupyter from that directory.\\n",\n"## source $TEMP_BIN/_dir-aliases.bash\\n",\n"source _dir-aliases.bash\\n",\n"alias | wc -l"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 4,\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "8\\n"\n ]\n}\n   ],\n   "source": [\n"# Count aliases proper\\n",\n"alias | wc -l"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 5,\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "2\\n"\n ]\n}\n   ],\n   "source": [\n"# Count functions\\n",\n"typeset -f | egrep \'^\\\\w+\' | wc -l"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 6,\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "/tmp/test-dir-aliases/test-7919\\n"\n ]\n}\n   ],\n   "source": [\n"## NOTE: For reproducability, the directory name needs to be fixed\\n",\n"## In place of $$, use a psuedo random number (e,g., 7919)\\n",\n"## *** All output from one run to the next needs to be the same ***\\n",\n"\\n",\n"# Test safe symbolic links\\n",\n"## temp_dir=$TMP/test-$$\\n",\n"temp_dir=$TMP/test-7919\\n",\n"\\n",\n"mkdir -p \\"$temp_dir\\"\\n",\n"# TODO: /bin/rm -rvf \\"$temp_dir\\"\\n",\n"cd \\"$temp_dir\\"\\n",\n"pwd"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 7,\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"# Clean up temp dir\\n",\n"#\\n",\n"# NOTE: To place it safe, the directory path is reproduced here.\\n",\n"# IN addition, the output is omitted.\\n",\n"\\n",\n"## OLD: /bin/rm -rvf \\"$temp_dir\\"/*\\n",\n"/bin/rm -rvf /tmp/test-dir-aliases/test-7919/* >| /tmp/_cleanup-test-dir-aliases.log 2>&1"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 8,\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "\'link1\' -> \'file1\'\\n",\n  "ln: failed to create symbolic link \'link1\': File exists\\n",\n  "3\\n"\n ]\n}\n   ],\n   "source": [\n"# The first case succeed\\n",\n"touch file1\\n",\n"ln-symbolic file1 link1\\n",\n"# \'link1\' -> \'file1\'\\n",\n"\\n",\n"# The second case should should fail\\n",\n"ln-symbolic file1 link1\\n",\n"# => \\"ln: failed to create symbolic link \'link1\': File exists?\\"\\n",\n"\\n",\n"# Should only be four files total (along with . and ..)\\n",\n"ls -R | wc -l\\n",\n"# => 3"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 9,\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "#! /usr/bin/env bash\\n",\n  "# -*- coding: utf-8 -*-\\n",\n  "\\n",\n  "## via tomohara-aliases.bash\\n",\n  "## trace directory commands\\n",\n  "\\n",\n  "# Support for ls (list directory contents)\\n",\n  "# \\n",\n  "# ls options: # --all: all files; -l long listing; -t by time; --human-readable: uses numeric suffixes like MB; --no-group: omit file permision group; --directory: no subdirectory listings.\\n",\n  "# TODO: Add --long as alias for -l to ls source control and check-in [WTH?]! Likweise, all aliases for other common options without long names (e.g., -t).\\n",\n  "#\\n",\n  "LS=\\"/bin/ls\\"\\n",\n  "core_dir_options=\\"--all -l -t  --human-readable\\"\\n",\n  "dir_options=\\"${core_dir_options} --no-group\\"\\n",\n  "# maldito shellcheck: SC2046 [Quote this to prevent word splitting] and SC2086 [Double quote to prevent globbing]\\n",\n  "# shellcheck disable=SC2046,SC2086\\n",\n  "{\\n",\n  "if [ \\"$OSTYPE\\" = \\"solaris\\" ]; then dir_options=\\"-alt\\"; fi\\n",\n  "if [ \\"$BAREBONES_HOST\\" = \\"1\\" ]; then dir_options=\\"-altk\\"; fi\\n",\n  "function dir () {\\n",\n  "    local opts=\\"$dir_options\\"\\n",\n  "    # note: see https://stackoverflow.com/questions/1853946/getting-the-last-argument-passed-to-a-shell-script\\n",\n  "    local dir=\\"${!#}\\"\\n",\n  "    # hack: only shows directory contents if name ends in slash (e.g., /etc/)\\n",\n  "    # note: pattern is POSIX extended regular expression as per bash manual\\n",\n  "    local regex=\\"^.*/$\\";\\n",\n  "    if [[ (! (($dir != \\"\\") || ($dir =~ $regex))) ]]; then\\n",\n  "        opts=\\"$opts --directory\\";\\n",\n  "    fi\\n",\n  "    $LS ${opts} \\"$@\\" 2>&1 | $PAGER;\\n",\n  "function dir-proper () { $LS ${dir_options} --directory \\"$@\\" 2>&1 | $PAGER; }\\n",\n  "alias ls-full=\'$LS ${core_dir_options}\'\\n",\n  "function dir-full () { ls-full \\"$@\\" 2>&1 | $PAGER; }\\n",\n  "## TODO: WH with the grep (i.e., isn\'t there a simpler way)?\\n",\n  "function dir-sans-backups () { $LS ${dir_options} \\"$@\\" 2>&1 | $GREP -v \'~[0-9]*~\' | $PAGER; }\\n",\n  "# dir-ro/dir-rw(spec): show files that are read-only/read-write for the user\\n",\n  "function dir-ro () { $LS ${dir_options} \\"$@\\" 2>&1 | $GREP -v \'^..w\' | $PAGER; }\\n",\n  "function dir-rw () { $LS ${dir_options} \\"$@\\" 2>&1 | $GREP \'^..w\' | $PAGER; }\\n",\n  "\\n",\n  "function subdirs () { $LS ${dir_options} \\"$@\\" 2>&1 | $GREP ^d | $PAGER; }\\n",\n  "#\\n",\n  "# subdirs-proper(): shows subdirs in colymn format omitting ones w/ leading dots\\n",\n  "# note: omits cases like ./ and ./.cpan from find and then removes ./ prefix\\n",\n  "quiet-unalias subdirs-proper\\n",\n  "function subdirs-proper () { find . -maxdepth 1 -type d | $EGREP -v \'^((\\\\.)|(\\\\.\\\\/\\\\..*))$\' | sort | perl -pe \\"s@^\\\\./@@;\\" | column; }\\n",\n  "# note: -f option overrides -t: Unix sorts alphabetically by default\\n",\n  "# via man ls:\\n",\n  "#   -f     do not sort, enable -aU, disable -$LS --color\\n",\n  "# TODO: simplify -t removal (WTH with perl regex replacement?!)\\n",\n  "function dir_options_sans_t () { echo \\"$dir_options\\" | perl -pe \'s/\\\\-t//;\'; }\\n",\n  "function subdirs-alpha () { $LS $(dir_options_sans_t) \\"$@\\" 2>&1 | $GREP ^d | $PAGER; }\\n",\n  "function sublinks () { $LS ${dir_options} \\"$@\\" 2>&1 | $GREP ^l | $PAGER; }\\n",\n  "function sublinks-alpha () { $LS $(dir_options_sans_t) \\"$@\\" 2>&1 | $GREP ^l | $PAGER; }\\n",\n  "}\\n",\n  "# TODO: show non-work-related directory example\\n",\n  "#\\n",\n  "alias symlinks=\'sublinks\'\\n",\n  "# symlinks-proper: just show file name info for symbolic links, which starts at column 43\\n",\n  "alias symlinks-proper=\'symlinks | cut --characters=43-\'\\n",\n  "#\\n",\n  "function sublinks-proper { sublinks \\"$@\\" | cut --characters=42-  | $PAGER; }\\n",\n  "alias symlinks-proper=sublinks-proper\\n",\n  "#\\n",\n  "alias glob-links=\'find . -maxdepth 1 -type l | sed -e \\"s/.\\\\///g\\"\'\\n",\n  "alias glob-subdirs=\'find . -mindepth 1 -maxdepth 1 -type d | sed -e \\"s/.\\\\///g\\"\'\\n",\n  "#\\n",\n  "alias ls-R=\'$LS -R >| ls-R.list; wc -l ls-R.list\'\\n",\n  "#\\n",\n  "# TODO: create ls alias that shows file name with symbolic links (as with ls -l but without other information\\n",\n  "# ex: ls -l | perl -pe \'s/^.* \\\\d\\\\d:\\\\d\\\\d //;\'\\n",\n  "}\\n",\n  "\\n",\n  "# link-symbolic-safe: creates symbolic link and avoids quirks with links to directories\\n",\n  "# EX: link-symbolic-safe /tmp temp-link; link-symbolic-safe --force ~/temp temp-link; ls -l temp-link | grep /tmp => \\"\\"\\n",\n  "alias ln-symbolic=\'ln --symbolic --verbose\'\\n",\n  "alias link-symbolic-safe=\'ln-symbolic --no-target-directory --no-dereference\'\\n",\n  "alias link-symbolic-regular=\'ln-symbolic\'\\n",\n  "## TODO: alias ln-symbolic-force=\'link-symbolic --force\'\\n",\n  "\\n"\n ]\n}\n   ],\n   "source": [\n"# FYI: the current aliases and functions\\n",\n"## OLD: cat $AVEE_BIN/_dir-aliases.bash\\n",\n"cat $BIN_DIR/tests/_dir-aliases.bash\\n",\n"\\n",\n"## TODO: convert this to inline comments (to avoid clutter in the output)"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 10,\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"bash $BIN_DIR/tests/_dir-aliases.bash"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 11,\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "total 0\\n",\n  "-rw-rw-r-- file1\\n",\n  "lrwxrwxrwx link1 -> file1\\n"\n ]\n}\n   ],\n   "source": [\n"## Note: to make reproducible, only show pemrissions and the file info shown at end,\\n",\n"## omitting details like the user and time that could be different.\\n",\n"##\\n",\n"## $ cd test-7919\\n",\n"## /tmp/test-dir-aliases/test-7919\\n",\n"##\\n",\n"## $ ls -l\\n",\n"## total 0\\n",\n"## -rw-rw-r-- 1 tomohara tomohara 0 Jun 12 18:48 file1\\n",\n"## lrwxrwxrwx 1 tomohara tomohara 5 Jun 12 18:48 link1 -> file1\\n",\n"##\\n",\n"## $ echo 123456789-123456789-123456789-123456789-123456789-123456789-123456789-\\n",\n"## 123456789-123456789-123456789-123456789-123456789-123456789-123456789-\\n",\n"##\\n",\n"## # ls -l | cut --characters=12-46 --complement\\n",\n"## total 0\\n",\n"## -rw-rw-r-- file1\\n",\n"## lrwxrwxrwx link1 -> file1\\n",\n"\\n",\n"## OLD: ls -l\\n",\n"\\n",\n"ls -l | cut --characters=12-46 --complement"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 12,\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "\'temp-link\' -> \'/tmp\'\\n"\n ]\n}\n   ],\n   "source": [\n"ln-symbolic /tmp temp-link"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 13,\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "total 0\\n",\n  "-rw-rw-r-- file1\\n",\n  "lrwxrwxrwx link1 -> file1\\n",\n  "lrwxrwxrwx temp-link -> /tmp\\n"\n ]\n}\n   ],\n   "source": [\n"## OLD: ls -l\\n",\n"ls -l | cut --characters=12-46 --complement"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 14,\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "\'temp-link\' -> \'/tmp/tmp\'\\n"\n ]\n}\n   ],\n   "source": [\n"link-symbolic-safe --force /tmp/tmp temp-link"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 15,\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "total 0\\n",\n  "-rw-rw-r-- file1\\n",\n  "lrwxrwxrwx link1 -> file1\\n",\n  "lrwxrwxrwx temp-link -> /tmp/tmp\\n"\n ]\n}\n   ],\n   "source": [\n"## OLD: ls -l\\n",\n"ls -l | cut --characters=12-46 --complement"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 16,\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"alias ln-symbolic-force=\'ln-symbolic --force\'"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 17,\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "ln: failed to create symbolic link \'temp-link\': File exists\\n"\n ]\n},\n{\n "ename": "",\n "evalue": "1",\n "output_type": "error",\n "traceback": []\n}\n   ],\n   "source": [\n"ln-symbolic /tmp temp-link"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 18,\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "\'temp-link\' -> \'/tmp\'\\n"\n ]\n}\n   ],\n   "source": [\n"ln-symbolic-force /tmp temp-link"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 19,\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "\'temp-link\' -> \'/tmp/tmp\'\\n"\n ]\n}\n   ],\n   "source": [\n"link-symbolic-safe --force /tmp/tmp temp-link"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 20,\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "total 0\\n",\n  "-rw-rw-r-- file1\\n",\n  "lrwxrwxrwx link1 -> file1\\n",\n  "lrwxrwxrwx temp-link -> /tmp/tmp\\n"\n ]\n}\n   ],\n   "source": [\n"## OLD: ls -l\\n",\n"ls -l | cut --characters=12-46 --complement"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "metadata": {},\n   "outputs": [],\n   "source": []\n  }\n ],\n "metadata": {\n  "kernelspec": {\n   "display_name": "Bash",\n   "language": "bash",\n   "name": "bash"\n  },\n  "language_info": {\n   "codemirror_mode": "shell",\n   "file_extension": ".sh",\n   "mimetype": "text/x-sh",\n   "name": "bash"\n  }\n },\n "nbformat": 4,\n "nbformat_minor": 5\n}'
}
