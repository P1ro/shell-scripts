#!/usr/bin/env bats


# Make executables ./tests/../ visible to PATH
PATH="/home/aveey/tom-project/shell-scripts/tests/../:$PATH"

# Source files
shopt -s expand_aliases


@test "test id520268" {
	testfolder=$(echo /tmp/test-id520268-$$)
	mkdir $testfolder && cd $testfolder
	actual=$(test-id520268-actual)
	expected=$(test-id520268-expected)
	echo "========== actual =========="
	echo "$actual" 
	echo "========= expected ========="
	echo "$expected" 
	echo "============================"
	[ "$actual" == "$expected" ]
}

function test-id520268-actual () {
	\"  bar
}

function test-id520268-expected () {
	echo -e '\\"1234567890000000000000000\\",\\n",\n"  foo => \\"HI MOM!\\"\\n",\n"}\\n"\n     ]\n    }\n   ],\n   "source": [\n    "## EXAMPLES FOR TEST 1 - FROM https://metacpan.org/dist/JSON-PP/view/bin/json_pp\\n",\n    "perl -e\'print q|{\\"foo\\":\\"HI MOM!\\",\\"bar\\":1234567890000000000000000}|\' | pp-json -f json -t dumper"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 9,\n   "id": "6315c095",\n   "metadata": {},\n   "outputs": [\n    {\n     "name": "stdout",\n     "output_type": "stream",\n     "text": [\n"{\\n",\n"  bar => bless( {\\n",\n"    sign => \\"+\\",\\n",\n"    value => bless( [\\n",\n"      0,\\n",\n"      890000000,\\n",\n"      1234567\\n",\n"    ], \'Math::BigInt::Calc\' )\\n",\n"  }, \'Math::BigInt\' ),\\n",\n"  foo => \\"\\\\x{3042}\\\\x{3044}\\"\\n",\n"}\\n"\n     ]\n    }\n   ],\n   "source": [\n    "# json-pp WORKS SAME AS pp-json\\n",\n    "perl -e\'print q|{\\"foo\\":\\"あい\\",\\"bar\\":1234567890000000000000000}|\' | json-pp -f json -t dumper -json_opt pretty,utf8,allow_bignum"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 10,\n   "id": "241a51ce",\n   "metadata": {},\n   "outputs": [\n    {\n     "name": "stdout",\n     "output_type": "stream",\n     "text": [\n"{\\n",\n"  bar => \\"1234567890000000000000000\\",\\n",\n"  foo => \\"\\\\x{3042}\\\\x{3044}\\"\\n",\n"}\\n"\n     ]\n    }\n   ],\n   "source": [\n    "# note: canonical sorts the keys of hashes (utf8 avoids warning and pretty might be the default\\n",\n    "perl -e\'print q|{\\"foo\\":\\"あい\\",\\"bar\\":1234567890000000000000000}|\' | pp-json-sorted -f json -t dumper"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 11,\n   "id": "cfe8a603",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "## TEST 2 - TEXT MANIPULATION\\n",\n    "\\n",\n    "function asc-it () { dobackup.sh \\"$1\\"; asc < BACKUP/\\"$1\\" >| \\"$1\\"; }\\n",\n    "# TODO: use dos2unix under CygWin\\n",\n    "alias remove-cr=\'tr -d \\"\\\\r\\"\'\\n",\n    "alias perl-slurp=\'perl -0777\'\\n",\n    "alias alt-remove-cr=\'perl-slurp -pe \\"s/\\\\r//g;\\"\'\\n",\n    "function remove-cr-and-backup () { dobackup.sh \\"$1\\"; remove-cr < backup/\\"$1\\" >| \\"$1\\"; }\\n",\n    "alias perl-remove-cr=\'perl -i.bak -pn -e \\"s/\\\\r//;\\"\'\\n",\n    "\\n",\n    "# Text manipulation\\n",\n    "alias \'intersection=intersection.perl\'\\n",\n    "alias \'difference=intersection.perl -diff\'\\n",\n    "alias \'line-intersection=intersection.perl -line\'\\n",\n    "alias \'line-difference=intersection.perl -diff -line\'\\n",\n    "function show-line () { tail --lines=+\\"$1\\" \\"$2\\" | head -1; }\\n",\n    "#\\n",\n    "# last-n-with-header(num, file): create sub-file with last NUM lines plus header from FILE\\n",\n    "function last-n-with-header () { head --lines=1 \\"$2\\"; tail --lines=\\"$1\\" \\"$2\\"; }"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 12,\n   "id": "9d58fd69",\n   "metadata": {},\n   "outputs": [\n    {\n     "name": "stdout",\n     "output_type": "stream",\n     "text": [\n"Hi Mom, \\r",\n"I am using Ubuntu\\n"\n     ]\n    }\n   ],\n   "source": [\n    "# THIS IS THE DEFAULT PRINT STATEMENT WITH /r (RETURN)\\n",\n    "printf \\"Hi Mom, \\\\rI am using Ubuntu\\\\n\\""\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 13,\n   "id": "210771c7",\n   "metadata": {},\n   "outputs": [\n    {\n     "name": "stdout",\n     "output_type": "stream",\n     "text": [\n"Hi Mom, I am using Ubuntu\\n"\n     ]\n    }\n   ],\n   "source": [\n    "# remove-cr REMOVES RETURNS (or /r)\\n",\n    "printf \\"Hi Mom,\\\\r I am using Ubuntu\\\\n\\" | remove-cr"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 14,\n   "id": "a0354fe5",\n   "metadata": {},\n   "outputs": [\n    {\n     "name": "stdout",\n     "output_type": "stream",\n     "text": [\n"Hi Mom, I am using Ubuntu\\n"\n     ]\n    }\n   ],\n   "source": [\n    "# alt-remove-cr IS AN ALTERNATIVE OF remove-cr\\n",\n    "printf \\"Hi Mom,\\\\r I am using Ubuntu\\\\n\\" | alt-remove-cr"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 15,\n   "id": "fd9d885a",\n   "metadata": {},\n   "outputs": [\n    {\n     "name": "stdout",\n     "output_type": "stream",\n     "text": [\n"-i used with no filenames on the command line, reading from STDIN.\\n",\n"Hi Mom, I am using Ubuntu\\n"\n     ]\n    }\n   ],\n   "source": [\n    "# perl-remove-cr ACTS AS remove-cr USING PERL\\n",\n    "printf \\"Hi Mom,\\\\r I am using Ubuntu\\\\n\\" | perl-remove-cr"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 16,\n   "id": "45f553e4",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n    "printf \\"Hi Mom,\\\\nThs is the use of printf\\\\nI can use a backslash n to start a new line.n1\\\\n2\\\\n3\\"> abc-test.txt\\n",\n    "#last-n-with-header(5, abc-test.txt)"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "7d150141",\n   "metadata": {},\n   "outputs": [],\n   "source": []\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "52bcf0ad",\n   "metadata": {},\n   "outputs": [],\n   "source": []\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "15f76833",\n   "metadata": {},\n   "outputs": [],\n   "source": []\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "9c3a48d4",\n   "metadata": {},\n   "outputs": [],\n   "source": []\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "857249a7",\n   "metadata": {},\n   "outputs": [],\n   "source": []\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "8057964c",\n   "metadata": {},\n   "outputs": [],\n   "source": []\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "b55efa29",\n   "metadata": {},\n   "outputs": [],\n   "source": []\n  }\n ],\n "metadata": {\n  "kernelspec": {\n   "display_name": "Bash",\n   "language": "bash",\n   "name": "bash"\n  },\n  "language_info": {\n   "codemirror_mode": "shell",\n   "file_extension": ".sh",\n   "mimetype": "text/x-sh",\n   "name": "bash"\n  }\n },\n "nbformat": 4,\n "nbformat_minor": 5\n}'
}
