# Setup
$ bind 'set enable-bracketed-paste off'
$ shopt -s expand_aliases

## TEST:  Make sure simple prompt used (e.g., no escapes that might contaminate output)
## PS1="$ "
## TODO: PS1="> "
## NOTE: The Jupyter bash kernel requires that PS1 not be modified as they customize it. 
$ echo $PS1
[PEXP\[\]ECT_PROMPT>

# Delete all aliases and function
# TODO: Instead start from pristine environment
$ unalias -a
$ alias | wc -l
$ for f in $(typeset -f | egrep '^\w+'); do unset -f $f; done
$ typeset -f | egrep '^\w+' | wc -l
0
0

# Setting a temp directory for tests
$ TMP=/tmp/test-extensionless
## NOTE: Source it directly from the ./tests directory.
$ BIN_DIR=$PWD/..
$ alias | wc -l
0

## NOTE: For reproducability, the directory name needs to be fixed
## In place of $$, use a psuedo random number (e,g., 3573)
## *** All output from one run to the next needs to be the same ***
## temp_dir=$TMP/test-$$
$ temp_dir=$TMP/test-3573
$ mkdir -p "$temp_dir"
# TODO: /bin/rm -rvf "$temp_dir"
$ cd "$temp_dir"
$ pwd
#ALIAS FOR PRINTING SEPERATION LINES (FOR JUPYTER)
$ alias linebr="printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -"
/tmp/test-extensionless/test-3573

# Count aliases proper
$ alias | wc -l
# Count functions
$ typeset -f | egrep '^\w+' | wc -l
1
0

## TESTS 1 - EXTENSIONLESS SHORTCUTS PT. 1
#perl- gives problems rn (tbf) 
$ alias perl-=""
$ GREP='grep'
# TODO: generate aliases for .sh and .perl scripts automatically
# ls *.sh *.perl | perl -pe "s/(\w+)\.\w+/alias \1='$&'/g; s/(\w+.perl)/perl- \1/g;" >| _all_alias.list
$ alias convert-termstrings='perl- convert_termstrings.perl'
$ alias do-rcsdiff='do_rcsdiff.sh'
$ alias dobackup='dobackup.sh'
$ alias kill-em='kill_em.sh'
$ alias kill-it='kill-em --pattern'

# # 1.1) NO EXAMPLES RN FOR kill-em and kill-it
# kill-em
# linebr
# kill-it
# # 1.2) TEST STOPS
# $ kill-em --pattern kcalc
# | pattern=/kcalc/
# | filter=/($)(^)/
# | OSTYPE: Undefined variable.

## 1.2) ERROR GENERATED - SCRIPT MISSING
# $ convert-termstrings
# | Can't open perl script "convert_termstrings.perl": No such file or directory

$ rm -rf ./*
$ printf "TOP\nTHIS IS A TEST\nBOTTOM" > test.txt
$ dobackup test.txt
$ linebr
$ ls
Backing up 'test.txt' to './backup/test.txt'
--------------------------------------------------------------------------------
backup	test.txt

## 1.3) do_rcsdiff
# $ do-rcsdiff Makefile
# | foreach: No match.

## BAD: alias ps-mine-='ps-mine "$@" | filter-dirnames'
$ function ps-mine- { ps-mine "$@" | filter-dirnames; }
$ alias ps_mine='ps-mine'
## DUP: alias ps-mine-='ps-mine "$@" | filter-dirnames'
$ alias ps-mine-all='ps-mine --all'

## ERROR - ps-mine COMMAND NOT FOUND
# ps_mine

$ alias rename-files='perl- rename_files.perl'
$ alias rename_files='rename-files'
$ alias testwn='perl- testwn.perl'
$ alias perlgrep='perl- perlgrep.perl'
$ alias foreach='perl- foreach.perl'
# rename-spaces: replace spaces in filenames of current dir with underscores
$ alias rename-spaces='rename-files -q global " " "_"'
$ alias rename-quotes='rename-files -q -global "'"'"'" ""'   # where "'"'"'" is concatenated double quote, single quote, and double quote
$ alias rename-special-punct='rename-files -q -global -regex "[&\!\*?\(\)]" ""'
## TODO:
## alias rename-spaces='rename-files -rename_old -q -global " " "_"'
## alias rename-quotes='rename-files -rename_old -q -global "'"'"'" ""'   # where "'"'"'" is concatenated dou## OLD: alias rename-special-punct='rename-files -q -global -regex "[&\!\*?]" ""'

$ rm -rf ./*
$ touch abc.xyz def.xyz ooo.ppp
$ touch 'abc nounderscore.txt' abcdef\\.txt
$ ls
'abcdef\.txt'  'abc nounderscore.txt'   abc.xyz   def.xyz   ooo.ppp

#SINGLE FILE RENAME
$ rename_files -q ooo.ppp ooo.qqq
$ ls 
$ linebr
#EXTENSION RENAME 
$ rename_files -f .xyz .harry ./*
$ ls
$ linebr
#SPACES RENAME TO UNDERSCORES (need help)
$ rename-spaces -f
$ ls
$ linebr
#REMOVE SPECIAL CHARACTERS FROM FILENAME (need help)
$ rename-quotes -f 'abc nounderscore.txt'
$ ls
renaming "ooo.ppp" to "ooo.qqq"
'abcdef\.txt'  'abc nounderscore.txt'   abc.xyz   def.xyz   ooo.qqq
--------------------------------------------------------------------------------
renaming "./abc.xyz" to "./abc.harry"
renaming "./def.xyz" to "./def.harry"
'abcdef\.txt'   abc.harry  'abc nounderscore.txt'   def.harry   ooo.qqq
--------------------------------------------------------------------------------
WARNING: Ignoring -quick mode as files specified
'abcdef\.txt'   abc.harry  'abc nounderscore.txt'   def.harry   ooo.qqq
--------------------------------------------------------------------------------
WARNING: Ignoring -quick mode as files specified
'abcdef\.txt'   abc.harry  'abc nounderscore.txt'   def.harry   ooo.qqq

## TODO:
#alias rename-spaces='rename-files -rename_old -q -global " " "_"'
#alias rename-quotes='rename-files -rename_old -q -global "'"'"'" ""'   # where "'"'"'" is concatenated dou## OLD: alias rename-special-punct='rename-files -q -global -regex "[&\!\*?]" ""'
#alias rename-special-punct='rename-files -rename_old -q -global -regex "[&\!\*?\(\)]" ""'
# move-duplicates: move duplicate produced via Firefox downloads
# ex: move "05-158-a-20 (1).pdf duplicates
$ alias move-duplicates='mkdir -p duplicates; move *\([0-9]\).* duplicates 2>&1 | $GREP -iv cannot.stat.*..No.such'
# TODO: rename existing files with file date (instead of blocking rename)
$ alias rename-parens='rename-files -global -regex "[\(\)]" "" *[\(\)]*'
$ alias rename-etc='rename-spaces; rename-quotes; rename-special-punct; move-duplicates'
## TODO: alias rename-parens='rename-files -rename_old -global -regex "[\(\)]" "" *[\(\)]*'
# move "versioned" log files into ./log-file subdirectory
#    *** files end in .log[0-9]+ or .log and have numeric affix (e.g., do-xyz.log2, do-xyz.2.log, or do-xyz-30may21.log)

$ rm -rf ./*
# CREATING DUPLICATES 
$ touch 'abc(1).111' 'abc(2).111' 'xyz(3).111' 'xyz(4).111' '*abc.xyz' '&*abcdefg.xyz'
$ ls
'abc(1).111'  '&*abcdefg.xyz'  'xyz(3).111'
'abc(2).111'  '*abc.xyz'       'xyz(4).111'

# REMOVES PARENTHESES () FROM FILENAMES
$ rename-parens
$ linebr
$ rename-special-punct
# rename-etc DOESN'T WORK WELL (move COMMAND NOT FOUND)
$ linebr
$ ls
renaming "abc(1).111" to "abc1.111"
renaming "abc(2).111" to "abc2.111"
renaming "xyz(3).111" to "xyz3.111"
renaming "xyz(4).111" to "xyz4.111"
--------------------------------------------------------------------------------
renaming "&*abcdefg.xyz" to "abcdefg.xyz"
renaming "*abc.xyz" to "abc.xyz"
--------------------------------------------------------------------------------
abc1.111  abc2.111  abcdefg.xyz  abc.xyz  xyz3.111  xyz4.111

# move-log-files: move "versioned" log files to log-files
# move-output-files: likewise for output files with version numbers to ./output
#THESE ARE THE CUSTOM CHANGES MADE TO THE FILE
$ alias perl-grep='perl $BIN_DIR/perlgrep.perl'
$ alias dir-rw='dir -rw'
$ alias move='mv'
# note: versioned files are those ending in numerics or with numeric affix
## TODO: use perl-style regex for more precise matching (effing over-arching glob's)
$ function move-versioned-files {
$     local ext_pattern="$1"
$     if [ "$ext_pattern" = "" ]; then ext_pattern="{list,log,txt}"; fi
$     local dir="$2"
$     if [ "$dir" = "" ]; then dir="versioned-files"; fi
$     mkdir -p "$dir";
$     ## OLD: local D="[.]"
$     local D="[-.]"
$     # TODO: fix problem leading to hangup (verification piped to 2>&1)
$     # Notes: eval needed for $ext_pattern resolution
$     # - excludes read-only files (e.g., ls -l => "-r--r--r--   1 tomohara   11K Nov  2 16:30 _master-note-info.list.log")
$     # EXs:              fu.log2                fu.2.log                  fu.log.14aug21    fu.14aug21.log
$     local file_list="$TEMP/_move-versioned-files-$$.list"
$     ## TODO: dir-rw $(eval echo *$D$ext_pattern[0-9]*  *$D*[0-9]*$D$ext_pattern  *$D$ext_pattern$D*[0-9][0-9]*  *$D*[0-9][0-9]*$D$ext_pattern) 2>| "$file_list.log" | perl -pe 's/(\S+\s+){6}\S+//;' >| "$file_list"
$     ## xargs -I "{}" $MV "{}" "$dir" < "$file_list"
$     ## OLD: move  $(eval dir-rw *$D$ext_pattern[0-9]*  *$D*[0-9]*$D$ext_pattern  *$D$ext_pattern$D*[0-9][0-9]*   *$D*[0-9][0-9]*$D$ext_pattern  2>&1 | perl-grep -v 'No such file' | perl -pe 's/(\S+\s+){6}\S+//;') "$dir"
$     move  $(eval dir-rw *$D$ext_pattern[0-9]*  *$D*[0-9]*$D$ext_pattern  *$D$ext_pattern$D*[0-9][0-9]*   *$D*[0-9][0-9]*$D$ext_pattern  2>&1 | perl-grep -v 'No such file' | perl -pe 's/(\S+\s+){6}\S+//;' | sort -u) "$dir"
$ }
$ alias move-log-files='move-versioned-files "{log,debug}" "log-files"'
# note: * the version regex should be kept quite specific to avoid useful files being moved into ./output
$ alias move-output-files='move-versioned-files "{csv,html,json,list,out,output,png,report,tsv,xml}" "output-files"'
$ alias move-adhoc-files='move-log-files; move-output-files'

# # SIMULATING THE CREATION OF LOG FILES AND OUTPUT FILES (need help)
# rm -rf ./*
# touch 'file1.log' 'file2.log' 'file3.debug' 'output1.html' 'output2.xml' 'output3.csv'
# move-log-files
# linebr
# move-output-files
# # OUTPUT
# mv: cannot stat 'dir:': No such file or directory
# mv: cannot stat 'invalid': No such file or directory
# mv: cannot stat 'line': No such file or directory
# mv: cannot stat 'width:': No such file or directory
# mv: cannot stat '‘*[-.]log[0-9]*’': No such file or directory
# --------------------------------------------------------------------------------
# mv: cannot stat 'dir:': No such file or directory
# mv: cannot stat 'invalid': No such file or directory
# mv: cannot stat 'line': No such file or directory
# mv: cannot stat 'width:': No such file or directory
# mv: cannot stat '‘*[-.]csv[0-9]*’': No such file or directory

# rename-with-file-date(file, ...): rename each file(s) with .ddMmmYY suffix
# Notes: 1. If file.ddMmmYY exists, file.ddMmmYY.N tried (for N in 1, 2, ...).
# 2. No warning is issued if the file doesn't exist, so can be used as a no-op.
# TODO: have option to put suffix before extension
# MISSING FUNCTION: get-free-filename
$ function get-free-filename() {
$     local base="$1"
$     local sep="$2"
$     local L=1
$     local filename="$base"
$     ## DEBUG: local -p
$     while [ -e "$filename" ]; do
$         let L++
$         filename="$base$sep$L"
$     done;
$     ## DEBUG: local -p
$     echo "$filename"
$ }
$ function rename-with-file-date() {
$     ## DEBUG: set -o xtrace
$     local f new_f
$     local move_command="move"
$     if [ "$1" = "--copy" ]; then
$         ## TODO: move_command="copy"
$         move_command="command cp --interactive --verbose --preserve"
$         shift
$     fi
$     for f in "$@"; do
$         ## DEBUG: echo "f=$f"
$         if [ -e "$f" ]; then
$            new_f=$(get-free-filename "$f".$(date --reference="$f" '+%d%b%y') ".")
$            ## DEBUG: echo
$            eval "$move_command" "$f" "$new_f";
$         fi
$     done;
$     ## DEBUG: set - -o xtrace
$ }
## OLD: alias copy-with-file-date='rename-with-file-date --copy'
## HACK: See if function required for proper handling by bats-core
$ function copy-with-file-date { rename-with-file-date --copy "$@"; }

# ADDING DATES TO THE EXTENSION
$ rm -rf ./*
$ touch abc1.xyz abc2.xyz abc3.xyz abc4.xyz abc5.xyz.19Aug22 abc6.xyz.19Aug22
$ ls
$ linebr
$ copy-with-file-date *.xyz 
$ linebr
$ ls
abc1.xyz  abc2.xyz  abc3.xyz  abc4.xyz	abc5.xyz.19Aug22  abc6.xyz.19Aug22
--------------------------------------------------------------------------------
'abc1.xyz' -> 'abc1.xyz.15Sep22'
'abc2.xyz' -> 'abc2.xyz.15Sep22'
'abc3.xyz' -> 'abc3.xyz.15Sep22'
'abc4.xyz' -> 'abc4.xyz.15Sep22'
--------------------------------------------------------------------------------
abc1.xyz	  abc2.xyz.15Sep22  abc4.xyz	      abc6.xyz.19Aug22
abc1.xyz.15Sep22  abc3.xyz	    abc4.xyz.15Sep22
abc2.xyz	  abc3.xyz.15Sep22  abc5.xyz.19Aug22

# Statistical helpers
$ alias bigrams='perl -sw $BIN_DIR/count_bigrams.perl -N=2'
$ alias unigrams='perl -sw $BIN_DIR/count_bigrams.perl -N=1'
$ alias word-count=unigrams

$ rm -rf ./*
$ uname -r > catmanual.txt
$ bigrams catmanual.txt
$ ls
$ word-count catmanual.txt
$ ls
n/a:n/a	1
catmanual.txt
n/a	1
catmanual.txt

# Lynx stuff
# lynx-dump-stdout(option, ...): Run lynx with textual output to stdout
# lynx-dump(file, [[out-file], option, ...]): Run lynx over base.html with output to base.txt
$ lynx-dump-stdout () { lynx -width=512 -dump "$@"; }
$ lynx-dump () { 
$     local in_file="$1"
$     shift 1
$     local base=$(basename "$file" .html)
$     #    
$     if [[ ("$out_file" = "" ) && (! "$1" =~ -*) ]]; then
$         local out_file="$1"
$     fi
$     #
$     if [ "$out_file" = "" ]; then out_file="$base.txt"; fi
$     #
$     lynx-dump-stdout "$@" "$file" > "$out_file" 2> "$out_file.log"
$     if [ -s "$out_file.log" ]; then
$         cat "$out_file.log"
$         delete-force "$out_file.log"
$     fi
$ }
$ if [ "$BAREBONES_HOST" = "1" ]; then export lynx_width=0; fi
$ alias lynx-html='lynx -force_html'

$ lynx-dump-stdout
     [ [1]About Lynx-Dev | [2]Lynx-Dev Archives ]

About Lynx

   Lynx is a fully-featured World Wide Web (WWW) browser for users on Unix, VMS, and other platforms running cursor-addressable, character-cell terminals or emulators. That includes vt100 terminals, other character-cell displays, and vt100 emulators such as Kermit or Procomm running on PCs or Macs.

   For information on how to use Lynx see the [3]Lynx User's Guide, or the [4]Lynx help files.

Credits and Copyright

   Lynx was a product of the Distributed Computing Group within Academic Computing Services of [5]The University of Kansas.

   Lynx was originally developed by [6]Lou Montulli, [7]Michael Grobe, and [8]Charles Rezac. [9]Garrett Blythe created [10]DosLynx and later joined the Lynx effort as well. Following the departures of Lou and Garrett for positions at Netscape in the summer of 1994, Craig Lavender provided support services for Lynx, and Ravikumar Kolli for DosLynx.

   Lynx is maintained and supported by members of the Internet community coordinated via the [11]lynx-dev mailing list.

   Lynx is derived from material copyrighted by the University of Kansas. However most of the release (and corresponding copyright) is the work of developers on the [12]lynx-dev mailing list. It is distributed without restrictions on usage or redistribution under the GNU General Public License (Version 2).

   Lynx was built over an early version of the Common Code Library developed by the CERN WWW Project. That code is copyrighted by CERN. Lynx contains other sections of code that are copyrighted by other institutions or individuals. The Lynx copyright does not override or invalidate those copyrights.

   Thanks to [13]Tim Berners-Lee and the other [14]CERN World Wide Web wizards for the WWW client library code and all of their other work on the WWW project, NCSA and the [15]Mosaic developers, and to everyone out in netland who has contributed to Lynx's development either directly (through comments or bug reports) or indirectly (through inspiration and development of other systems).

   Also, special thanks go to Foteos Macrides who ported much of Lynx to VMS and did much of its development following Lou Montulli's and Garrett Blythe's departures from the University of Kansas, and to Earl Fogel of the University of Saskatchewan. Earl implemented the hypertext engine HYPERREZ in the Unix environment. HYPERREZ was developed by Niel Larson of Think.com and served as the model for the early versions of Lynx which did not use the WWW libraries and had their own hypertext format.

Availability

   Information on obtaining the most current version of Lynx is available via the [16]Lynx homepage.

Mailing List

   We have a mailing list for Lynx development discussion. If you are interested in joining the list, follow this [17]link. There also are links to [18]archives in html format for this mailing list.

References

   1. file:///usr/share/doc/lynx/lynx_help/lynx-dev.html.gz
   2. http://mail.gnu.org/mailman/listinfo/lynx-dev/
   3. file:///usr/share/doc/lynx/lynx_help/Lynx_users_guide.html.gz
   4. file:///usr/share/doc/lynx/lynx_help/lynx_help_main.html.gz
   5. http://web.archive.org/web/19971210163627/http://www.cc.ukans.edu/
   6. http://web.archive.org/web/20040309105337/http://www.cc.ukans.edu/cwis/people/Lou.Montulli.html
   7. http://condor.cc.ku.edu/~grobe/
   8. http://web.archive.org/web/20040412210202/http://www.cc.ukans.edu/cwis/people/Charles.Rezac.html
   9. http://web.archive.org/web/20040412210651/http://www.cc.ukans.edu/cwis/people/Garrett/Garrett_Arch_Blythe.html
  10. http://web.archive.org/web/20040812204015/http://www.cc.ukans.edu/about_doslynx/doslynx.html
  11. file:///usr/share/doc/lynx/lynx_help/about_lynx.html.gz#lynx-dev_list
  12. file:///usr/share/doc/lynx/lynx_help/about_lynx.html.gz#lynx-dev_list
  13. http://www.w3.org/People/Berners-Lee/
  14. http://www.w3.org/People.html
  15. http://archive.ncsa.uiuc.edu/SDG/Software/Mosaic/NCSAMosaicHome.html
  16. https://lynx.invisible-island.net/
  17. file:///usr/share/doc/lynx/lynx_help/lynx-dev.html.gz
  18. http://mail.gnu.org/mailman/listinfo/lynx-dev/

#lynx-html (is a continuously running program)
$ printf "https://www.google.com/" > lynxin.txt
# lynx-dump lynxin.txt (need help)

# CSH-like aliases
#
$ function setenv () { export $1="$2"; }
$ alias unsetenv='unset'
$ alias unexport='unset'

$ setenv MY_USERNAME aveey-temp
$ echo $MY_USERNAME
$ linebr
$ unexport MY_USERNAME
$ echo $MY_USERNAME
aveey-temp
--------------------------------------------------------------------------------


# Unicode support
#
# TODO: put show-unicode-code-info-aux into script (as with other overly-large function definitions like hg-pull-and-update)
# show-unicode-control-chars(): output Unicode codepoint (ordinal) and UTF-8 encoding for input chars with offset in line
$ function show-unicode-code-info-aux() { perl -CIOE   -e 'use Encode "encode_utf8"; print "char\tord\toffset\tencoding\n";'    -ne 'chomp;  printf "%s: %d\n", $_, length($_); foreach $c (split(//, $_)) { $encoding = encode_utf8($c); printf "%s\t%04X\t%d\t%s\n", $c, ord($c), $offset, unpack("H*", $encoding); $offset += length($encoding); }   $offset += length($/); print "\n"; ' < "$1"; }
$ function show-unicode-code-info { show-unicode-code-info-aux "$@"; }
$ function show-unicode-code-info-stdin() { in_file="$TEMP/show-unicode-code-info.$$"; cat >| $in_file;  show-unicode-code-info-aux $in_file; }
#
$ function output-BOM { perl -e 'print "\xEF\xBB\xBF\n";'; }
#
# show-unicode-control-chars(): Convert ascii control characters to printable Unicode ones (e.g., ␀ for 0x00)
## BAD: function show-unicode-control-chars { perl -pe 'use Encode "decode_utf8"; s/[\x00-\x1F]/chr($&+0x2400)/e;'; }
# See https://stackoverflow.com/questions/42193957/errorwide-character-in-print-at-x-at-line-35-fh-read-text-files-from-comm.
## BAD: function show-unicode-control-chars { perl -pe 'use open ":std", ":encoding(UTF-8)"; s/[\x00-\x1F]/chr($& + 0x2400)/eg;'; }
$ function show-unicode-control-chars { perl -pe 'use open ":std", ":encoding(UTF-8)"; s/[\x00-\x1F]/chr(ord($&) + 0x2400)/eg;'; }

# ## UNICODE ALIASES (need help for implementation)
# show-unicode-code-info-aux
# show-unicode-code-info
# show-unicode-code-info-stdin
# output-BOM
# show-unicode-control-chars

$ show-unicode-code-info-aux ./catmanual.txt
char	ord	offset	encoding
5.15.0-47-generic: 17
5	0035	0	35
.	002E	1	2e
1	0031	2	31
5	0035	3	35
.	002E	4	2e
0	0030	5	30
-	002D	6	2d
4	0034	7	34
7	0037	8	37
-	002D	9	2d
g	0067	10	67
e	0065	11	65
n	006E	12	6e
e	0065	13	65
r	0072	14	72
i	0069	15	69
c	0063	16	63


$ show-unicode-code-info ./catmanual.txt
char	ord	offset	encoding
5.15.0-47-generic: 17
5	0035	0	35
.	002E	1	2e
1	0031	2	31
5	0035	3	35
.	002E	4	2e
0	0030	5	30
-	002D	6	2d
4	0034	7	34
7	0037	8	37
-	002D	9	2d
g	0067	10	67
e	0065	11	65
n	006E	12	6e
e	0065	13	65
r	0072	14	72
i	0069	15	69
c	0063	16	63


# # ERROR GENERATED (shown below)
# $ show-unicode-code-info-stdin ./catmanual.txt
# | bash: /show-unicode-code-info.5292: Permission denied
# | bash: /show-unicode-code-info.5292: No such file or directory

# ERROR GENERATED (non-ending process; need help)
# $ show-unicode-control-chars ./catmanual.txt

## NO OUTPUT GENERATED
$ output-BOM ./catmanual.txt
﻿
