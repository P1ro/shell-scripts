## SETUP (OPTIONAL - USE IF REQUIRED)
## Bracketed Paste is disabled to prevent characters after output
## Example: 
## $ echo 'Hii'
## | Hi?2004l
# bind 'set enable-bracketed-paste off'

## TESTS START FROM LINE 2066 (tomohara-aliases.bash)

## TEST:  Make sure simple prompt used (e.g., no escapes that might contaminate output)
## PS1="$ "
## TODO: PS1="> "
## NOTE: The Jupyter bash kernel requires that PS1 not be modified as they customize it. 
$ echo $PS1
[PEXP\[\]ECT_PROMPT>

# Delete all aliases and function
# TODO: Instead start from pristine environment
$ unalias -a
$ alias | wc -l
$ for f in $(typeset -f | egrep '^\w+'); do unset -f $f; done
$ typeset -f | egrep '^\w+' | wc -l
0
0

# Setting a temp directory for tests
$ TMP=/tmp/test-unix
## NOTE: Source it directly from the ./tests directory.
$ BIN_DIR=$PWD/..
$ alias | wc -l
0

## NOTE: For reproducability, the directory name needs to be fixed
## In place of $$, use a psuedo random number (e,g., 3245)
## *** All output from one run to the next needs to be the same ***
## temp_dir=$TMP/test-$$
$ temp_dir=$TMP/test-3245
$ mkdir -p "$temp_dir"
# TODO: /bin/rm -rvf "$temp_dir"
$ cd "$temp_dir"
$ pwd
#ALIAS FOR PRINTING SEPERATION LINES (FOR JUPYTER)
$ alias linebr="printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -"
/tmp/test-unix/test-3245

# Count aliases proper
$ alias | wc -l
# Count functions
$ typeset -f | egrep '^\w+' | wc -l
1
0

$ alias testnum="sed -r "s/[0-9]/X/g"" 
$ alias testuser="sed -r "s/"$USER"+/user/g""

# SOURCING
$ source $BIN_DIR/tomohara-aliases.bash

$ ps-all | wc -l | testnum
XXX

# SORTS ALL PROCESS BY TIME
# Hidden: USER, TTY, STAT, COMMAND
$ ps-sort-time | head -n 10 | testnum | awk '!($1=$7=$8=$11="")'
 PID %CPU %MEM VSZ RSS   START TIME 
 XXXX XX.X XX.X XXXXXXX XXXXXX   XX:XX X:XX 
 XXXX XX.X X.X XXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXX XXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXXX XXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXX XXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXX XXXXX   XX:XX X:XX 

# ACTS THE SAME AS ps-sort-time
$ ps-time | head -n 10  | testnum | awk '!($1=$7=$8=$11="")'
 PID %CPU %MEM VSZ RSS   START TIME 
 XXXX XX.X XX.X XXXXXXX XXXXXX   XX:XX X:XX 
 XXXX XX.X X.X XXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXX XXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXXX XXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXX XXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXX XXXXX   XX:XX X:XX 

# SORTS ALL PROCESS BY MEMORY
$ ps-sort-mem | head -n 10  | testnum | awk '!($1=$7=$8=$11="")' 
 PID %CPU %MEM VSZ RSS   START TIME 
 XXXX XX.X XX.X XXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXXX XXXXXX   XX:XX X:XX 
 XXXX XX.X X.X XXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXXX XXXXXX   XX:XX X:XX 

# ps-mem IS AN ALTERNATIVE OF ps-sort-mem
$ ps-mem | head -n 10  | testnum | awk '!($1=$7=$8=$11="")'
 PID %CPU %MEM VSZ RSS   START TIME 
 XXXX XX.X XX.X XXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXXX XXXXXX   XX:XX X:XX 
 XXXX XX.X X.X XXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXXX XXXXXX   XX:XX X:XX 
 XXXX X.X X.X XXXXXXXX XXXXXX   XX:XX X:XX 

# ERROR GENERATED FOR ps-script [OLD]
# $ ps-script
# | bash: -v: command not found
# | bash: -i: command not found
# | OSTYPE: Undefined variable.
$ ps-script
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND

$ ps al | egrep "(PID|$$)" | head -n 10 | testnum | awk '!($1="")'
$ linebr
# get-process-parent : return parent process-id for PID
$ get-process-parent | testnum
 UID PID PPID PRI NI VSZ RSS WCHAN STAT TTY TIME COMMAND
 XXXX XXXX XXXX XX X XXXXX XXXX do_wai Ss pts/X X:XX /usr/bi
 XXXX XXXX XXXX XX X XXXXX XXXX - R+ pts/X X:XX ps al
 XXXX XXXX XXXX XX X XXXXX XXXX pipe_r S+ pts/X X:XX grep -E
 XXXX XXXX XXXX XX X XXXXX XXXX pipe_r S+ pts/X X:XX head -n
 XXXX XXXX XXXX XX X XXXXX XXXX pipe_r S+ pts/X X:XX sed -r
 XXXX XXXX XXXX XX X XXXXX XXXX pipe_r S+ pts/X X:XX awk !($
--------------------------------------------------------------------------------
XXXX

# # ERROR (To be identified)
# $ script-update
# | cat: /home/xaea12/temp/tmp/_set_xterm_title.5848.full.list: No such file or directory
# | cat: /home/xaea12/temp/tmp/_set_xterm_title.5848.icon.list: No such file or directory
# | cat: /home/xaea12/temp/tmp/_set_xterm_title.5848.full.list: No such file or directory
# | cat: /home/xaea12/temp/tmp/_set_xterm_title.5848.icon.list: No such file or directory
# | ]1;script:5848 test-3245 [/tmp/test-unix/test-3245]]2;script:5848 test-3245 [/tmp/test-unix/test-3245]]1;script:5848 test-3245 [/tmp/test-unix/test-3245]]2;script:5848 test-3245 [/tmp/test-unix/test-3245]Script started, output log file is '_update-06dec22.log'.

## EXAMPLE FOR ansi-filter (a brief example required)
$ rm -rf ./* > /dev/null
$ echo "How to use the ansi-filter? " > ansi-filter-test.txt
$ ansi-filter *.txt
How to use the ansi-filter? 

## pause-for-enter: EXITS AFTER PRESSING ENTER, WITH A MESSAGE
## DOESN'T WORK FOR JUPYTER, WORKS FOR TERMINAL
# $ pause-for-enter
# | Press enter to continue 
## (program terminates after pressing Enter Key)
