#!/usr/bin/env bats


# Make executables ./tests/../ visible to PATH
PATH="/home/aveey/tom-project/shell-scripts/tests/../:$PATH"

# Source files
shopt -s expand_aliases


@test "test id890623" {
	testfolder=$(echo /tmp/test-id890623-$$)
	mkdir $testfolder && cd $testfolder
	actual=$(test-id890623-actual)
	expected=$(test-id890623-expected)
	echo "========== actual =========="
	echo "$actual" 
	echo "========= expected ========="
	echo "$expected" 
	echo "============================"
	[ "$actual" == "$expected" ]
}

function test-id890623-actual () {
	\"# EX: mezcla-devel; which system.py | grep -i Mezcla-main
}

function test-id890623-expected () {
	echo -e '\\"\\"\\n",\n"# note: mezcla-devel should be stable version of mezcla-tom\\n",\n"## OLD: alias mezcla-devel=\'add-python-path $HOME/programs/python/mezcla-tom/mezcla\'\\n",\n"alias mezcla-devel=\'add-python-path $HOME/python/Mezcla/mezcla\'\\n",\n"alias mezcla-main=\'add-python-path $HOME/python/Mezcla-main/mezcla\'\\n",\n"alias mezcla-tom=\'add-python-path $HOME/python/Mezcla-tom/mezcla\'\\n",\n"# Add mezcla-devel unless another version in path\\n",\n"if [[ ! \\"$PATH\\" =~ mezcla ]]; then\\n",\n"    ## OLD: mezcla-devel\\n",\n"    ## TODO: echo \\"Warning: mezcla not in PATH\\"\\n",\n"    true\\n",\n"fi"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 22,\n   "id": "9117cb3e",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"## FUNCTIONS REQUIRED FOR SMOOTH RUNNING OF THE TESTS\\n",\n"function ps-all () { \\n",\n"    local pattern=\\"$1\\";\\n",\n"    local pager=cat;\\n",\n"    if [ \\"$pattern\\" = \\"\\" ]; then \\n",\n"        pattern=\\".\\"; \\n",\n"        pager=$PAGER\\n",\n"    fi;\\n",\n"    ps_mine.sh --all | $EGREP -i \\"((^USER)|($pattern))\\" | $pager;\\n",\n"    }\\n",\n"# Path settings\\n",\n"# TODO: define a function for removing duplicates from the PATH while\\n",\n"# preserving the order\\n",\n"function show-path-dir () { (echo \\"${1}:\\"; printenv \\"$1\\" | perl -pe \\"s/:/\\\\n/g;\\") | $PAGER; }\\n",\n"alias show-path=\'show-path-dir PATH\'\\n",\n"# append-path(path): appends PATH to environment variable unless already there\\n",\n"## TODO: function in-path { local path=$(tr \\":\\" \\"\\\\n\\" | $GREP \\"^$1$$\\"); return ($path != \\"\\"); }\\n",\n"# TODO: add force argument to ensure last (or first)\\n",\n"function append-path () { if [[ ! (($PATH =~ ^$1:) || ($PATH =~ :$1:) || ($PATH =~ :$1$)) ]]; then export PATH=\\"${PATH}:$1\\"; fi }\\n",\n"function prepend-path () { if [[ ! (($PATH =~ ^$1:) || ($PATH =~ :$1:) || ($PATH =~ :$1$)) ]]; then export PATH=\\"$1:${PATH}\\"; fi }\\n",\n"# TODO: rework append-/prepend-path and python variants via generic helper\\n",\n"function append-python-path () { export PYTHONPATH=${PYTHONPATH}:\\"$1\\"; }\\n",\n"function prepend-python-path () { export PYTHONPATH=\\"$1\\":${PYTHONPATH}; }\\n",\n" "\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 28,\n   "id": "7ec729df",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"# add-python-path $temp_dir\\n",\n"add-python-path $temp_dir"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 29,\n   "id": "d37be781",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"alias ps-python-full=\'ps-all python\'\\n",\n"# note: excludes ipython and known system-related python scripts\\n",\n"alias ps-python=\'ps-python-full | $EGREP -iv \\"(screenlet|ipython|egrep|update-manager|software-properties|networkd-dispatcher)\\"\'\\n",\n"alias show-python-path=\'show-path-dir PYTHONPATH\'"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 30,\n   "id": "000a2cc1",\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "error: process ID list syntax error\\n",\n  "\\n",\n  "Usage:\\n",\n  " ps [options]\\n",\n  "\\n",\n  " Try \'ps --help <simple|list|output|threads|misc|all>\'\\n",\n  "  or \'ps --help <s|l|o|t|m|a>\'\\n",\n  " for additional help text.\\n",\n  "\\n",\n  "For more details see ps(1).\\n"\n ]\n},\n{\n "ename": "",\n "evalue": "1",\n "output_type": "error",\n "traceback": []\n}\n   ],\n   "source": [\n"## ERROR 1 - process ID list syntax error\\n",\n"\\n",\n"# $ ps-python-full\\n",\n"# | error: process ID list syntax error\\n",\n"# | \\n",\n"# | Usage:\\n",\n"# |  ps [options]\\n",\n"# | \\n",\n"# |  Try \'ps --help <simple|list|output|threads|misc|all>\'\\n",\n"# |   or \'ps --help <s|l|o|t|m|a>\'\\n",\n"# |  for additional help text.\\n",\n"# | \\n",\n"# | For more details see ps(1).\\n"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 33,\n   "id": "81224e9f",\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "bash: $: command not found\\n",\n  "bash: syntax error near unexpected token `}\'\\n",\n  "bash: syntax error near unexpected token `|\'\\n",\n  "bash: syntax error near unexpected token `|\'\\n",\n  "bash: syntax error near unexpected token `|\'\\n",\n  "bash: syntax error near unexpected token `|\'\\n",\n  "bash: syntax error near unexpected token `|\'\\n",\n  "bash: Try: command not found\\n",\n  "bash: or: command not found\\n",\n  "bash: syntax error near unexpected token `help\'\\n",\n  "bash: syntax error near unexpected token `(\'\\n"\n ]\n},\n{\n "ename": "",\n "evalue": "2",\n "output_type": "error",\n "traceback": []\n}\n   ],\n   "source": [\n"## ERROR 2 - bash : command not found and process ID list syntax error\\n",\n"# $ ps-python\\n",\n"# | bash: -iv: command not found\\n",\n"# | error: process ID list syntax error\\n",\n"# | \\n",\n"# | Usage:\\n",\n"# |  ps [options]\\n",\n"# | \\n",\n"# |  Try \'ps --help <simple|list|output|threads|misc|all>\'\\n",\n"# |   or \'ps --help <s|l|o|t|m|a>\'\\n",\n"# |  for additional help text.\\n",\n"# | \\n",\n"# | For more details see ps(1).\\n"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 32,\n   "id": "6c5b8d28",\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "PYTHONPATH:\\n",\n  "/tmp/test-py-commands\\n",\n  "/tmp/test-py-commands\\n",\n  "/tmp/test-py-commands\\n",\n  "/tmp/test-py-commands\\n",\n  "/home/aveey/python\\n",\n  "\\n"\n ]\n}\n   ],\n   "source": [\n"## show-python-path DISPLAYS ALL THE AVAILABLE PATHS OF PYTHON\\n",\n"show-python-path"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 34,\n   "id": "e09f0a5c",\n   "metadata": {},\n   "outputs": [],\n   "source": [\n"# Python-lint filtering\\n",\n"# python-lint-full(filename): complete output from pylint, with caret-based\\n",\n"# context indicators retained by substiting carriage return for newline.\\n",\n"# python-lint-work(filename): pylint with moderate filtering\\n",\n"# python-lint(filename): pylint with usual filtering\\n",\n"# TODO: specify exclusion types in pylint command line (e.g., invalid-name)\\n",\n"# example: \\"C:674, 0: Invalid constant name \\"term_freq\\" (invalid-name)\\"\\n",\n"# example: \\"run_ner.py:413:0: C0330: Wrong continued indentation (add 8 spaces).\\n",\n"#                   \'B-DATE\', \'I-DATE\', \'B-DOCTOR\', \'I-DOCTOR\', \'B-LOCATION\', \'I-LOCATION\', \'B-AGE\', \'I-AGE\',\\n",\n"#                   ^       | (bad-continuation)\\n",\n"# TODO: make Mercurial root-to-python-path hack optional\\n",\n"# TODO: add similar aliases for pep8 and pyflakes\\n",\n"# TODO: handle continutations of statements without indentation:\\n",\n"#   ner_eval/ner_detokenize.py:11:45: C0326: Exactly one space required after comma\\n",\n"#   parser.add_argument(\'--output_file\', type=str,  help=\'\')\\n",\n"#                                      ^ (bad-whitespace)\\n",\n"\\n",\n"function python-lint-full() { \\n",\n"    local root=$(hg root 2> /dev/null);\\n",\n"    ## TODO: --persistent=n (to avoid caching)\\n",\n"    PYTHONPATH=\\"$root:.:$PYTHONPATH\\" $NICE pylint \\"$@\\" | perl -00 -ne \'while (/(\\\\n\\\\S+:\\\\s*\\\\d+[^\\\\n]+)\\\\n( +)/) { s/(\\\\n\\\\S+:\\\\s*\\\\d+[^\\\\n]+)\\\\n( +)/$1\\\\r$2/mg; } print(\\"$_\\");\' 2>&1 | $PAGER;\\n",\n"}"\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": 36,\n   "id": "644b54ae",\n   "metadata": {},\n   "outputs": [\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "usage: pylint [options]\\n",\n  "\\n",\n  "options:\\n",\n  "  -h, --help            show this help message and exit\\n",\n  "\\n",\n  "Commands:\\n",\n  "  Options which are actually commands. Options in this group are mutually exclusive.\\n",\n  "\\n",\n  "  --rcfile RCFILE       Specify a configuration file to load.\\n",\n  "  --output OUTPUT       Specify an output file.\\n",\n  "  --help-msg HELP_MSG [HELP_MSG ...]\\n",\n  "                        Display a help message for the given message id and\\n",\n  "                        exit. The value may be a comma separated list of\\n",\n  "                        message ids.\\n",\n  "  --list-msgs           Display a list of all pylint\'s messages divided by\\n",\n  "                        whether they are emittable with the given interpreter.\\n",\n  "  --list-msgs-enabled   Display a list of what messages are enabled, disabled\\n",\n  "                        and non-emittable with the given configuration.\\n",\n  "  --list-groups         List pylint\'s message groups.\\n",\n  "  --list-conf-levels    Generate pylint\'s confidence levels.\\n",\n  "  --list-extensions     List available extensions.\\n",\n  "  --full-documentation  Generate pylint\'s full documentation.\\n",\n  "  --generate-rcfile     Generate a sample configuration file according to the\\n",\n  "                        current configuration. You can put other options\\n",\n  "                        before this one to get them in the generated\\n",\n  "                        configuration.\\n",\n  "  --generate-toml-config\\n",\n  "                        Generate a sample configuration file according to the\\n",\n  "                        current configuration. You can put other options\\n",\n  "                        before this one to get them in the generated\\n",\n  "                        configuration. The config is in the .toml format.\\n",\n  "  --long-help           Show more verbose help.\\n",\n  "\\n",\n  "Main:\\n",\n  "  --init-hook INIT_HOOK\\n",\n  "                        Python code to execute, usually for sys.path\\n",\n  "                        manipulation such as pygtk.require().\\n",\n  "  --errors-only, -E     In error mode, messages with a category besides ERROR\\n",\n  "                        or FATAL are suppressed, and no reports are done by\\n",\n  "                        default. Error mode is compatible with disabling\\n",\n  "                        specific errors.\\n",\n  "  --verbose , -v        In verbose mode, extra non-checker-related info will\\n",\n  "                        be displayed.\\n",\n  "  --enable-all-extensions \\n",\n  "                        Load and enable all available extensions. Use --list-\\n",\n  "                        extensions to see a list all available extensions.\\n",\n  "  --ignore <file>[,<file>...]\\n",\n  "                        Files or directories to be skipped. They should be\\n",\n  "                        base names, not paths. (default: (\'CVS\',))\\n",\n  "  --ignore-patterns <pattern>[,<pattern>...]\\n",\n  "                        Files or directories matching the regex patterns are\\n",\n  "                        skipped. The regex matches against base names, not\\n",\n  "                        paths. The default value ignores Emacs file locks\\n",\n  "                        (default: (re.compile(\'^\\\\\\\\.#\'),))\\n",\n  "  --ignore-paths <pattern>[,<pattern>...]\\n",\n  "                        Add files or directories matching the regex patterns\\n",\n  "                        to the ignore-list. The regex matches against paths\\n",\n  "                        and can be in Posix or Windows format. (default: [])\\n",\n  "  --persistent <y or n>\\n",\n  "                        Pickle collected data for later comparisons. (default:\\n",\n  "                        True)\\n",\n  "  --load-plugins <modules>\\n",\n  "                        List of plugins (as comma separated values of python\\n",\n  "                        module names) to load, usually to register additional\\n",\n  "                        checkers. (default: ())\\n",\n  "  --fail-under <score>  Specify a score threshold to be exceeded before\\n",\n  "                        program exits with error. (default: 10)\\n",\n  "  --fail-on <msg ids>   Return non-zero exit code if any of these\\n",\n  "                        messages/categories are detected, even if score is\\n",\n  "                        above --fail-under value. Syntax same as enable.\\n",\n  "                        Messages specified are enabled, while categories only\\n",\n  "                        check already-enabled messages. (default: )\\n",\n  "  --jobs <n-processes>, -j <n-processes>\\n",\n  "                        Use multiple processes to speed up Pylint. Specifying\\n",\n  "                        0 will auto-detect the number of processors available\\n",\n  "                        to use, and will cap the count on Windows to avoid\\n",\n  "                        hangs. (default: 1)\\n",\n  "  --limit-inference-results <number-of-results>\\n",\n  "                        Control the amount of potential inferred values when\\n",\n  "                        inferring a single object. This can help the\\n",\n  "                        performance when dealing with large functions or\\n",\n  "                        complex, nested conditions. (default: 100)\\n",\n  "  --extension-pkg-allow-list <pkg[,pkg]>\\n",\n  "                        A comma-separated list of package or module names from\\n",\n  "                        where C extensions may be loaded. Extensions are\\n",\n  "                        loading into the active Python interpreter and may run\\n",\n  "                        arbitrary code. (default: [])\\n",\n  "  --extension-pkg-whitelist <pkg[,pkg]>\\n",\n  "                        A comma-separated list of package or module names from\\n",\n  "                        where C extensions may be loaded. Extensions are\\n",\n  "                        loading into the active Python interpreter and may run\\n",\n  "                        arbitrary code. (This is an alternative name to\\n",\n  "                        extension-pkg-allow-list for backward compatibility.)\\n",\n  "                        (default: [])\\n",\n  "  --suggestion-mode <y or n>\\n",\n  "                        When enabled, pylint would attempt to guess common\\n",\n  "                        misconfiguration and emit user-friendly hints instead\\n",\n  "                        of false-positive error messages. (default: True)\\n",\n  "  --exit-zero           Always return a 0 (non-error) status code, even if\\n",\n  "                        lint errors are found. This is primarily useful in\\n",\n  "                        continuous integration scripts. (default: False)\\n",\n  "  --from-stdin          Interpret the stdin as a python script, whose filename\\n",\n  "                        needs to be passed as the module_or_package argument.\\n",\n  "                        (default: False)\\n",\n  "  --recursive <yn>      Discover python modules and packages in the file\\n",\n  "                        system subtree. (default: False)\\n",\n  "  --py-version <py_version>\\n",\n  "                        Minimum Python version to use for version dependent\\n",\n  "                        checks. Will default to the version used to run\\n",\n  "                        pylint. (default: (3, 10))\\n",\n  "  --ignored-modules <module names>\\n",\n  "                        List of module names for which member attributes\\n",\n  "                        should not be checked (useful for modules/projects\\n",\n  "                        where namespaces are manipulated during runtime and\\n",\n  "                        thus existing member attributes cannot be deduced by\\n",\n  "                        static analysis). It supports qualified module names,\\n",\n  "                        as well as Unix pattern matching. (default: ())\\n",\n  "  --analyse-fallback-blocks <y or n>\\n",\n  "                        Analyse import fallback blocks. This can be used to\\n",\n  "                        support both Python 2 and 3 compatible code, which\\n",\n  "                        means that the block might have code that exists only\\n",\n  "                        in one or another interpreter, leading to false\\n",\n  "                        positives when analysed. (default: False)\\n",\n  "\\n",\n  "Reports:\\n",\n  "  Options related to output formatting and reporting\\n",\n  "\\n",\n  "  --output-format <format>, -f <format>\\n",\n  "                        Set the output format. Available formats are text,\\n",\n  "                        parseable, colorized, json and msvs (visual studio).\\n",\n  "                        You can also give a reporter class, e.g.\\n",\n  "                        mypackage.mymodule.MyReporterClass.\\n",\n  "  --reports <y or n>, -r <y or n>\\n",\n  "                        Tells whether to display a full report or only the\\n",\n  "                        messages. (default: False)\\n",\n  "  --evaluation <python_expression>\\n",\n  "                        Python expression which should return a score less\\n",\n  "                        than or equal to 10. You have access to the variables\\n",\n  "                        \'fatal\', \'error\', \'warning\', \'refactor\', \'convention\',\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "                        and \'info\' which contain the number of messages in\\n",\n  "                        each category, as well as \'statement\' which is the\\n",\n  "                        total number of statements analyzed. This score is\\n",\n  "                        used by the global evaluation report (RP0004).\\n",\n  "                        (default: max(0, 0 if fatal else 10.0 - ((float(5 *\\n",\n  "                        error + warning + refactor + convention) / statement)\\n",\n  "                        * 10)))\\n",\n  "  --score <y or n>, -s <y or n>\\n",\n  "                        Activate the evaluation score. (default: True)\\n",\n  "  --msg-template <template>\\n",\n  "                        Template used to display messages. This is a python\\n",\n  "                        new-style format string used to format the message\\n",\n  "                        information. See doc for all details. (default: )\\n",\n  "\\n",\n  "Messages control:\\n",\n  "  Options controlling analysis messages\\n",\n  "\\n",\n  "  --confidence <levels>\\n",\n  "                        Only show warnings with the listed confidence levels.\\n",\n  "                        Leave empty to show all. Valid levels: HIGH,\\n",\n  "                        CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE, UNDEFINED.\\n",\n  "                        (default: [\'HIGH\', \'CONTROL_FLOW\', \'INFERENCE\',\\n",\n  "                        \'INFERENCE_FAILURE\', \'UNDEFINED\'])\\n",\n  "  --enable <msg ids>, -e <msg ids>\\n",\n  "                        Enable the message, report, category or checker with\\n",\n  "                        the given id(s). You can either give multiple\\n",\n  "                        identifier separated by comma (,) or put this option\\n",\n  "                        multiple time (only on the command line, not in the\\n",\n  "                        configuration file where it should appear only once).\\n",\n  "                        See also the \\"--disable\\" option for examples.\\n",\n  "  --disable <msg ids>, -d <msg ids>\\n",\n  "                        Disable the message, report, category or checker with\\n",\n  "                        the given id(s). You can either give multiple\\n",\n  "                        identifiers separated by comma (,) or put this option\\n",\n  "                        multiple times (only on the command line, not in the\\n",\n  "                        configuration file where it should appear only once).\\n",\n  "                        You can also use \\"--disable=all\\" to disable everything\\n",\n  "                        first and then re-enable specific checks. For example,\\n",\n  "                        if you want to run only the similarities checker, you\\n",\n  "                        can use \\"--disable=all --enable=similarities\\". If you\\n",\n  "                        want to run only the classes checker, but have no\\n",\n  "                        Warning level messages displayed, use \\"--disable=all\\n",\n  "                        --enable=classes --disable=W\\".\\n",\n  "\\n",\n  "Variables:\\n",\n  "  BaseChecker for variables.\\n",\n  "\\n",\n  "  --init-import <y or n>\\n",\n  "                        Tells whether we should check for unused import in\\n",\n  "                        __init__ files. (default: False)\\n",\n  "  --dummy-variables-rgx <regexp>\\n",\n  "                        A regular expression matching the name of dummy\\n",\n  "                        variables (i.e. expected to not be used). (default: _+\\n",\n  "                        $|(_[a-zA-Z0-9_]*[a-zA-Z0-\\n",\n  "                        9]+?$)|dummy|^ignored_|^unused_)\\n",\n  "  --additional-builtins <comma separated list>\\n",\n  "                        List of additional names supposed to be defined in\\n",\n  "                        builtins. Remember that you should avoid defining new\\n",\n  "                        builtins when possible. (default: ())\\n",\n  "  --callbacks <callbacks>\\n",\n  "                        List of strings which can identify a callback function\\n",\n  "                        by name. A callback name must start or end with one of\\n",\n  "                        those strings. (default: (\'cb_\', \'_cb\'))\\n",\n  "  --redefining-builtins-modules <comma separated list>\\n",\n  "                        List of qualified module names which can have objects\\n",\n  "                        that can redefine builtins. (default: (\'six.moves\',\\n",\n  "                        \'past.builtins\', \'future.builtins\', \'builtins\', \'io\'))\\n",\n  "  --ignored-argument-names <regexp>\\n",\n  "                        Argument names that match this expression will be\\n",\n  "                        ignored. Default to name with leading underscore.\\n",\n  "                        (default: re.compile(\'_.*|^ignored_|^unused_\'))\\n",\n  "  --allow-global-unused-variables <y or n>\\n",\n  "                        Tells whether unused global variables should be\\n",\n  "                        treated as a violation. (default: True)\\n",\n  "  --allowed-redefined-builtins <comma separated list>\\n",\n  "                        List of names allowed to shadow builtins (default: ())\\n",\n  "\\n",\n  "Typecheck:\\n",\n  "  Try to find bugs in the code using type inference.\\n",\n  "\\n",\n  "  --ignore-on-opaque-inference <y or n>\\n",\n  "                        This flag controls whether pylint should warn about\\n",\n  "                        no-member and similar checks whenever an opaque object\\n",\n  "                        is returned when inferring. The inference can return\\n",\n  "                        multiple potential results while evaluating a Python\\n",\n  "                        object, but some branches might not be evaluated,\\n",\n  "                        which results in partial inference. In that case, it\\n",\n  "                        might be useful to still emit no-member and other\\n",\n  "                        checks for the rest of the inferred objects. (default:\\n",\n  "                        True)\\n",\n  "  --mixin-class-rgx <regexp>\\n",\n  "                        Regex pattern to define which classes are considered\\n",\n  "                        mixins. (default: .*[Mm]ixin)\\n",\n  "  --ignore-mixin-members <y or n>\\n",\n  "                        Tells whether missing members accessed in mixin class\\n",\n  "                        should be ignored. A class is considered mixin if its\\n",\n  "                        name matches the mixin-class-rgx option. (default:\\n",\n  "                        True)\\n",\n  "  --ignored-checks-for-mixins <list of messages names>\\n",\n  "                        List of symbolic message names to ignore for Mixin\\n",\n  "                        members. (default: [\'no-member\', \'not-async-context-\\n",\n  "                        manager\', \'not-context-manager\', \'attribute-defined-\\n",\n  "                        outside-init\'])\\n",\n  "  --ignore-none <y or n>\\n",\n  "                        Tells whether to warn about missing members when the\\n",\n  "                        owner of the attribute is inferred to be None.\\n",\n  "                        (default: True)\\n",\n  "  --ignored-classes <members names>\\n",\n  "                        List of class names for which member attributes should\\n",\n  "                        not be checked (useful for classes with dynamically\\n",\n  "                        set attributes). This supports the use of qualified\\n",\n  "                        names. (default: (\'optparse.Values\', \'thread._local\',\\n",\n  "                        \'_thread._local\', \'argparse.Namespace\'))\\n",\n  "  --generated-members <members names>\\n",\n  "                        List of members which are set dynamically and missed\\n",\n  "                        by pylint inference system, and so shouldn\'t trigger\\n",\n  "                        E1101 when accessed. Python regular expressions are\\n",\n  "                        accepted. (default: ())\\n",\n  "  --contextmanager-decorators <decorator names>\\n",\n  "                        List of decorators that produce context managers, such\\n",\n  "                        as contextlib.contextmanager. Add to this list to\\n",\n  "                        register other decorators that produce valid context\\n",\n  "                        managers. (default: [\'contextlib.contextmanager\'])\\n",\n  "  --missing-member-hint-distance <member hint edit distance>\\n",\n  "                        The minimum edit distance a name should have in order\\n",\n  "                        to be considered a similar match for a missing member\\n",\n  "                        name. (default: 1)\\n",\n  "  --missing-member-max-choices <member hint max choices>\\n",\n  "                        The total number of similar names that should be taken\\n",\n  "                        in consideration when showing a hint for a missing\\n",\n  "                        member. (default: 1)\\n",\n  "  --missing-member-hint <missing member hint>\\n",\n  "                        Show a hint with possible names when a member name was\\n",\n  "                        not found. The aspect of finding the hint is based on\\n",\n  "                        edit distance. (default: True)\\n",\n  "  --signature-mutators <decorator names>\\n",\n  "                        List of decorators that change the signature of a\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "                        decorated function. (default: [])\\n",\n  "\\n",\n  "Refactoring:\\n",\n  "  Looks for code which can be refactored.\\n",\n  "\\n",\n  "  --max-nested-blocks <int>\\n",\n  "                        Maximum number of nested blocks for function / method\\n",\n  "                        body (default: 5)\\n",\n  "  --never-returning-functions <members names>\\n",\n  "                        Complete name of functions that never returns. When\\n",\n  "                        checking for inconsistent-return-statements if a never\\n",\n  "                        returning function is called then it will be\\n",\n  "                        considered as an explicit return statement and no\\n",\n  "                        message will be printed. (default: (\'sys.exit\',\\n",\n  "                        \'argparse.parse_error\'))\\n",\n  "\\n",\n  "Basic:\\n",\n  "  --good-names <names>  Good variable names which should always be accepted,\\n",\n  "                        separated by a comma. (default: (\'i\', \'j\', \'k\', \'ex\',\\n",\n  "                        \'Run\', \'_\'))\\n",\n  "  --good-names-rgxs <names>\\n",\n  "                        Good variable names regexes, separated by a comma. If\\n",\n  "                        names match any regex, they will always be accepted\\n",\n  "                        (default: )\\n",\n  "  --bad-names <names>   Bad variable names which should always be refused,\\n",\n  "                        separated by a comma. (default: (\'foo\', \'bar\', \'baz\',\\n",\n  "                        \'toto\', \'tutu\', \'tata\'))\\n",\n  "  --bad-names-rgxs <names>\\n",\n  "                        Bad variable names regexes, separated by a comma. If\\n",\n  "                        names match any regex, they will always be refused\\n",\n  "                        (default: )\\n",\n  "  --name-group <name1:name2>\\n",\n  "                        Colon-delimited sets of names that determine each\\n",\n  "                        other\'s naming style when the name regexes allow\\n",\n  "                        several styles. (default: ())\\n",\n  "  --include-naming-hint <y or n>\\n",\n  "                        Include a hint for the correct naming format with\\n",\n  "                        invalid-name. (default: False)\\n",\n  "  --property-classes <decorator names>\\n",\n  "                        List of decorators that produce properties, such as\\n",\n  "                        abc.abstractproperty. Add to this list to register\\n",\n  "                        other decorators that produce valid properties. These\\n",\n  "                        decorators are taken in consideration only for\\n",\n  "                        invalid-name. (default: (\'abc.abstractproperty\',))\\n",\n  "  --argument-naming-style <style>\\n",\n  "                        Naming style matching correct argument names.\\n",\n  "                        (default: snake_case)\\n",\n  "  --argument-rgx <regexp>\\n",\n  "                        Regular expression matching correct argument names.\\n",\n  "                        Overrides argument-naming-style. If left empty,\\n",\n  "                        argument names will be checked with the set naming\\n",\n  "                        style. (default: None)\\n",\n  "  --attr-naming-style <style>\\n",\n  "                        Naming style matching correct attribute names.\\n",\n  "                        (default: snake_case)\\n",\n  "  --attr-rgx <regexp>   Regular expression matching correct attribute names.\\n",\n  "                        Overrides attr-naming-style. If left empty, attribute\\n",\n  "                        names will be checked with the set naming style.\\n",\n  "                        (default: None)\\n",\n  "  --class-naming-style <style>\\n",\n  "                        Naming style matching correct class names. (default:\\n",\n  "                        PascalCase)\\n",\n  "  --class-rgx <regexp>  Regular expression matching correct class names.\\n",\n  "                        Overrides class-naming-style. If left empty, class\\n",\n  "                        names will be checked with the set naming style.\\n",\n  "                        (default: None)\\n",\n  "  --class-attribute-naming-style <style>\\n",\n  "                        Naming style matching correct class attribute names.\\n",\n  "                        (default: any)\\n",\n  "  --class-attribute-rgx <regexp>\\n",\n  "                        Regular expression matching correct class attribute\\n",\n  "                        names. Overrides class-attribute-naming-style. If left\\n",\n  "                        empty, class attribute names will be checked with the\\n",\n  "                        set naming style. (default: None)\\n",\n  "  --class-const-naming-style <style>\\n",\n  "                        Naming style matching correct class constant names.\\n",\n  "                        (default: UPPER_CASE)\\n",\n  "  --class-const-rgx <regexp>\\n",\n  "                        Regular expression matching correct class constant\\n",\n  "                        names. Overrides class-const-naming-style. If left\\n",\n  "                        empty, class constant names will be checked with the\\n",\n  "                        set naming style. (default: None)\\n",\n  "  --const-naming-style <style>\\n",\n  "                        Naming style matching correct constant names.\\n",\n  "                        (default: UPPER_CASE)\\n",\n  "  --const-rgx <regexp>  Regular expression matching correct constant names.\\n",\n  "                        Overrides const-naming-style. If left empty, constant\\n",\n  "                        names will be checked with the set naming style.\\n",\n  "                        (default: None)\\n",\n  "  --function-naming-style <style>\\n",\n  "                        Naming style matching correct function names.\\n",\n  "                        (default: snake_case)\\n",\n  "  --function-rgx <regexp>\\n",\n  "                        Regular expression matching correct function names.\\n",\n  "                        Overrides function-naming-style. If left empty,\\n",\n  "                        function names will be checked with the set naming\\n",\n  "                        style. (default: None)\\n",\n  "  --inlinevar-naming-style <style>\\n",\n  "                        Naming style matching correct inline iteration names.\\n",\n  "                        (default: any)\\n",\n  "  --inlinevar-rgx <regexp>\\n",\n  "                        Regular expression matching correct inline iteration\\n",\n  "                        names. Overrides inlinevar-naming-style. If left\\n",\n  "                        empty, inline iteration names will be checked with the\\n",\n  "                        set naming style. (default: None)\\n",\n  "  --method-naming-style <style>\\n",\n  "                        Naming style matching correct method names. (default:\\n",\n  "                        snake_case)\\n",\n  "  --method-rgx <regexp>\\n",\n  "                        Regular expression matching correct method names.\\n",\n  "                        Overrides method-naming-style. If left empty, method\\n",\n  "                        names will be checked with the set naming style.\\n",\n  "                        (default: None)\\n",\n  "  --module-naming-style <style>\\n",\n  "                        Naming style matching correct module names. (default:\\n",\n  "                        snake_case)\\n",\n  "  --module-rgx <regexp>\\n",\n  "                        Regular expression matching correct module names.\\n",\n  "                        Overrides module-naming-style. If left empty, module\\n",\n  "                        names will be checked with the set naming style.\\n",\n  "                        (default: None)\\n",\n  "  --typevar-rgx <regexp>\\n",\n  "                        Regular expression matching correct type variable\\n",\n  "                        names. If left empty, type variable names will be\\n",\n  "                        checked with the set naming style. (default: None)\\n",\n  "  --variable-naming-style <style>\\n",\n  "                        Naming style matching correct variable names.\\n",\n  "                        (default: snake_case)\\n",\n  "  --variable-rgx <regexp>\\n",\n  "                        Regular expression matching correct variable names.\\n",\n  "                        Overrides variable-naming-style. If left empty,\\n",\n  "                        variable names will be checked with the set naming\\n",\n  "                        style. (default: None)\\n",\n  "  --no-docstring-rgx <regexp>\\n",\n  "                        Regular expression which should only match function or\\n",\n  "                        class names that do not require a docstring. (default:\\n",\n  "                        re.compile(\'^_\'))\\n",\n  "  --docstring-min-length <int>\\n",\n  "                        Minimum line length for functions/classes that require\\n",\n  "                        docstrings, shorter ones are exempt. (default: -1)\\n",\n  "\\n",\n  "Miscellaneous:\\n",\n  "  BaseChecker for encoding issues.\\n",\n  "\\n",\n  "  --notes <comma separated values>\\n",\n  "                        List of note tags to take in consideration, separated\\n",\n  "                        by a comma. (default: (\'FIXME\', \'XXX\', \'TODO\'))\\n",\n  "  --notes-rgx <regexp>  Regular expression of note tags to take in\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "                        consideration. (default: )\\n",\n  "\\n",\n  "Imports:\\n",\n  "  BaseChecker for import statements.\\n",\n  "\\n",\n  "  --deprecated-modules <modules>\\n",\n  "                        Deprecated modules which should not be used, separated\\n",\n  "                        by a comma. (default: ())\\n",\n  "  --preferred-modules <module:preferred-module>\\n",\n  "                        Couples of modules and preferred modules, separated by\\n",\n  "                        a comma. (default: ())\\n",\n  "  --import-graph <file.gv>\\n",\n  "                        Output a graph (.gv or any supported image format) of\\n",\n  "                        all (i.e. internal and external) dependencies to the\\n",\n  "                        given file (report RP0402 must not be disabled).\\n",\n  "                        (default: )\\n",\n  "  --ext-import-graph <file.gv>\\n",\n  "                        Output a graph (.gv or any supported image format) of\\n",\n  "                        external dependencies to the given file (report RP0402\\n",\n  "                        must not be disabled). (default: )\\n",\n  "  --int-import-graph <file.gv>\\n",\n  "                        Output a graph (.gv or any supported image format) of\\n",\n  "                        internal dependencies to the given file (report RP0402\\n",\n  "                        must not be disabled). (default: )\\n",\n  "  --known-standard-library <modules>\\n",\n  "                        Force import order to recognize a module as part of\\n",\n  "                        the standard compatibility libraries. (default: ())\\n",\n  "  --known-third-party <modules>\\n",\n  "                        Force import order to recognize a module as part of a\\n",\n  "                        third party library. (default: (\'enchant\',))\\n",\n  "  --allow-any-import-level <modules>\\n",\n  "                        List of modules that can be imported at any level, not\\n",\n  "                        just the top level one. (default: ())\\n",\n  "  --allow-wildcard-with-all <y or n>\\n",\n  "                        Allow wildcard imports from modules that define\\n",\n  "                        __all__. (default: False)\\n",\n  "\\n",\n  "Classes:\\n",\n  "  Checker for class nodes.\\n",\n  "\\n",\n  "  --defining-attr-methods <method names>\\n",\n  "                        List of method names used to declare (i.e. assign)\\n",\n  "                        instance attributes. (default: (\'__init__\', \'__new__\',\\n",\n  "                        \'setUp\', \'__post_init__\'))\\n",\n  "  --valid-classmethod-first-arg <argument names>\\n",\n  "                        List of valid names for the first argument in a class\\n",\n  "                        method. (default: (\'cls\',))\\n",\n  "  --valid-metaclass-classmethod-first-arg <argument names>\\n",\n  "                        List of valid names for the first argument in a\\n",\n  "                        metaclass class method. (default: (\'cls\',))\\n",\n  "  --exclude-protected <protected access exclusions>\\n",\n  "                        List of member names, which should be excluded from\\n",\n  "                        the protected access warning. (default: (\'_asdict\',\\n",\n  "                        \'_fields\', \'_replace\', \'_source\', \'_make\'))\\n",\n  "  --check-protected-access-in-special-methods <y or n>\\n",\n  "                        Warn about protected attribute access inside special\\n",\n  "                        methods (default: False)\\n",\n  "\\n",\n  "Format:\\n",\n  "  Formatting checker.\\n",\n  "\\n",\n  "  --max-line-length <int>\\n",\n  "                        Maximum number of characters on a single line.\\n",\n  "                        (default: 100)\\n",\n  "  --ignore-long-lines <regexp>\\n",\n  "                        Regexp for a line that is allowed to be longer than\\n",\n  "                        the limit. (default: ^\\\\s*(# )?<?https?://\\\\S+>?$)\\n",\n  "  --single-line-if-stmt <y or n>\\n",\n  "                        Allow the body of an if to be on the same line as the\\n",\n  "                        test if there is no else. (default: False)\\n",\n  "  --single-line-class-stmt <y or n>\\n",\n  "                        Allow the body of a class to be on the same line as\\n",\n  "                        the declaration if body contains single statement.\\n",\n  "                        (default: False)\\n",\n  "  --max-module-lines <int>\\n",\n  "                        Maximum number of lines in a module. (default: 1000)\\n",\n  "  --indent-string <string>\\n",\n  "                        String used as indentation unit. This is usually \\" \\"\\n",\n  "                        (4 spaces) or \\"\\\\t\\" (1 tab). (default: )\\n",\n  "  --indent-after-paren <int>\\n",\n  "                        Number of spaces of indent required inside a hanging\\n",\n  "                        or continued line. (default: 4)\\n",\n  "  --expected-line-ending-format <empty or LF or CRLF>\\n",\n  "                        Expected format of line ending, e.g. empty (any line\\n",\n  "                        ending), LF or CRLF. (default: )\\n",\n  "\\n",\n  "Exceptions:\\n",\n  "  Exception related checks.\\n",\n  "\\n",\n  "  --overgeneral-exceptions <comma-separated class names>\\n",\n  "                        Exceptions that will emit a warning when caught.\\n",\n  "                        (default: (\'BaseException\', \'Exception\'))\\n",\n  "\\n",\n  "Logging:\\n",\n  "  Checks use of the logging module.\\n",\n  "\\n",\n  "  --logging-modules <comma separated list>\\n",\n  "                        Logging modules to check that the string format\\n",\n  "                        arguments are in logging function parameter format.\\n",\n  "                        (default: (\'logging\',))\\n",\n  "  --logging-format-style <old (%) or new ({)>\\n",\n  "                        The type of string formatting that logging methods do.\\n",\n  "                        `old` means using % formatting, `new` is for `{}`\\n",\n  "                        formatting. (default: old)\\n",\n  "\\n",\n  "Design:\\n",\n  "  Checker of potential misdesigns.\\n",\n  "\\n",\n  "  --max-args <int>      Maximum number of arguments for function / method.\\n",\n  "                        (default: 5)\\n",\n  "  --max-locals <int>    Maximum number of locals for function / method body.\\n",\n  "                        (default: 15)\\n",\n  "  --max-returns <int>   Maximum number of return / yield for function / method\\n",\n  "                        body. (default: 6)\\n",\n  "  --max-branches <int>  Maximum number of branch for function / method body.\\n",\n  "                        (default: 12)\\n",\n  "  --max-statements <int>\\n",\n  "                        Maximum number of statements in function / method\\n",\n  "                        body. (default: 50)\\n",\n  "  --max-parents <num>   Maximum number of parents for a class (see R0901).\\n",\n  "                        (default: 7)\\n",\n  "  --ignored-parents <comma separated list of class names>\\n",\n  "                        List of qualified class names to ignore when counting\\n",\n  "                        class parents (see R0901) (default: ())\\n",\n  "  --max-attributes <num>\\n",\n  "                        Maximum number of attributes for a class (see R0902).\\n",\n  "                        (default: 7)\\n",\n  "  --min-public-methods <num>\\n",\n  "                        Minimum number of public methods for a class (see\\n",\n  "                        R0903). (default: 2)\\n",\n  "  --max-public-methods <num>\\n",\n  "                        Maximum number of public methods for a class (see\\n",\n  "                        R0904). (default: 20)\\n",\n  "  --max-bool-expr <num>\\n",\n  "                        Maximum number of boolean expressions in an if\\n",\n  "                        statement (see R0916). (default: 5)\\n",\n  "  --exclude-too-few-public-methods <pattern>[,<pattern>...]\\n",\n  "                        List of regular expressions of class ancestor names to\\n",\n  "                        ignore when counting public methods (see R0903)\\n",\n  "                        (default: [])\\n",\n  "\\n",\n  "String:\\n",\n  "  Check string literals.\\n",\n  "\\n",\n  "  --check-str-concat-over-line-jumps <y or n>\\n",\n  "                        This flag controls whether the implicit-str-concat\\n",\n  "                        should generate a warning on implicit string\\n",\n  "                        concatenation in sequences defined over several lines.\\n",\n  "                        (default: False)\\n",\n  "  --check-quote-consistency <y or n>\\n",\n  "                        This flag controls whether inconsistent-quotes\\n",\n  "                        generates a warning when the character used as a quote\\n",\n  "                        delimiter is used inconsistently within a module.\\n",\n  "                        (default: False)\\n",\n  "\\n",\n  "Spelling:\\n",\n  "  Check spelling in comments and docstrings.\\n",\n  "\\n",\n  "  --spelling-dict <dict name>\\n",\n  "                        Spelling dictionary name. Available dictionaries:\\n",\n  "                        none. To make it work, install the \'python-enchant\'\\n",\n  "                        package. (default: )\\n",\n  "  --spelling-ignore-words <comma separated words>\\n",\n  "                        List of comma separated words that should not be\\n",\n  "                        checked. (default: )\\n",\n  "  --spelling-private-dict-file <path to file>\\n",\n  "                        A path to a file that contains the private dictionary;\\n"\n ]\n},\n{\n "name": "stdout",\n "output_type": "stream",\n "text": [\n  "                        one word per line. (default: )\\n",\n  "  --spelling-store-unknown-words <y or n>\\n",\n  "                        Tells whether to store unknown words to the private\\n",\n  "                        dictionary (see the --spelling-private-dict-file\\n",\n  "                        option) instead of raising a message. (default: n)\\n",\n  "  --max-spelling-suggestions N\\n",\n  "                        Limits count of emitted suggestions for spelling\\n",\n  "                        mistakes. (default: 4)\\n",\n  "  --spelling-ignore-comment-directives <comma separated words>\\n",\n  "                        List of comma separated words that should be\\n",\n  "                        considered directives if they appear at the beginning\\n",\n  "                        of a comment and should not be checked. (default: fmt:\\n",\n  "                        on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:)\\n",\n  "\\n",\n  "Similarities:\\n",\n  "  Checks for similarities and duplicated code.\\n",\n  "\\n",\n  "  --min-similarity-lines <int>\\n",\n  "                        Minimum lines number of a similarity. (default: 4)\\n",\n  "  --ignore-comments <y or n>\\n",\n  "                        Comments are removed from the similarity computation\\n",\n  "                        (default: True)\\n",\n  "  --ignore-docstrings <y or n>\\n",\n  "                        Docstrings are removed from the similarity computation\\n",\n  "                        (default: True)\\n",\n  "  --ignore-imports <y or n>\\n",\n  "                        Imports are removed from the similarity computation\\n",\n  "                        (default: True)\\n",\n  "  --ignore-signatures <y or n>\\n",\n  "                        Signatures are removed from the similarity computation\\n",\n  "                        (default: True)\\n",\n  "\\n"\n ]\n}\n   ],\n   "source": [\n"python-lint-full \\n",\n"# NEED TO WORK ON THIS - CALL IT A DAY (2022-07-23 23:10 +05:45 GMT) "\n   ]\n  },\n  {\n   "cell_type": "code",\n   "execution_count": null,\n   "id": "ff01fc98",\n   "metadata": {},\n   "outputs": [],\n   "source": []\n  }\n ],\n "metadata": {\n  "kernelspec": {\n   "display_name": "Bash",\n   "language": "bash",\n   "name": "bash"\n  },\n  "language_info": {\n   "codemirror_mode": "shell",\n   "file_extension": ".sh",\n   "mimetype": "text/x-sh",\n   "name": "bash"\n  }\n },\n "nbformat": 4,\n "nbformat_minor": 5\n}'
}
